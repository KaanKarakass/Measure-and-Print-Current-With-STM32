
NUCLEO_F303K8-ACS712-SSD1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007408  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001058  08007598  08007598  00017598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085f0  080085f0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080085f0  080085f0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080085f0  080085f0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085f0  080085f0  000185f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085f4  080085f4  000185f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080085f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          000004e4  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000560  20000560  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b5d7  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f19  00000000  00000000  0002b683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a50  00000000  00000000  0002d5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000948  00000000  00000000  0002dff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001be9c  00000000  00000000  0002e938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc81  00000000  00000000  0004a7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0568  00000000  00000000  00058455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f89bd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003978  00000000  00000000  000f8a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007580 	.word	0x08007580

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08007580 	.word	0x08007580

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	0000      	movs	r0, r0
	...

08000c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c10:	b5b0      	push	{r4, r5, r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c16:	f000 fe97 	bl	8001948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1a:	f000 f8c7 	bl	8000dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1e:	f000 f9cd 	bl	8000fbc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c22:	f000 f91d 	bl	8000e60 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000c26:	f000 f98b 	bl	8000f40 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000c2a:	4857      	ldr	r0, [pc, #348]	; (8000d88 <main+0x178>)
 8000c2c:	f001 f8a8 	bl	8001d80 <HAL_ADC_Start>

  SSD1306_Init();
 8000c30:	f000 f9fa 	bl	8001028 <SSD1306_Init>
  char snum[7];
    SSD1306_GotoXY (15,0);
 8000c34:	2100      	movs	r1, #0
 8000c36:	200f      	movs	r0, #15
 8000c38:	f000 fb60 	bl	80012fc <SSD1306_GotoXY>
    SSD1306_Puts ("CURRENT",&Font_11x18, 1);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4953      	ldr	r1, [pc, #332]	; (8000d8c <main+0x17c>)
 8000c40:	4853      	ldr	r0, [pc, #332]	; (8000d90 <main+0x180>)
 8000c42:	f000 fbf1 	bl	8001428 <SSD1306_Puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_PollForConversion(&hadc1,1000);
 8000c46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c4a:	484f      	ldr	r0, [pc, #316]	; (8000d88 <main+0x178>)
 8000c4c:	f001 f94e 	bl	8001eec <HAL_ADC_PollForConversion>
	  readValue = HAL_ADC_GetValue(&hadc1);
 8000c50:	484d      	ldr	r0, [pc, #308]	; (8000d88 <main+0x178>)
 8000c52:	f001 fa19 	bl	8002088 <HAL_ADC_GetValue>
 8000c56:	4603      	mov	r3, r0
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	4b4e      	ldr	r3, [pc, #312]	; (8000d94 <main+0x184>)
 8000c5c:	801a      	strh	r2, [r3, #0]
	  rawVoltage = (float) readValue * 3.3 * 2 / 4095;
 8000c5e:	4b4d      	ldr	r3, [pc, #308]	; (8000d94 <main+0x184>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	ee07 3a90 	vmov	s15, r3
 8000c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c6a:	ee17 0a90 	vmov	r0, s15
 8000c6e:	f7ff fc63 	bl	8000538 <__aeabi_f2d>
 8000c72:	a341      	add	r3, pc, #260	; (adr r3, 8000d78 <main+0x168>)
 8000c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c78:	f7ff fcb6 	bl	80005e8 <__aeabi_dmul>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	460b      	mov	r3, r1
 8000c80:	4610      	mov	r0, r2
 8000c82:	4619      	mov	r1, r3
 8000c84:	4602      	mov	r2, r0
 8000c86:	460b      	mov	r3, r1
 8000c88:	f7ff faf8 	bl	800027c <__adddf3>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4610      	mov	r0, r2
 8000c92:	4619      	mov	r1, r3
 8000c94:	a33a      	add	r3, pc, #232	; (adr r3, 8000d80 <main+0x170>)
 8000c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c9a:	f7ff fdcf 	bl	800083c <__aeabi_ddiv>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	4610      	mov	r0, r2
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f7ff ff61 	bl	8000b6c <__aeabi_d2f>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4a3a      	ldr	r2, [pc, #232]	; (8000d98 <main+0x188>)
 8000cae:	6013      	str	r3, [r2, #0]

	  current =(rawVoltage - 2.5)/sensitivity;
 8000cb0:	4b39      	ldr	r3, [pc, #228]	; (8000d98 <main+0x188>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fc3f 	bl	8000538 <__aeabi_f2d>
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	4b37      	ldr	r3, [pc, #220]	; (8000d9c <main+0x18c>)
 8000cc0:	f7ff fada 	bl	8000278 <__aeabi_dsub>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	4614      	mov	r4, r2
 8000cca:	461d      	mov	r5, r3
 8000ccc:	4b34      	ldr	r3, [pc, #208]	; (8000da0 <main+0x190>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fc31 	bl	8000538 <__aeabi_f2d>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	460b      	mov	r3, r1
 8000cda:	4620      	mov	r0, r4
 8000cdc:	4629      	mov	r1, r5
 8000cde:	f7ff fdad 	bl	800083c <__aeabi_ddiv>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	4610      	mov	r0, r2
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f7ff ff3f 	bl	8000b6c <__aeabi_d2f>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	4a2c      	ldr	r2, [pc, #176]	; (8000da4 <main+0x194>)
 8000cf2:	6013      	str	r3, [r2, #0]
	  current *=10;
 8000cf4:	4b2b      	ldr	r3, [pc, #172]	; (8000da4 <main+0x194>)
 8000cf6:	edd3 7a00 	vldr	s15, [r3]
 8000cfa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000cfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d02:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <main+0x194>)
 8000d04:	edc3 7a00 	vstr	s15, [r3]
	  if(current < 0){
 8000d08:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <main+0x194>)
 8000d0a:	edd3 7a00 	vldr	s15, [r3]
 8000d0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d16:	d507      	bpl.n	8000d28 <main+0x118>
	  		  current *=-1;
 8000d18:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <main+0x194>)
 8000d1a:	edd3 7a00 	vldr	s15, [r3]
 8000d1e:	eef1 7a67 	vneg.f32	s15, s15
 8000d22:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <main+0x194>)
 8000d24:	edc3 7a00 	vstr	s15, [r3]
	  	  }
	  HAL_Delay (100);
 8000d28:	2064      	movs	r0, #100	; 0x64
 8000d2a:	f000 fe73 	bl	8001a14 <HAL_Delay>

	  gcvt(current, 6, snum);
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <main+0x194>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fc00 	bl	8000538 <__aeabi_f2d>
 8000d38:	4604      	mov	r4, r0
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	4619      	mov	r1, r3
 8000d40:	2006      	movs	r0, #6
 8000d42:	ec45 4b10 	vmov	d0, r4, r5
 8000d46:	f004 f847 	bl	8004dd8 <gcvt>
	  SSD1306_GotoXY (0, 40);
 8000d4a:	2128      	movs	r1, #40	; 0x28
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f000 fad5 	bl	80012fc <SSD1306_GotoXY>
	  SSD1306_Puts (snum, &Font_11x18, 1);
 8000d52:	463b      	mov	r3, r7
 8000d54:	2201      	movs	r2, #1
 8000d56:	490d      	ldr	r1, [pc, #52]	; (8000d8c <main+0x17c>)
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 fb65 	bl	8001428 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8000d5e:	f000 fa27 	bl	80011b0 <SSD1306_UpdateScreen>
	  SSD1306_GotoXY (100,40);
 8000d62:	2128      	movs	r1, #40	; 0x28
 8000d64:	2064      	movs	r0, #100	; 0x64
 8000d66:	f000 fac9 	bl	80012fc <SSD1306_GotoXY>
	  SSD1306_Puts ("mA",&Font_11x18, 1);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	4907      	ldr	r1, [pc, #28]	; (8000d8c <main+0x17c>)
 8000d6e:	480e      	ldr	r0, [pc, #56]	; (8000da8 <main+0x198>)
 8000d70:	f000 fb5a 	bl	8001428 <SSD1306_Puts>
  {
 8000d74:	e767      	b.n	8000c46 <main+0x36>
 8000d76:	bf00      	nop
 8000d78:	66666666 	.word	0x66666666
 8000d7c:	400a6666 	.word	0x400a6666
 8000d80:	00000000 	.word	0x00000000
 8000d84:	40affe00 	.word	0x40affe00
 8000d88:	20000098 	.word	0x20000098
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	08007598 	.word	0x08007598
 8000d94:	20000134 	.word	0x20000134
 8000d98:	20000138 	.word	0x20000138
 8000d9c:	40040000 	.word	0x40040000
 8000da0:	20000008 	.word	0x20000008
 8000da4:	2000013c 	.word	0x2000013c
 8000da8:	080075a0 	.word	0x080075a0

08000dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b096      	sub	sp, #88	; 0x58
 8000db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000db6:	2228      	movs	r2, #40	; 0x28
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f004 f85a 	bl	8004e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
 8000ddc:	611a      	str	r2, [r3, #16]
 8000dde:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de0:	2302      	movs	r3, #2
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de4:	2301      	movs	r3, #1
 8000de6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de8:	2310      	movs	r3, #16
 8000dea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dec:	2302      	movs	r3, #2
 8000dee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000df0:	2300      	movs	r3, #0
 8000df2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000df4:	2300      	movs	r3, #0
 8000df6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f002 fca1 	bl	8003744 <HAL_RCC_OscConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000e08:	f000 f908 	bl	800101c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f003 fcca 	bl	80047c0 <HAL_RCC_ClockConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000e32:	f000 f8f3 	bl	800101c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
 8000e36:	23a0      	movs	r3, #160	; 0xa0
 8000e38:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e3e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	4618      	mov	r0, r3
 8000e48:	f003 fea0 	bl	8004b8c <HAL_RCCEx_PeriphCLKConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e52:	f000 f8e3 	bl	800101c <Error_Handler>
  }
}
 8000e56:	bf00      	nop
 8000e58:	3758      	adds	r7, #88	; 0x58
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
 8000e80:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e82:	4b2e      	ldr	r3, [pc, #184]	; (8000f3c <MX_ADC1_Init+0xdc>)
 8000e84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e8a:	4b2c      	ldr	r3, [pc, #176]	; (8000f3c <MX_ADC1_Init+0xdc>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e90:	4b2a      	ldr	r3, [pc, #168]	; (8000f3c <MX_ADC1_Init+0xdc>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e96:	4b29      	ldr	r3, [pc, #164]	; (8000f3c <MX_ADC1_Init+0xdc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e9c:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <MX_ADC1_Init+0xdc>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ea2:	4b26      	ldr	r3, [pc, #152]	; (8000f3c <MX_ADC1_Init+0xdc>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eaa:	4b24      	ldr	r3, [pc, #144]	; (8000f3c <MX_ADC1_Init+0xdc>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eb0:	4b22      	ldr	r3, [pc, #136]	; (8000f3c <MX_ADC1_Init+0xdc>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb6:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <MX_ADC1_Init+0xdc>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <MX_ADC1_Init+0xdc>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <MX_ADC1_Init+0xdc>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eca:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <MX_ADC1_Init+0xdc>)
 8000ecc:	2204      	movs	r2, #4
 8000ece:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <MX_ADC1_Init+0xdc>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ed6:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <MX_ADC1_Init+0xdc>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000edc:	4817      	ldr	r0, [pc, #92]	; (8000f3c <MX_ADC1_Init+0xdc>)
 8000ede:	f000 fdbd 	bl	8001a5c <HAL_ADC_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000ee8:	f000 f898 	bl	800101c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4811      	ldr	r0, [pc, #68]	; (8000f3c <MX_ADC1_Init+0xdc>)
 8000ef8:	f001 fb94 	bl	8002624 <HAL_ADCEx_MultiModeConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000f02:	f000 f88b 	bl	800101c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f06:	2301      	movs	r3, #1
 8000f08:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	4619      	mov	r1, r3
 8000f22:	4806      	ldr	r0, [pc, #24]	; (8000f3c <MX_ADC1_Init+0xdc>)
 8000f24:	f001 f8be 	bl	80020a4 <HAL_ADC_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000f2e:	f000 f875 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	3728      	adds	r7, #40	; 0x28
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000098 	.word	0x20000098

08000f40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f46:	4a1c      	ldr	r2, [pc, #112]	; (8000fb8 <MX_I2C1_Init+0x78>)
 8000f48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f4c:	f240 220b 	movw	r2, #523	; 0x20b
 8000f50:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f52:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f6a:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f70:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f7e:	f001 ff39 	bl	8002df4 <HAL_I2C_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f88:	f000 f848 	bl	800101c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4809      	ldr	r0, [pc, #36]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f90:	f002 fb40 	bl	8003614 <HAL_I2CEx_ConfigAnalogFilter>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000f9a:	f000 f83f 	bl	800101c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000fa2:	f002 fb82 	bl	80036aa <HAL_I2CEx_ConfigDigitalFilter>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000fac:	f000 f836 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200000e8 	.word	0x200000e8
 8000fb8:	40005400 	.word	0x40005400

08000fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <MX_GPIO_Init+0x5c>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	4a14      	ldr	r2, [pc, #80]	; (8001018 <MX_GPIO_Init+0x5c>)
 8000fc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fcc:	6153      	str	r3, [r2, #20]
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <MX_GPIO_Init+0x5c>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_GPIO_Init+0x5c>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <MX_GPIO_Init+0x5c>)
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	6153      	str	r3, [r2, #20]
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_GPIO_Init+0x5c>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_GPIO_Init+0x5c>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	4a08      	ldr	r2, [pc, #32]	; (8001018 <MX_GPIO_Init+0x5c>)
 8000ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ffc:	6153      	str	r3, [r2, #20]
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_GPIO_Init+0x5c>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]

}
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000

0800101c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001020:	b672      	cpsid	i
}
 8001022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001024:	e7fe      	b.n	8001024 <Error_Handler+0x8>
	...

08001028 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800102e:	f000 fa21 	bl	8001474 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001032:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001036:	2201      	movs	r2, #1
 8001038:	2178      	movs	r1, #120	; 0x78
 800103a:	485b      	ldr	r0, [pc, #364]	; (80011a8 <SSD1306_Init+0x180>)
 800103c:	f002 f85e 	bl	80030fc <HAL_I2C_IsDeviceReady>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001046:	2300      	movs	r3, #0
 8001048:	e0a9      	b.n	800119e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800104a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800104e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001050:	e002      	b.n	8001058 <SSD1306_Init+0x30>
		p--;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3b01      	subs	r3, #1
 8001056:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f9      	bne.n	8001052 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800105e:	22ae      	movs	r2, #174	; 0xae
 8001060:	2100      	movs	r1, #0
 8001062:	2078      	movs	r0, #120	; 0x78
 8001064:	f000 fa82 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001068:	2220      	movs	r2, #32
 800106a:	2100      	movs	r1, #0
 800106c:	2078      	movs	r0, #120	; 0x78
 800106e:	f000 fa7d 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001072:	2210      	movs	r2, #16
 8001074:	2100      	movs	r1, #0
 8001076:	2078      	movs	r0, #120	; 0x78
 8001078:	f000 fa78 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800107c:	22b0      	movs	r2, #176	; 0xb0
 800107e:	2100      	movs	r1, #0
 8001080:	2078      	movs	r0, #120	; 0x78
 8001082:	f000 fa73 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001086:	22c8      	movs	r2, #200	; 0xc8
 8001088:	2100      	movs	r1, #0
 800108a:	2078      	movs	r0, #120	; 0x78
 800108c:	f000 fa6e 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	2078      	movs	r0, #120	; 0x78
 8001096:	f000 fa69 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800109a:	2210      	movs	r2, #16
 800109c:	2100      	movs	r1, #0
 800109e:	2078      	movs	r0, #120	; 0x78
 80010a0:	f000 fa64 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80010a4:	2240      	movs	r2, #64	; 0x40
 80010a6:	2100      	movs	r1, #0
 80010a8:	2078      	movs	r0, #120	; 0x78
 80010aa:	f000 fa5f 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80010ae:	2281      	movs	r2, #129	; 0x81
 80010b0:	2100      	movs	r1, #0
 80010b2:	2078      	movs	r0, #120	; 0x78
 80010b4:	f000 fa5a 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80010b8:	22ff      	movs	r2, #255	; 0xff
 80010ba:	2100      	movs	r1, #0
 80010bc:	2078      	movs	r0, #120	; 0x78
 80010be:	f000 fa55 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80010c2:	22a1      	movs	r2, #161	; 0xa1
 80010c4:	2100      	movs	r1, #0
 80010c6:	2078      	movs	r0, #120	; 0x78
 80010c8:	f000 fa50 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80010cc:	22a6      	movs	r2, #166	; 0xa6
 80010ce:	2100      	movs	r1, #0
 80010d0:	2078      	movs	r0, #120	; 0x78
 80010d2:	f000 fa4b 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80010d6:	22a8      	movs	r2, #168	; 0xa8
 80010d8:	2100      	movs	r1, #0
 80010da:	2078      	movs	r0, #120	; 0x78
 80010dc:	f000 fa46 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80010e0:	223f      	movs	r2, #63	; 0x3f
 80010e2:	2100      	movs	r1, #0
 80010e4:	2078      	movs	r0, #120	; 0x78
 80010e6:	f000 fa41 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80010ea:	22a4      	movs	r2, #164	; 0xa4
 80010ec:	2100      	movs	r1, #0
 80010ee:	2078      	movs	r0, #120	; 0x78
 80010f0:	f000 fa3c 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80010f4:	22d3      	movs	r2, #211	; 0xd3
 80010f6:	2100      	movs	r1, #0
 80010f8:	2078      	movs	r0, #120	; 0x78
 80010fa:	f000 fa37 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2078      	movs	r0, #120	; 0x78
 8001104:	f000 fa32 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001108:	22d5      	movs	r2, #213	; 0xd5
 800110a:	2100      	movs	r1, #0
 800110c:	2078      	movs	r0, #120	; 0x78
 800110e:	f000 fa2d 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001112:	22f0      	movs	r2, #240	; 0xf0
 8001114:	2100      	movs	r1, #0
 8001116:	2078      	movs	r0, #120	; 0x78
 8001118:	f000 fa28 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800111c:	22d9      	movs	r2, #217	; 0xd9
 800111e:	2100      	movs	r1, #0
 8001120:	2078      	movs	r0, #120	; 0x78
 8001122:	f000 fa23 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001126:	2222      	movs	r2, #34	; 0x22
 8001128:	2100      	movs	r1, #0
 800112a:	2078      	movs	r0, #120	; 0x78
 800112c:	f000 fa1e 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001130:	22da      	movs	r2, #218	; 0xda
 8001132:	2100      	movs	r1, #0
 8001134:	2078      	movs	r0, #120	; 0x78
 8001136:	f000 fa19 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800113a:	2212      	movs	r2, #18
 800113c:	2100      	movs	r1, #0
 800113e:	2078      	movs	r0, #120	; 0x78
 8001140:	f000 fa14 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001144:	22db      	movs	r2, #219	; 0xdb
 8001146:	2100      	movs	r1, #0
 8001148:	2078      	movs	r0, #120	; 0x78
 800114a:	f000 fa0f 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800114e:	2220      	movs	r2, #32
 8001150:	2100      	movs	r1, #0
 8001152:	2078      	movs	r0, #120	; 0x78
 8001154:	f000 fa0a 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001158:	228d      	movs	r2, #141	; 0x8d
 800115a:	2100      	movs	r1, #0
 800115c:	2078      	movs	r0, #120	; 0x78
 800115e:	f000 fa05 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001162:	2214      	movs	r2, #20
 8001164:	2100      	movs	r1, #0
 8001166:	2078      	movs	r0, #120	; 0x78
 8001168:	f000 fa00 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800116c:	22af      	movs	r2, #175	; 0xaf
 800116e:	2100      	movs	r1, #0
 8001170:	2078      	movs	r0, #120	; 0x78
 8001172:	f000 f9fb 	bl	800156c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001176:	222e      	movs	r2, #46	; 0x2e
 8001178:	2100      	movs	r1, #0
 800117a:	2078      	movs	r0, #120	; 0x78
 800117c:	f000 f9f6 	bl	800156c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001180:	2000      	movs	r0, #0
 8001182:	f000 f843 	bl	800120c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001186:	f000 f813 	bl	80011b0 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <SSD1306_Init+0x184>)
 800118c:	2200      	movs	r2, #0
 800118e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <SSD1306_Init+0x184>)
 8001192:	2200      	movs	r2, #0
 8001194:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001196:	4b05      	ldr	r3, [pc, #20]	; (80011ac <SSD1306_Init+0x184>)
 8001198:	2201      	movs	r2, #1
 800119a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800119c:	2301      	movs	r3, #1
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200000e8 	.word	0x200000e8
 80011ac:	20000540 	.word	0x20000540

080011b0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80011b6:	2300      	movs	r3, #0
 80011b8:	71fb      	strb	r3, [r7, #7]
 80011ba:	e01d      	b.n	80011f8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	3b50      	subs	r3, #80	; 0x50
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	461a      	mov	r2, r3
 80011c4:	2100      	movs	r1, #0
 80011c6:	2078      	movs	r0, #120	; 0x78
 80011c8:	f000 f9d0 	bl	800156c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2100      	movs	r1, #0
 80011d0:	2078      	movs	r0, #120	; 0x78
 80011d2:	f000 f9cb 	bl	800156c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80011d6:	2210      	movs	r2, #16
 80011d8:	2100      	movs	r1, #0
 80011da:	2078      	movs	r0, #120	; 0x78
 80011dc:	f000 f9c6 	bl	800156c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	01db      	lsls	r3, r3, #7
 80011e4:	4a08      	ldr	r2, [pc, #32]	; (8001208 <SSD1306_UpdateScreen+0x58>)
 80011e6:	441a      	add	r2, r3
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	2140      	movs	r1, #64	; 0x40
 80011ec:	2078      	movs	r0, #120	; 0x78
 80011ee:	f000 f957 	bl	80014a0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	3301      	adds	r3, #1
 80011f6:	71fb      	strb	r3, [r7, #7]
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	2b07      	cmp	r3, #7
 80011fc:	d9de      	bls.n	80011bc <SSD1306_UpdateScreen+0xc>
	}
}
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000140 	.word	0x20000140

0800120c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d101      	bne.n	8001220 <SSD1306_Fill+0x14>
 800121c:	2300      	movs	r3, #0
 800121e:	e000      	b.n	8001222 <SSD1306_Fill+0x16>
 8001220:	23ff      	movs	r3, #255	; 0xff
 8001222:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001226:	4619      	mov	r1, r3
 8001228:	4803      	ldr	r0, [pc, #12]	; (8001238 <SSD1306_Fill+0x2c>)
 800122a:	f003 fe23 	bl	8004e74 <memset>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000140 	.word	0x20000140

0800123c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
 8001246:	460b      	mov	r3, r1
 8001248:	80bb      	strh	r3, [r7, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	70fb      	strb	r3, [r7, #3]
	if (
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	2b7f      	cmp	r3, #127	; 0x7f
 8001252:	d848      	bhi.n	80012e6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001254:	88bb      	ldrh	r3, [r7, #4]
 8001256:	2b3f      	cmp	r3, #63	; 0x3f
 8001258:	d845      	bhi.n	80012e6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <SSD1306_DrawPixel+0xb8>)
 800125c:	791b      	ldrb	r3, [r3, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d006      	beq.n	8001270 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf0c      	ite	eq
 8001268:	2301      	moveq	r3, #1
 800126a:	2300      	movne	r3, #0
 800126c:	b2db      	uxtb	r3, r3
 800126e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d11a      	bne.n	80012ac <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001276:	88fa      	ldrh	r2, [r7, #6]
 8001278:	88bb      	ldrh	r3, [r7, #4]
 800127a:	08db      	lsrs	r3, r3, #3
 800127c:	b298      	uxth	r0, r3
 800127e:	4603      	mov	r3, r0
 8001280:	01db      	lsls	r3, r3, #7
 8001282:	4413      	add	r3, r2
 8001284:	4a1c      	ldr	r2, [pc, #112]	; (80012f8 <SSD1306_DrawPixel+0xbc>)
 8001286:	5cd3      	ldrb	r3, [r2, r3]
 8001288:	b25a      	sxtb	r2, r3
 800128a:	88bb      	ldrh	r3, [r7, #4]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	2101      	movs	r1, #1
 8001292:	fa01 f303 	lsl.w	r3, r1, r3
 8001296:	b25b      	sxtb	r3, r3
 8001298:	4313      	orrs	r3, r2
 800129a:	b259      	sxtb	r1, r3
 800129c:	88fa      	ldrh	r2, [r7, #6]
 800129e:	4603      	mov	r3, r0
 80012a0:	01db      	lsls	r3, r3, #7
 80012a2:	4413      	add	r3, r2
 80012a4:	b2c9      	uxtb	r1, r1
 80012a6:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <SSD1306_DrawPixel+0xbc>)
 80012a8:	54d1      	strb	r1, [r2, r3]
 80012aa:	e01d      	b.n	80012e8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012ac:	88fa      	ldrh	r2, [r7, #6]
 80012ae:	88bb      	ldrh	r3, [r7, #4]
 80012b0:	08db      	lsrs	r3, r3, #3
 80012b2:	b298      	uxth	r0, r3
 80012b4:	4603      	mov	r3, r0
 80012b6:	01db      	lsls	r3, r3, #7
 80012b8:	4413      	add	r3, r2
 80012ba:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <SSD1306_DrawPixel+0xbc>)
 80012bc:	5cd3      	ldrb	r3, [r2, r3]
 80012be:	b25a      	sxtb	r2, r3
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	2101      	movs	r1, #1
 80012c8:	fa01 f303 	lsl.w	r3, r1, r3
 80012cc:	b25b      	sxtb	r3, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	b25b      	sxtb	r3, r3
 80012d2:	4013      	ands	r3, r2
 80012d4:	b259      	sxtb	r1, r3
 80012d6:	88fa      	ldrh	r2, [r7, #6]
 80012d8:	4603      	mov	r3, r0
 80012da:	01db      	lsls	r3, r3, #7
 80012dc:	4413      	add	r3, r2
 80012de:	b2c9      	uxtb	r1, r1
 80012e0:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <SSD1306_DrawPixel+0xbc>)
 80012e2:	54d1      	strb	r1, [r2, r3]
 80012e4:	e000      	b.n	80012e8 <SSD1306_DrawPixel+0xac>
		return;
 80012e6:	bf00      	nop
	}
}
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000540 	.word	0x20000540
 80012f8:	20000140 	.word	0x20000140

080012fc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	460a      	mov	r2, r1
 8001306:	80fb      	strh	r3, [r7, #6]
 8001308:	4613      	mov	r3, r2
 800130a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800130c:	4a05      	ldr	r2, [pc, #20]	; (8001324 <SSD1306_GotoXY+0x28>)
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001312:	4a04      	ldr	r2, [pc, #16]	; (8001324 <SSD1306_GotoXY+0x28>)
 8001314:	88bb      	ldrh	r3, [r7, #4]
 8001316:	8053      	strh	r3, [r2, #2]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	20000540 	.word	0x20000540

08001328 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
 8001334:	4613      	mov	r3, r2
 8001336:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001338:	4b3a      	ldr	r3, [pc, #232]	; (8001424 <SSD1306_Putc+0xfc>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	4413      	add	r3, r2
	if (
 8001344:	2b7f      	cmp	r3, #127	; 0x7f
 8001346:	dc07      	bgt.n	8001358 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001348:	4b36      	ldr	r3, [pc, #216]	; (8001424 <SSD1306_Putc+0xfc>)
 800134a:	885b      	ldrh	r3, [r3, #2]
 800134c:	461a      	mov	r2, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	785b      	ldrb	r3, [r3, #1]
 8001352:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001354:	2b3f      	cmp	r3, #63	; 0x3f
 8001356:	dd01      	ble.n	800135c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001358:	2300      	movs	r3, #0
 800135a:	e05e      	b.n	800141a <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	e04b      	b.n	80013fa <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	3b20      	subs	r3, #32
 800136a:	6839      	ldr	r1, [r7, #0]
 800136c:	7849      	ldrb	r1, [r1, #1]
 800136e:	fb01 f303 	mul.w	r3, r1, r3
 8001372:	4619      	mov	r1, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	440b      	add	r3, r1
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	4413      	add	r3, r2
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001380:	2300      	movs	r3, #0
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	e030      	b.n	80013e8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d010      	beq.n	80013b8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001396:	4b23      	ldr	r3, [pc, #140]	; (8001424 <SSD1306_Putc+0xfc>)
 8001398:	881a      	ldrh	r2, [r3, #0]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	b29b      	uxth	r3, r3
 800139e:	4413      	add	r3, r2
 80013a0:	b298      	uxth	r0, r3
 80013a2:	4b20      	ldr	r3, [pc, #128]	; (8001424 <SSD1306_Putc+0xfc>)
 80013a4:	885a      	ldrh	r2, [r3, #2]
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	4413      	add	r3, r2
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	79ba      	ldrb	r2, [r7, #6]
 80013b0:	4619      	mov	r1, r3
 80013b2:	f7ff ff43 	bl	800123c <SSD1306_DrawPixel>
 80013b6:	e014      	b.n	80013e2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <SSD1306_Putc+0xfc>)
 80013ba:	881a      	ldrh	r2, [r3, #0]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	4413      	add	r3, r2
 80013c2:	b298      	uxth	r0, r3
 80013c4:	4b17      	ldr	r3, [pc, #92]	; (8001424 <SSD1306_Putc+0xfc>)
 80013c6:	885a      	ldrh	r2, [r3, #2]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	4413      	add	r3, r2
 80013ce:	b299      	uxth	r1, r3
 80013d0:	79bb      	ldrb	r3, [r7, #6]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	bf0c      	ite	eq
 80013d6:	2301      	moveq	r3, #1
 80013d8:	2300      	movne	r3, #0
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	f7ff ff2d 	bl	800123c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	3301      	adds	r3, #1
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d3c8      	bcc.n	8001386 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	3301      	adds	r3, #1
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	785b      	ldrb	r3, [r3, #1]
 80013fe:	461a      	mov	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	4293      	cmp	r3, r2
 8001404:	d3ad      	bcc.n	8001362 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001406:	4b07      	ldr	r3, [pc, #28]	; (8001424 <SSD1306_Putc+0xfc>)
 8001408:	881a      	ldrh	r2, [r3, #0]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	4413      	add	r3, r2
 8001412:	b29a      	uxth	r2, r3
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <SSD1306_Putc+0xfc>)
 8001416:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001418:	79fb      	ldrb	r3, [r7, #7]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000540 	.word	0x20000540

08001428 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	4613      	mov	r3, r2
 8001434:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001436:	e012      	b.n	800145e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	79fa      	ldrb	r2, [r7, #7]
 800143e:	68b9      	ldr	r1, [r7, #8]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff71 	bl	8001328 <SSD1306_Putc>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d002      	beq.n	8001458 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	e008      	b.n	800146a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	3301      	adds	r3, #1
 800145c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1e8      	bne.n	8001438 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	781b      	ldrb	r3, [r3, #0]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <ssd1306_I2C_Init+0x28>)
 800147c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800147e:	e002      	b.n	8001486 <ssd1306_I2C_Init+0x12>
		p--;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1f9      	bne.n	8001480 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	0003d090 	.word	0x0003d090

080014a0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b0c7      	sub	sp, #284	; 0x11c
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	4604      	mov	r4, r0
 80014a8:	4608      	mov	r0, r1
 80014aa:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80014ae:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80014b2:	600a      	str	r2, [r1, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014ba:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80014be:	4622      	mov	r2, r4
 80014c0:	701a      	strb	r2, [r3, #0]
 80014c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014c6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80014ca:	4602      	mov	r2, r0
 80014cc:	701a      	strb	r2, [r3, #0]
 80014ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014d6:	460a      	mov	r2, r1
 80014d8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80014da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014e2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80014e6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80014ea:	7812      	ldrb	r2, [r2, #0]
 80014ec:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80014f4:	e015      	b.n	8001522 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80014f6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80014fa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80014fe:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	441a      	add	r2, r3
 8001506:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800150a:	3301      	adds	r3, #1
 800150c:	7811      	ldrb	r1, [r2, #0]
 800150e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001512:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001516:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001518:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800151c:	3301      	adds	r3, #1
 800151e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001522:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001526:	b29b      	uxth	r3, r3
 8001528:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800152c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001530:	8812      	ldrh	r2, [r2, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d8df      	bhi.n	80014f6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001536:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800153a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b299      	uxth	r1, r3
 8001542:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001546:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	3301      	adds	r3, #1
 800154e:	b29b      	uxth	r3, r3
 8001550:	f107 020c 	add.w	r2, r7, #12
 8001554:	200a      	movs	r0, #10
 8001556:	9000      	str	r0, [sp, #0]
 8001558:	4803      	ldr	r0, [pc, #12]	; (8001568 <ssd1306_I2C_WriteMulti+0xc8>)
 800155a:	f001 fcdb 	bl	8002f14 <HAL_I2C_Master_Transmit>
}
 800155e:	bf00      	nop
 8001560:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001564:	46bd      	mov	sp, r7
 8001566:	bd90      	pop	{r4, r7, pc}
 8001568:	200000e8 	.word	0x200000e8

0800156c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af02      	add	r7, sp, #8
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
 8001576:	460b      	mov	r3, r1
 8001578:	71bb      	strb	r3, [r7, #6]
 800157a:	4613      	mov	r3, r2
 800157c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800157e:	79bb      	ldrb	r3, [r7, #6]
 8001580:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001582:	797b      	ldrb	r3, [r7, #5]
 8001584:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	b299      	uxth	r1, r3
 800158a:	f107 020c 	add.w	r2, r7, #12
 800158e:	230a      	movs	r3, #10
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	2302      	movs	r3, #2
 8001594:	4803      	ldr	r0, [pc, #12]	; (80015a4 <ssd1306_I2C_Write+0x38>)
 8001596:	f001 fcbd 	bl	8002f14 <HAL_I2C_Master_Transmit>
}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200000e8 	.word	0x200000e8

080015a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <HAL_MspInit+0x44>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <HAL_MspInit+0x44>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6193      	str	r3, [r2, #24]
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <HAL_MspInit+0x44>)
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_MspInit+0x44>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	4a08      	ldr	r2, [pc, #32]	; (80015ec <HAL_MspInit+0x44>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d0:	61d3      	str	r3, [r2, #28]
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_MspInit+0x44>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000

080015f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001610:	d124      	bne.n	800165c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_ADC_MspInit+0x74>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	4a13      	ldr	r2, [pc, #76]	; (8001664 <HAL_ADC_MspInit+0x74>)
 8001618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161c:	6153      	str	r3, [r2, #20]
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <HAL_ADC_MspInit+0x74>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <HAL_ADC_MspInit+0x74>)
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	4a0d      	ldr	r2, [pc, #52]	; (8001664 <HAL_ADC_MspInit+0x74>)
 8001630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001634:	6153      	str	r3, [r2, #20]
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_ADC_MspInit+0x74>)
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001642:	2301      	movs	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001646:	2303      	movs	r3, #3
 8001648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001658:	f001 fa5a 	bl	8002b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800165c:	bf00      	nop
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021000 	.word	0x40021000

08001668 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <HAL_I2C_MspInit+0x7c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d127      	bne.n	80016da <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <HAL_I2C_MspInit+0x80>)
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	4a16      	ldr	r2, [pc, #88]	; (80016e8 <HAL_I2C_MspInit+0x80>)
 8001690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001694:	6153      	str	r3, [r2, #20]
 8001696:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <HAL_I2C_MspInit+0x80>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016a2:	23c0      	movs	r3, #192	; 0xc0
 80016a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a6:	2312      	movs	r3, #18
 80016a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016b2:	2304      	movs	r3, #4
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	480b      	ldr	r0, [pc, #44]	; (80016ec <HAL_I2C_MspInit+0x84>)
 80016be:	f001 fa27 	bl	8002b10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_I2C_MspInit+0x80>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	4a08      	ldr	r2, [pc, #32]	; (80016e8 <HAL_I2C_MspInit+0x80>)
 80016c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016cc:	61d3      	str	r3, [r2, #28]
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_I2C_MspInit+0x80>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	; 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40005400 	.word	0x40005400
 80016e8:	40021000 	.word	0x40021000
 80016ec:	48000400 	.word	0x48000400

080016f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <NMI_Handler+0x4>

080016f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <HardFault_Handler+0x4>

080016fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <MemManage_Handler+0x4>

08001702 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <BusFault_Handler+0x4>

08001708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <UsageFault_Handler+0x4>

0800170e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800173c:	f000 f94a 	bl	80019d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}

08001744 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
	return 1;
 8001748:	2301      	movs	r3, #1
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <_kill>:

int _kill(int pid, int sig)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800175e:	f003 fb5f 	bl	8004e20 <__errno>
 8001762:	4603      	mov	r3, r0
 8001764:	2216      	movs	r2, #22
 8001766:	601a      	str	r2, [r3, #0]
	return -1;
 8001768:	f04f 33ff 	mov.w	r3, #4294967295
}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <_exit>:

void _exit (int status)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800177c:	f04f 31ff 	mov.w	r1, #4294967295
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff ffe7 	bl	8001754 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001786:	e7fe      	b.n	8001786 <_exit+0x12>

08001788 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	e00a      	b.n	80017b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800179a:	f3af 8000 	nop.w
 800179e:	4601      	mov	r1, r0
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	60ba      	str	r2, [r7, #8]
 80017a6:	b2ca      	uxtb	r2, r1
 80017a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3301      	adds	r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	dbf0      	blt.n	800179a <_read+0x12>
	}

return len;
 80017b8:	687b      	ldr	r3, [r7, #4]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b086      	sub	sp, #24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	e009      	b.n	80017e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	60ba      	str	r2, [r7, #8]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	3301      	adds	r3, #1
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	dbf1      	blt.n	80017d4 <_write+0x12>
	}
	return len;
 80017f0:	687b      	ldr	r3, [r7, #4]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <_close>:

int _close(int file)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
	return -1;
 8001802:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001822:	605a      	str	r2, [r3, #4]
	return 0;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <_isatty>:

int _isatty(int file)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
	return 1;
 800183a:	2301      	movs	r3, #1
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
	return 0;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800186c:	4a14      	ldr	r2, [pc, #80]	; (80018c0 <_sbrk+0x5c>)
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <_sbrk+0x60>)
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d102      	bne.n	8001886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <_sbrk+0x64>)
 8001882:	4a12      	ldr	r2, [pc, #72]	; (80018cc <_sbrk+0x68>)
 8001884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	429a      	cmp	r2, r3
 8001892:	d207      	bcs.n	80018a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001894:	f003 fac4 	bl	8004e20 <__errno>
 8001898:	4603      	mov	r3, r0
 800189a:	220c      	movs	r2, #12
 800189c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	e009      	b.n	80018b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <_sbrk+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <_sbrk+0x64>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <_sbrk+0x64>)
 80018b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b6:	68fb      	ldr	r3, [r7, #12]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20003000 	.word	0x20003000
 80018c4:	00000400 	.word	0x00000400
 80018c8:	20000548 	.word	0x20000548
 80018cc:	20000560 	.word	0x20000560

080018d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <SystemInit+0x20>)
 80018d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018da:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <SystemInit+0x20>)
 80018dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800192c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f8:	480d      	ldr	r0, [pc, #52]	; (8001930 <LoopForever+0x6>)
  ldr r1, =_edata
 80018fa:	490e      	ldr	r1, [pc, #56]	; (8001934 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018fc:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <LoopForever+0xe>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001900:	e002      	b.n	8001908 <LoopCopyDataInit>

08001902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001906:	3304      	adds	r3, #4

08001908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800190c:	d3f9      	bcc.n	8001902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190e:	4a0b      	ldr	r2, [pc, #44]	; (800193c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001910:	4c0b      	ldr	r4, [pc, #44]	; (8001940 <LoopForever+0x16>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001914:	e001      	b.n	800191a <LoopFillZerobss>

08001916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001918:	3204      	adds	r2, #4

0800191a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800191c:	d3fb      	bcc.n	8001916 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800191e:	f7ff ffd7 	bl	80018d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001922:	f003 fa83 	bl	8004e2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001926:	f7ff f973 	bl	8000c10 <main>

0800192a <LoopForever>:

LoopForever:
    b LoopForever
 800192a:	e7fe      	b.n	800192a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800192c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001934:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001938:	080085f8 	.word	0x080085f8
  ldr r2, =_sbss
 800193c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001940:	20000560 	.word	0x20000560

08001944 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001944:	e7fe      	b.n	8001944 <ADC1_2_IRQHandler>
	...

08001948 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_Init+0x28>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a07      	ldr	r2, [pc, #28]	; (8001970 <HAL_Init+0x28>)
 8001952:	f043 0310 	orr.w	r3, r3, #16
 8001956:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001958:	2003      	movs	r0, #3
 800195a:	f001 f8a5 	bl	8002aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800195e:	2000      	movs	r0, #0
 8001960:	f000 f808 	bl	8001974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001964:	f7ff fe20 	bl	80015a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40022000 	.word	0x40022000

08001974 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_InitTick+0x54>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_InitTick+0x58>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4619      	mov	r1, r3
 8001986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198a:	fbb3 f3f1 	udiv	r3, r3, r1
 800198e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001992:	4618      	mov	r0, r3
 8001994:	f001 f8af 	bl	8002af6 <HAL_SYSTICK_Config>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e00e      	b.n	80019c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b0f      	cmp	r3, #15
 80019a6:	d80a      	bhi.n	80019be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a8:	2200      	movs	r2, #0
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295
 80019b0:	f001 f885 	bl	8002abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b4:	4a06      	ldr	r2, [pc, #24]	; (80019d0 <HAL_InitTick+0x5c>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
 80019bc:	e000      	b.n	80019c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	2000000c 	.word	0x2000000c
 80019cc:	20000014 	.word	0x20000014
 80019d0:	20000010 	.word	0x20000010

080019d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_IncTick+0x20>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	461a      	mov	r2, r3
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_IncTick+0x24>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <HAL_IncTick+0x24>)
 80019e6:	6013      	str	r3, [r2, #0]
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000014 	.word	0x20000014
 80019f8:	2000054c 	.word	0x2000054c

080019fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <HAL_GetTick+0x14>)
 8001a02:	681b      	ldr	r3, [r3, #0]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	2000054c 	.word	0x2000054c

08001a14 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a1c:	f7ff ffee 	bl	80019fc <HAL_GetTick>
 8001a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a2c:	d005      	beq.n	8001a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <HAL_Delay+0x44>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4413      	add	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a3a:	bf00      	nop
 8001a3c:	f7ff ffde 	bl	80019fc <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d8f7      	bhi.n	8001a3c <HAL_Delay+0x28>
  {
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000014 	.word	0x20000014

08001a5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b09a      	sub	sp, #104	; 0x68
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e172      	b.n	8001d62 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f003 0310 	and.w	r3, r3, #16
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d176      	bne.n	8001b7c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d152      	bne.n	8001b3c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff fd9d 	bl	80015f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d13b      	bne.n	8001b3c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 fed7 	bl	8002878 <ADC_Disable>
 8001aca:	4603      	mov	r3, r0
 8001acc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	f003 0310 	and.w	r3, r3, #16
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d12f      	bne.n	8001b3c <HAL_ADC_Init+0xe0>
 8001adc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d12b      	bne.n	8001b3c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aec:	f023 0302 	bic.w	r3, r3, #2
 8001af0:	f043 0202 	orr.w	r2, r3, #2
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b06:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b16:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b18:	4b94      	ldr	r3, [pc, #592]	; (8001d6c <HAL_ADC_Init+0x310>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a94      	ldr	r2, [pc, #592]	; (8001d70 <HAL_ADC_Init+0x314>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	0c9a      	lsrs	r2, r3, #18
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b2e:	e002      	b.n	8001b36 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f9      	bne.n	8001b30 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d007      	beq.n	8001b5a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b58:	d110      	bne.n	8001b7c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f023 0312 	bic.w	r3, r3, #18
 8001b62:	f043 0210 	orr.w	r2, r3, #16
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	f043 0201 	orr.w	r2, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f040 80df 	bne.w	8001d48 <HAL_ADC_Init+0x2ec>
 8001b8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f040 80da 	bne.w	8001d48 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f040 80d2 	bne.w	8001d48 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bac:	f043 0202 	orr.w	r2, r3, #2
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bb4:	4b6f      	ldr	r3, [pc, #444]	; (8001d74 <HAL_ADC_Init+0x318>)
 8001bb6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bc0:	d102      	bne.n	8001bc8 <HAL_ADC_Init+0x16c>
 8001bc2:	4b6d      	ldr	r3, [pc, #436]	; (8001d78 <HAL_ADC_Init+0x31c>)
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	e002      	b.n	8001bce <HAL_ADC_Init+0x172>
 8001bc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bcc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d108      	bne.n	8001bee <HAL_ADC_Init+0x192>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_ADC_Init+0x192>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <HAL_ADC_Init+0x194>
 8001bee:	2300      	movs	r3, #0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d11c      	bne.n	8001c2e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bf4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d010      	beq.n	8001c1c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d107      	bne.n	8001c16 <HAL_ADC_Init+0x1ba>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d101      	bne.n	8001c16 <HAL_ADC_Init+0x1ba>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_ADC_Init+0x1bc>
 8001c16:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d108      	bne.n	8001c2e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c2c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	7e5b      	ldrb	r3, [r3, #25]
 8001c32:	035b      	lsls	r3, r3, #13
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c38:	2a01      	cmp	r2, #1
 8001c3a:	d002      	beq.n	8001c42 <HAL_ADC_Init+0x1e6>
 8001c3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c40:	e000      	b.n	8001c44 <HAL_ADC_Init+0x1e8>
 8001c42:	2200      	movs	r2, #0
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c54:	4313      	orrs	r3, r2
 8001c56:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d11b      	bne.n	8001c9a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	7e5b      	ldrb	r3, [r3, #25]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d109      	bne.n	8001c7e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	045a      	lsls	r2, r3, #17
 8001c72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c74:	4313      	orrs	r3, r2
 8001c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7a:	663b      	str	r3, [r7, #96]	; 0x60
 8001c7c:	e00d      	b.n	8001c9a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001c86:	f043 0220 	orr.w	r2, r3, #32
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	f043 0201 	orr.w	r2, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d007      	beq.n	8001cb2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001caa:	4313      	orrs	r3, r2
 8001cac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d114      	bne.n	8001cea <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cce:	f023 0302 	bic.w	r3, r3, #2
 8001cd2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7e1b      	ldrb	r3, [r3, #24]
 8001cd8:	039a      	lsls	r2, r3, #14
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <HAL_ADC_Init+0x320>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001cfa:	430b      	orrs	r3, r1
 8001cfc:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d10c      	bne.n	8001d20 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0c:	f023 010f 	bic.w	r1, r3, #15
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	1e5a      	subs	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d1e:	e007      	b.n	8001d30 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 020f 	bic.w	r2, r2, #15
 8001d2e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f023 0303 	bic.w	r3, r3, #3
 8001d3e:	f043 0201 	orr.w	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40
 8001d46:	e00a      	b.n	8001d5e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f023 0312 	bic.w	r3, r3, #18
 8001d50:	f043 0210 	orr.w	r2, r3, #16
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001d58:	2301      	movs	r3, #1
 8001d5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001d5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3768      	adds	r7, #104	; 0x68
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	2000000c 	.word	0x2000000c
 8001d70:	431bde83 	.word	0x431bde83
 8001d74:	50000300 	.word	0x50000300
 8001d78:	50000100 	.word	0x50000100
 8001d7c:	fff0c007 	.word	0xfff0c007

08001d80 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f040 809c 	bne.w	8001ed4 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_ADC_Start+0x2a>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e097      	b.n	8001eda <HAL_ADC_Start+0x15a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 fcfc 	bl	80027b0 <ADC_Enable>
 8001db8:	4603      	mov	r3, r0
 8001dba:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f040 8083 	bne.w	8001eca <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001dcc:	f023 0301 	bic.w	r3, r3, #1
 8001dd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001dd8:	4b42      	ldr	r3, [pc, #264]	; (8001ee4 <HAL_ADC_Start+0x164>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d004      	beq.n	8001dee <HAL_ADC_Start+0x6e>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dec:	d115      	bne.n	8001e1a <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d027      	beq.n	8001e58 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001e18:	e01e      	b.n	8001e58 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e2e:	d004      	beq.n	8001e3a <HAL_ADC_Start+0xba>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a2c      	ldr	r2, [pc, #176]	; (8001ee8 <HAL_ADC_Start+0x168>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d10e      	bne.n	8001e58 <HAL_ADC_Start+0xd8>
 8001e3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d007      	beq.n	8001e58 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e64:	d106      	bne.n	8001e74 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f023 0206 	bic.w	r2, r3, #6
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	645a      	str	r2, [r3, #68]	; 0x44
 8001e72:	e002      	b.n	8001e7a <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	221c      	movs	r2, #28
 8001e88:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <HAL_ADC_Start+0x164>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d010      	beq.n	8001eb8 <HAL_ADC_Start+0x138>
 8001e96:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <HAL_ADC_Start+0x164>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	2b05      	cmp	r3, #5
 8001ea0:	d00a      	beq.n	8001eb8 <HAL_ADC_Start+0x138>
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HAL_ADC_Start+0x164>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 031f 	and.w	r3, r3, #31
 8001eaa:	2b09      	cmp	r3, #9
 8001eac:	d004      	beq.n	8001eb8 <HAL_ADC_Start+0x138>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eb6:	d10f      	bne.n	8001ed8 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0204 	orr.w	r2, r2, #4
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	e006      	b.n	8001ed8 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001ed2:	e001      	b.n	8001ed8 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	50000300 	.word	0x50000300
 8001ee8:	50000100 	.word	0x50000100

08001eec <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d102      	bne.n	8001f08 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001f02:	2308      	movs	r3, #8
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	e02e      	b.n	8001f66 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f08:	4b5e      	ldr	r3, [pc, #376]	; (8002084 <HAL_ADC_PollForConversion+0x198>)
 8001f0a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d112      	bne.n	8001f3e <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d11d      	bne.n	8001f62 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f043 0220 	orr.w	r2, r3, #32
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e09d      	b.n	800207a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00b      	beq.n	8001f62 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f043 0220 	orr.w	r2, r3, #32
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e08b      	b.n	800207a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001f62:	230c      	movs	r3, #12
 8001f64:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f66:	4b47      	ldr	r3, [pc, #284]	; (8002084 <HAL_ADC_PollForConversion+0x198>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d004      	beq.n	8001f7c <HAL_ADC_PollForConversion+0x90>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f7a:	d104      	bne.n	8001f86 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	e003      	b.n	8001f8e <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001f86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001f8e:	f7ff fd35 	bl	80019fc <HAL_GetTick>
 8001f92:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f94:	e021      	b.n	8001fda <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9c:	d01d      	beq.n	8001fda <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <HAL_ADC_PollForConversion+0xc8>
 8001fa4:	f7ff fd2a 	bl	80019fc <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d212      	bcs.n	8001fda <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10b      	bne.n	8001fda <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f043 0204 	orr.w	r2, r3, #4
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e04f      	b.n	800207a <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0d6      	beq.n	8001f96 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d131      	bne.n	8002066 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002008:	2b00      	cmp	r3, #0
 800200a:	d12c      	bne.n	8002066 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b08      	cmp	r3, #8
 8002018:	d125      	bne.n	8002066 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d112      	bne.n	800204e <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d112      	bne.n	8002066 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	f043 0201 	orr.w	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	641a      	str	r2, [r3, #64]	; 0x40
 800204c:	e00b      	b.n	8002066 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f043 0220 	orr.w	r2, r3, #32
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	f043 0201 	orr.w	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d103      	bne.n	8002078 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	50000300 	.word	0x50000300

08002088 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b09b      	sub	sp, #108	; 0x6c
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d101      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x22>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e2a4      	b.n	8002610 <HAL_ADC_ConfigChannel+0x56c>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f040 8288 	bne.w	80025ee <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d81c      	bhi.n	8002120 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4413      	add	r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	461a      	mov	r2, r3
 80020fa:	231f      	movs	r3, #31
 80020fc:	4093      	lsls	r3, r2
 80020fe:	43db      	mvns	r3, r3
 8002100:	4019      	ands	r1, r3
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	6818      	ldr	r0, [r3, #0]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4413      	add	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	fa00 f203 	lsl.w	r2, r0, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	631a      	str	r2, [r3, #48]	; 0x30
 800211e:	e063      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b09      	cmp	r3, #9
 8002126:	d81e      	bhi.n	8002166 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4413      	add	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	3b1e      	subs	r3, #30
 800213c:	221f      	movs	r2, #31
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	4019      	ands	r1, r3
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4413      	add	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	3b1e      	subs	r3, #30
 8002158:	fa00 f203 	lsl.w	r2, r0, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	635a      	str	r2, [r3, #52]	; 0x34
 8002164:	e040      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b0e      	cmp	r3, #14
 800216c:	d81e      	bhi.n	80021ac <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4413      	add	r3, r2
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	3b3c      	subs	r3, #60	; 0x3c
 8002182:	221f      	movs	r2, #31
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	4019      	ands	r1, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	3b3c      	subs	r3, #60	; 0x3c
 800219e:	fa00 f203 	lsl.w	r2, r0, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	639a      	str	r2, [r3, #56]	; 0x38
 80021aa:	e01d      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	4413      	add	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	3b5a      	subs	r3, #90	; 0x5a
 80021c0:	221f      	movs	r2, #31
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	4019      	ands	r1, r3
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	6818      	ldr	r0, [r3, #0]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4413      	add	r3, r2
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	3b5a      	subs	r3, #90	; 0x5a
 80021dc:	fa00 f203 	lsl.w	r2, r0, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 80e5 	bne.w	80023c2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b09      	cmp	r3, #9
 80021fe:	d91c      	bls.n	800223a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6999      	ldr	r1, [r3, #24]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4613      	mov	r3, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4413      	add	r3, r2
 8002210:	3b1e      	subs	r3, #30
 8002212:	2207      	movs	r2, #7
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	4019      	ands	r1, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	6898      	ldr	r0, [r3, #8]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4613      	mov	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	4413      	add	r3, r2
 800222a:	3b1e      	subs	r3, #30
 800222c:	fa00 f203 	lsl.w	r2, r0, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	619a      	str	r2, [r3, #24]
 8002238:	e019      	b.n	800226e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6959      	ldr	r1, [r3, #20]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	2207      	movs	r2, #7
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	4019      	ands	r1, r3
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	6898      	ldr	r0, [r3, #8]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4613      	mov	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	fa00 f203 	lsl.w	r2, r0, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	695a      	ldr	r2, [r3, #20]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	08db      	lsrs	r3, r3, #3
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	3b01      	subs	r3, #1
 800228c:	2b03      	cmp	r3, #3
 800228e:	d84f      	bhi.n	8002330 <HAL_ADC_ConfigChannel+0x28c>
 8002290:	a201      	add	r2, pc, #4	; (adr r2, 8002298 <HAL_ADC_ConfigChannel+0x1f4>)
 8002292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002296:	bf00      	nop
 8002298:	080022a9 	.word	0x080022a9
 800229c:	080022cb 	.word	0x080022cb
 80022a0:	080022ed 	.word	0x080022ed
 80022a4:	0800230f 	.word	0x0800230f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022ae:	4b94      	ldr	r3, [pc, #592]	; (8002500 <HAL_ADC_ConfigChannel+0x45c>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	0691      	lsls	r1, r2, #26
 80022b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022ba:	430a      	orrs	r2, r1
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022c6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022c8:	e07e      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022d0:	4b8b      	ldr	r3, [pc, #556]	; (8002500 <HAL_ADC_ConfigChannel+0x45c>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	6812      	ldr	r2, [r2, #0]
 80022d8:	0691      	lsls	r1, r2, #26
 80022da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022dc:	430a      	orrs	r2, r1
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022e8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022ea:	e06d      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80022f2:	4b83      	ldr	r3, [pc, #524]	; (8002500 <HAL_ADC_ConfigChannel+0x45c>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	0691      	lsls	r1, r2, #26
 80022fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022fe:	430a      	orrs	r2, r1
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800230a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800230c:	e05c      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002314:	4b7a      	ldr	r3, [pc, #488]	; (8002500 <HAL_ADC_ConfigChannel+0x45c>)
 8002316:	4013      	ands	r3, r2
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	0691      	lsls	r1, r2, #26
 800231e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002320:	430a      	orrs	r2, r1
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800232c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800232e:	e04b      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002336:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	069b      	lsls	r3, r3, #26
 8002340:	429a      	cmp	r2, r3
 8002342:	d107      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002352:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800235a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	069b      	lsls	r3, r3, #26
 8002364:	429a      	cmp	r2, r3
 8002366:	d107      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002376:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800237e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	069b      	lsls	r3, r3, #26
 8002388:	429a      	cmp	r2, r3
 800238a:	d107      	bne.n	800239c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800239a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	069b      	lsls	r3, r3, #26
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d10a      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023be:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80023c0:	e001      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80023c2:	bf00      	nop
 80023c4:	e000      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80023c6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d108      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x344>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x344>
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <HAL_ADC_ConfigChannel+0x346>
 80023e8:	2300      	movs	r3, #0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f040 810a 	bne.w	8002604 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d00f      	beq.n	8002418 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2201      	movs	r2, #1
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43da      	mvns	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	400a      	ands	r2, r1
 8002412:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002416:	e049      	b.n	80024ac <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2201      	movs	r2, #1
 8002426:	409a      	lsls	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b09      	cmp	r3, #9
 8002438:	d91c      	bls.n	8002474 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6999      	ldr	r1, [r3, #24]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4613      	mov	r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4413      	add	r3, r2
 800244a:	3b1b      	subs	r3, #27
 800244c:	2207      	movs	r2, #7
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	4019      	ands	r1, r3
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6898      	ldr	r0, [r3, #8]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	4613      	mov	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4413      	add	r3, r2
 8002464:	3b1b      	subs	r3, #27
 8002466:	fa00 f203 	lsl.w	r2, r0, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	619a      	str	r2, [r3, #24]
 8002472:	e01b      	b.n	80024ac <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6959      	ldr	r1, [r3, #20]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	4613      	mov	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4413      	add	r3, r2
 8002486:	2207      	movs	r2, #7
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	4019      	ands	r1, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	6898      	ldr	r0, [r3, #8]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	4613      	mov	r3, r2
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4413      	add	r3, r2
 80024a0:	fa00 f203 	lsl.w	r2, r0, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ac:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_ADC_ConfigChannel+0x460>)
 80024ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b10      	cmp	r3, #16
 80024b6:	d105      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d015      	beq.n	80024f0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024c8:	2b11      	cmp	r3, #17
 80024ca:	d105      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80024cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00b      	beq.n	80024f0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80024dc:	2b12      	cmp	r3, #18
 80024de:	f040 8091 	bne.w	8002604 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80024e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f040 808a 	bne.w	8002604 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024f8:	d108      	bne.n	800250c <HAL_ADC_ConfigChannel+0x468>
 80024fa:	4b03      	ldr	r3, [pc, #12]	; (8002508 <HAL_ADC_ConfigChannel+0x464>)
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	e008      	b.n	8002512 <HAL_ADC_ConfigChannel+0x46e>
 8002500:	83fff000 	.word	0x83fff000
 8002504:	50000300 	.word	0x50000300
 8002508:	50000100 	.word	0x50000100
 800250c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002510:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	2b01      	cmp	r3, #1
 800251e:	d108      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x48e>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x48e>
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <HAL_ADC_ConfigChannel+0x490>
 8002532:	2300      	movs	r3, #0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d150      	bne.n	80025da <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002538:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800253a:	2b00      	cmp	r3, #0
 800253c:	d010      	beq.n	8002560 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	2b01      	cmp	r3, #1
 8002548:	d107      	bne.n	800255a <HAL_ADC_ConfigChannel+0x4b6>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_ADC_ConfigChannel+0x4b6>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <HAL_ADC_ConfigChannel+0x4b8>
 800255a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800255c:	2b00      	cmp	r3, #0
 800255e:	d13c      	bne.n	80025da <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b10      	cmp	r3, #16
 8002566:	d11d      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x500>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002570:	d118      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800257a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800257c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800257e:	4b27      	ldr	r3, [pc, #156]	; (800261c <HAL_ADC_ConfigChannel+0x578>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a27      	ldr	r2, [pc, #156]	; (8002620 <HAL_ADC_ConfigChannel+0x57c>)
 8002584:	fba2 2303 	umull	r2, r3, r2, r3
 8002588:	0c9a      	lsrs	r2, r3, #18
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002594:	e002      	b.n	800259c <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	3b01      	subs	r3, #1
 800259a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f9      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025a2:	e02e      	b.n	8002602 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b11      	cmp	r3, #17
 80025aa:	d10b      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x520>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025b4:	d106      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80025b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80025be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025c0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025c2:	e01e      	b.n	8002602 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b12      	cmp	r3, #18
 80025ca:	d11a      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80025cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025d6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025d8:	e013      	b.n	8002602 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f043 0220 	orr.w	r2, r3, #32
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80025ec:	e00a      	b.n	8002604 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f043 0220 	orr.w	r2, r3, #32
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002600:	e000      	b.n	8002604 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002602:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800260c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002610:	4618      	mov	r0, r3
 8002612:	376c      	adds	r7, #108	; 0x6c
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	2000000c 	.word	0x2000000c
 8002620:	431bde83 	.word	0x431bde83

08002624 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002624:	b480      	push	{r7}
 8002626:	b099      	sub	sp, #100	; 0x64
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800263c:	d102      	bne.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800263e:	4b5a      	ldr	r3, [pc, #360]	; (80027a8 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	e002      	b.n	800264a <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002644:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002648:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0a2      	b.n	800279a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800265e:	2302      	movs	r3, #2
 8002660:	e09b      	b.n	800279a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d17f      	bne.n	8002778 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d179      	bne.n	8002778 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002684:	4b49      	ldr	r3, [pc, #292]	; (80027ac <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002686:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d040      	beq.n	8002712 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002690:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	6859      	ldr	r1, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026a2:	035b      	lsls	r3, r3, #13
 80026a4:	430b      	orrs	r3, r1
 80026a6:	431a      	orrs	r2, r3
 80026a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026aa:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d108      	bne.n	80026cc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80026cc:	2300      	movs	r3, #0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d15c      	bne.n	800278c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d107      	bne.n	80026ee <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d101      	bne.n	80026ee <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80026ee:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d14b      	bne.n	800278c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80026f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80026fc:	f023 030f 	bic.w	r3, r3, #15
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	6811      	ldr	r1, [r2, #0]
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	6892      	ldr	r2, [r2, #8]
 8002708:	430a      	orrs	r2, r1
 800270a:	431a      	orrs	r2, r3
 800270c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800270e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002710:	e03c      	b.n	800278c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800271a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800271c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	2b01      	cmp	r3, #1
 800272a:	d108      	bne.n	800273e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800273e:	2300      	movs	r3, #0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d123      	bne.n	800278c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b01      	cmp	r3, #1
 800274e:	d107      	bne.n	8002760 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002760:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002762:	2b00      	cmp	r3, #0
 8002764:	d112      	bne.n	800278c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002766:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800276e:	f023 030f 	bic.w	r3, r3, #15
 8002772:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002774:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002776:	e009      	b.n	800278c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	f043 0220 	orr.w	r2, r3, #32
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800278a:	e000      	b.n	800278e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800278c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002796:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800279a:	4618      	mov	r0, r3
 800279c:	3764      	adds	r7, #100	; 0x64
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	50000100 	.word	0x50000100
 80027ac:	50000300 	.word	0x50000300

080027b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d108      	bne.n	80027dc <ADC_Enable+0x2c>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <ADC_Enable+0x2c>
 80027d8:	2301      	movs	r3, #1
 80027da:	e000      	b.n	80027de <ADC_Enable+0x2e>
 80027dc:	2300      	movs	r3, #0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d143      	bne.n	800286a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	4b22      	ldr	r3, [pc, #136]	; (8002874 <ADC_Enable+0xc4>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00d      	beq.n	800280c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	f043 0210 	orr.w	r2, r3, #16
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002800:	f043 0201 	orr.w	r2, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e02f      	b.n	800286c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800281c:	f7ff f8ee 	bl	80019fc <HAL_GetTick>
 8002820:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002822:	e01b      	b.n	800285c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002824:	f7ff f8ea 	bl	80019fc <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d914      	bls.n	800285c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b01      	cmp	r3, #1
 800283e:	d00d      	beq.n	800285c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	f043 0210 	orr.w	r2, r3, #16
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002850:	f043 0201 	orr.w	r2, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e007      	b.n	800286c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b01      	cmp	r3, #1
 8002868:	d1dc      	bne.n	8002824 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	8000003f 	.word	0x8000003f

08002878 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	2b01      	cmp	r3, #1
 8002890:	d108      	bne.n	80028a4 <ADC_Disable+0x2c>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <ADC_Disable+0x2c>
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <ADC_Disable+0x2e>
 80028a4:	2300      	movs	r3, #0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d047      	beq.n	800293a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 030d 	and.w	r3, r3, #13
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d10f      	bne.n	80028d8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0202 	orr.w	r2, r2, #2
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2203      	movs	r2, #3
 80028ce:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80028d0:	f7ff f894 	bl	80019fc <HAL_GetTick>
 80028d4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028d6:	e029      	b.n	800292c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	f043 0210 	orr.w	r2, r3, #16
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e8:	f043 0201 	orr.w	r2, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e023      	b.n	800293c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028f4:	f7ff f882 	bl	80019fc <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d914      	bls.n	800292c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b01      	cmp	r3, #1
 800290e:	d10d      	bne.n	800292c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	f043 0210 	orr.w	r2, r3, #16
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002920:	f043 0201 	orr.w	r2, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e007      	b.n	800293c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b01      	cmp	r3, #1
 8002938:	d0dc      	beq.n	80028f4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <__NVIC_SetPriorityGrouping+0x44>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002960:	4013      	ands	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800296c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002976:	4a04      	ldr	r2, [pc, #16]	; (8002988 <__NVIC_SetPriorityGrouping+0x44>)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	60d3      	str	r3, [r2, #12]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002990:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	f003 0307 	and.w	r3, r3, #7
}
 800299a:	4618      	mov	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	6039      	str	r1, [r7, #0]
 80029b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	db0a      	blt.n	80029d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	490c      	ldr	r1, [pc, #48]	; (80029f4 <__NVIC_SetPriority+0x4c>)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	0112      	lsls	r2, r2, #4
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	440b      	add	r3, r1
 80029cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029d0:	e00a      	b.n	80029e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	4908      	ldr	r1, [pc, #32]	; (80029f8 <__NVIC_SetPriority+0x50>)
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	3b04      	subs	r3, #4
 80029e0:	0112      	lsls	r2, r2, #4
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	440b      	add	r3, r1
 80029e6:	761a      	strb	r2, [r3, #24]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	e000e100 	.word	0xe000e100
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b089      	sub	sp, #36	; 0x24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f1c3 0307 	rsb	r3, r3, #7
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	bf28      	it	cs
 8002a1a:	2304      	movcs	r3, #4
 8002a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3304      	adds	r3, #4
 8002a22:	2b06      	cmp	r3, #6
 8002a24:	d902      	bls.n	8002a2c <NVIC_EncodePriority+0x30>
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3b03      	subs	r3, #3
 8002a2a:	e000      	b.n	8002a2e <NVIC_EncodePriority+0x32>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a30:	f04f 32ff 	mov.w	r2, #4294967295
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43da      	mvns	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	401a      	ands	r2, r3
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a44:	f04f 31ff 	mov.w	r1, #4294967295
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4e:	43d9      	mvns	r1, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a54:	4313      	orrs	r3, r2
         );
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3724      	adds	r7, #36	; 0x24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
	...

08002a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a74:	d301      	bcc.n	8002a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a76:	2301      	movs	r3, #1
 8002a78:	e00f      	b.n	8002a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a7a:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <SysTick_Config+0x40>)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a82:	210f      	movs	r1, #15
 8002a84:	f04f 30ff 	mov.w	r0, #4294967295
 8002a88:	f7ff ff8e 	bl	80029a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <SysTick_Config+0x40>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a92:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <SysTick_Config+0x40>)
 8002a94:	2207      	movs	r2, #7
 8002a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	e000e010 	.word	0xe000e010

08002aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff ff47 	bl	8002944 <__NVIC_SetPriorityGrouping>
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b086      	sub	sp, #24
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ad0:	f7ff ff5c 	bl	800298c <__NVIC_GetPriorityGrouping>
 8002ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68b9      	ldr	r1, [r7, #8]
 8002ada:	6978      	ldr	r0, [r7, #20]
 8002adc:	f7ff ff8e 	bl	80029fc <NVIC_EncodePriority>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff ff5d 	bl	80029a8 <__NVIC_SetPriority>
}
 8002aee:	bf00      	nop
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff ffb0 	bl	8002a64 <SysTick_Config>
 8002b04:	4603      	mov	r3, r0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b1e:	e14e      	b.n	8002dbe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	2101      	movs	r1, #1
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8140 	beq.w	8002db8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d005      	beq.n	8002b50 <HAL_GPIO_Init+0x40>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d130      	bne.n	8002bb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4013      	ands	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b86:	2201      	movs	r2, #1
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4013      	ands	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	091b      	lsrs	r3, r3, #4
 8002b9c:	f003 0201 	and.w	r2, r3, #1
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d017      	beq.n	8002bee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	2203      	movs	r2, #3
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d123      	bne.n	8002c42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	08da      	lsrs	r2, r3, #3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3208      	adds	r2, #8
 8002c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	220f      	movs	r2, #15
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	691a      	ldr	r2, [r3, #16]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	08da      	lsrs	r2, r3, #3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3208      	adds	r2, #8
 8002c3c:	6939      	ldr	r1, [r7, #16]
 8002c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43db      	mvns	r3, r3
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 0203 	and.w	r2, r3, #3
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 809a 	beq.w	8002db8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c84:	4b55      	ldr	r3, [pc, #340]	; (8002ddc <HAL_GPIO_Init+0x2cc>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	4a54      	ldr	r2, [pc, #336]	; (8002ddc <HAL_GPIO_Init+0x2cc>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6193      	str	r3, [r2, #24]
 8002c90:	4b52      	ldr	r3, [pc, #328]	; (8002ddc <HAL_GPIO_Init+0x2cc>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c9c:	4a50      	ldr	r2, [pc, #320]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	089b      	lsrs	r3, r3, #2
 8002ca2:	3302      	adds	r3, #2
 8002ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	220f      	movs	r2, #15
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cc6:	d013      	beq.n	8002cf0 <HAL_GPIO_Init+0x1e0>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a46      	ldr	r2, [pc, #280]	; (8002de4 <HAL_GPIO_Init+0x2d4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00d      	beq.n	8002cec <HAL_GPIO_Init+0x1dc>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a45      	ldr	r2, [pc, #276]	; (8002de8 <HAL_GPIO_Init+0x2d8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d007      	beq.n	8002ce8 <HAL_GPIO_Init+0x1d8>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a44      	ldr	r2, [pc, #272]	; (8002dec <HAL_GPIO_Init+0x2dc>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d101      	bne.n	8002ce4 <HAL_GPIO_Init+0x1d4>
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e006      	b.n	8002cf2 <HAL_GPIO_Init+0x1e2>
 8002ce4:	2305      	movs	r3, #5
 8002ce6:	e004      	b.n	8002cf2 <HAL_GPIO_Init+0x1e2>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e002      	b.n	8002cf2 <HAL_GPIO_Init+0x1e2>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <HAL_GPIO_Init+0x1e2>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	f002 0203 	and.w	r2, r2, #3
 8002cf8:	0092      	lsls	r2, r2, #2
 8002cfa:	4093      	lsls	r3, r2
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d02:	4937      	ldr	r1, [pc, #220]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	089b      	lsrs	r3, r3, #2
 8002d08:	3302      	adds	r3, #2
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d10:	4b37      	ldr	r3, [pc, #220]	; (8002df0 <HAL_GPIO_Init+0x2e0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d34:	4a2e      	ldr	r2, [pc, #184]	; (8002df0 <HAL_GPIO_Init+0x2e0>)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d3a:	4b2d      	ldr	r3, [pc, #180]	; (8002df0 <HAL_GPIO_Init+0x2e0>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	43db      	mvns	r3, r3
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4013      	ands	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d5e:	4a24      	ldr	r2, [pc, #144]	; (8002df0 <HAL_GPIO_Init+0x2e0>)
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d64:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <HAL_GPIO_Init+0x2e0>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4013      	ands	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d88:	4a19      	ldr	r2, [pc, #100]	; (8002df0 <HAL_GPIO_Init+0x2e0>)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d8e:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <HAL_GPIO_Init+0x2e0>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	43db      	mvns	r3, r3
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002db2:	4a0f      	ldr	r2, [pc, #60]	; (8002df0 <HAL_GPIO_Init+0x2e0>)
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f47f aea9 	bne.w	8002b20 <HAL_GPIO_Init+0x10>
  }
}
 8002dce:	bf00      	nop
 8002dd0:	bf00      	nop
 8002dd2:	371c      	adds	r7, #28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40010000 	.word	0x40010000
 8002de4:	48000400 	.word	0x48000400
 8002de8:	48000800 	.word	0x48000800
 8002dec:	48000c00 	.word	0x48000c00
 8002df0:	40010400 	.word	0x40010400

08002df4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e081      	b.n	8002f0a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fe fc24 	bl	8001668 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2224      	movs	r2, #36	; 0x24
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d107      	bne.n	8002e6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	e006      	b.n	8002e7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d104      	bne.n	8002e8e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6812      	ldr	r2, [r2, #0]
 8002e98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69d9      	ldr	r1, [r3, #28]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1a      	ldr	r2, [r3, #32]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	607a      	str	r2, [r7, #4]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	460b      	mov	r3, r1
 8002f22:	817b      	strh	r3, [r7, #10]
 8002f24:	4613      	mov	r3, r2
 8002f26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	f040 80da 	bne.w	80030ea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_I2C_Master_Transmit+0x30>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e0d3      	b.n	80030ec <HAL_I2C_Master_Transmit+0x1d8>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f4c:	f7fe fd56 	bl	80019fc <HAL_GetTick>
 8002f50:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	2319      	movs	r3, #25
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 f9f7 	bl	8003352 <I2C_WaitOnFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e0be      	b.n	80030ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2221      	movs	r2, #33	; 0x21
 8002f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2210      	movs	r2, #16
 8002f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	893a      	ldrh	r2, [r7, #8]
 8002f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2bff      	cmp	r3, #255	; 0xff
 8002f9e:	d90e      	bls.n	8002fbe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	22ff      	movs	r2, #255	; 0xff
 8002fa4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	8979      	ldrh	r1, [r7, #10]
 8002fae:	4b51      	ldr	r3, [pc, #324]	; (80030f4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 fafe 	bl	80035b8 <I2C_TransferConfig>
 8002fbc:	e06c      	b.n	8003098 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	8979      	ldrh	r1, [r7, #10]
 8002fd0:	4b48      	ldr	r3, [pc, #288]	; (80030f4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 faed 	bl	80035b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002fde:	e05b      	b.n	8003098 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	6a39      	ldr	r1, [r7, #32]
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 f9f4 	bl	80033d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e07b      	b.n	80030ec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	781a      	ldrb	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300e:	b29b      	uxth	r3, r3
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d034      	beq.n	8003098 <HAL_I2C_Master_Transmit+0x184>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003032:	2b00      	cmp	r3, #0
 8003034:	d130      	bne.n	8003098 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	2200      	movs	r2, #0
 800303e:	2180      	movs	r1, #128	; 0x80
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f986 	bl	8003352 <I2C_WaitOnFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e04d      	b.n	80030ec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003054:	b29b      	uxth	r3, r3
 8003056:	2bff      	cmp	r3, #255	; 0xff
 8003058:	d90e      	bls.n	8003078 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	22ff      	movs	r2, #255	; 0xff
 800305e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003064:	b2da      	uxtb	r2, r3
 8003066:	8979      	ldrh	r1, [r7, #10]
 8003068:	2300      	movs	r3, #0
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 faa1 	bl	80035b8 <I2C_TransferConfig>
 8003076:	e00f      	b.n	8003098 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003086:	b2da      	uxtb	r2, r3
 8003088:	8979      	ldrh	r1, [r7, #10]
 800308a:	2300      	movs	r3, #0
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 fa90 	bl	80035b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d19e      	bne.n	8002fe0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	6a39      	ldr	r1, [r7, #32]
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 f9d3 	bl	8003452 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e01a      	b.n	80030ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2220      	movs	r2, #32
 80030bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6859      	ldr	r1, [r3, #4]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <HAL_I2C_Master_Transmit+0x1e4>)
 80030ca:	400b      	ands	r3, r1
 80030cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	e000      	b.n	80030ec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80030ea:	2302      	movs	r3, #2
  }
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	80002000 	.word	0x80002000
 80030f8:	fe00e800 	.word	0xfe00e800

080030fc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08a      	sub	sp, #40	; 0x28
 8003100:	af02      	add	r7, sp, #8
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	460b      	mov	r3, r1
 800310a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b20      	cmp	r3, #32
 800311a:	f040 80f1 	bne.w	8003300 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800312c:	d101      	bne.n	8003132 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800312e:	2302      	movs	r3, #2
 8003130:	e0e7      	b.n	8003302 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_I2C_IsDeviceReady+0x44>
 800313c:	2302      	movs	r3, #2
 800313e:	e0e0      	b.n	8003302 <HAL_I2C_IsDeviceReady+0x206>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2224      	movs	r2, #36	; 0x24
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d107      	bne.n	800316e <HAL_I2C_IsDeviceReady+0x72>
 800315e:	897b      	ldrh	r3, [r7, #10]
 8003160:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003164:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003168:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800316c:	e004      	b.n	8003178 <HAL_I2C_IsDeviceReady+0x7c>
 800316e:	897b      	ldrh	r3, [r7, #10]
 8003170:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003174:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800317e:	f7fe fc3d 	bl	80019fc <HAL_GetTick>
 8003182:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	2b20      	cmp	r3, #32
 8003190:	bf0c      	ite	eq
 8003192:	2301      	moveq	r3, #1
 8003194:	2300      	movne	r3, #0
 8003196:	b2db      	uxtb	r3, r3
 8003198:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b10      	cmp	r3, #16
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80031b0:	e034      	b.n	800321c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d01a      	beq.n	80031f0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031ba:	f7fe fc1f 	bl	80019fc <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d302      	bcc.n	80031d0 <HAL_I2C_IsDeviceReady+0xd4>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10f      	bne.n	80031f0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031dc:	f043 0220 	orr.w	r2, r3, #32
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e088      	b.n	8003302 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b20      	cmp	r3, #32
 80031fc:	bf0c      	ite	eq
 80031fe:	2301      	moveq	r3, #1
 8003200:	2300      	movne	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	f003 0310 	and.w	r3, r3, #16
 8003210:	2b10      	cmp	r3, #16
 8003212:	bf0c      	ite	eq
 8003214:	2301      	moveq	r3, #1
 8003216:	2300      	movne	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800321c:	7ffb      	ldrb	r3, [r7, #31]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d102      	bne.n	8003228 <HAL_I2C_IsDeviceReady+0x12c>
 8003222:	7fbb      	ldrb	r3, [r7, #30]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0c4      	beq.n	80031b2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f003 0310 	and.w	r3, r3, #16
 8003232:	2b10      	cmp	r3, #16
 8003234:	d01a      	beq.n	800326c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2200      	movs	r2, #0
 800323e:	2120      	movs	r1, #32
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f886 	bl	8003352 <I2C_WaitOnFlagUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e058      	b.n	8003302 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2220      	movs	r2, #32
 8003256:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	e04a      	b.n	8003302 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2200      	movs	r2, #0
 8003274:	2120      	movs	r1, #32
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 f86b 	bl	8003352 <I2C_WaitOnFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e03d      	b.n	8003302 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2210      	movs	r2, #16
 800328c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2220      	movs	r2, #32
 8003294:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	429a      	cmp	r2, r3
 800329c:	d118      	bne.n	80032d0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032ac:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2200      	movs	r2, #0
 80032b6:	2120      	movs	r1, #32
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 f84a 	bl	8003352 <I2C_WaitOnFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e01c      	b.n	8003302 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2220      	movs	r2, #32
 80032ce:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	3301      	adds	r3, #1
 80032d4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	429a      	cmp	r2, r3
 80032dc:	f63f af3b 	bhi.w	8003156 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ec:	f043 0220 	orr.w	r2, r3, #32
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003300:	2302      	movs	r3, #2
  }
}
 8003302:	4618      	mov	r0, r3
 8003304:	3720      	adds	r7, #32
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b02      	cmp	r3, #2
 800331e:	d103      	bne.n	8003328 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2200      	movs	r2, #0
 8003326:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b01      	cmp	r3, #1
 8003334:	d007      	beq.n	8003346 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699a      	ldr	r2, [r3, #24]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0201 	orr.w	r2, r2, #1
 8003344:	619a      	str	r2, [r3, #24]
  }
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	603b      	str	r3, [r7, #0]
 800335e:	4613      	mov	r3, r2
 8003360:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003362:	e022      	b.n	80033aa <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336a:	d01e      	beq.n	80033aa <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336c:	f7fe fb46 	bl	80019fc <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d302      	bcc.n	8003382 <I2C_WaitOnFlagUntilTimeout+0x30>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d113      	bne.n	80033aa <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	f043 0220 	orr.w	r2, r3, #32
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e00f      	b.n	80033ca <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699a      	ldr	r2, [r3, #24]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4013      	ands	r3, r2
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	bf0c      	ite	eq
 80033ba:	2301      	moveq	r3, #1
 80033bc:	2300      	movne	r3, #0
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	461a      	mov	r2, r3
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d0cd      	beq.n	8003364 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033de:	e02c      	b.n	800343a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	68b9      	ldr	r1, [r7, #8]
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f871 	bl	80034cc <I2C_IsAcknowledgeFailed>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e02a      	b.n	800344a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fa:	d01e      	beq.n	800343a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033fc:	f7fe fafe 	bl	80019fc <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	429a      	cmp	r2, r3
 800340a:	d302      	bcc.n	8003412 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d113      	bne.n	800343a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003416:	f043 0220 	orr.w	r2, r3, #32
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2220      	movs	r2, #32
 8003422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e007      	b.n	800344a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b02      	cmp	r3, #2
 8003446:	d1cb      	bne.n	80033e0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b084      	sub	sp, #16
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800345e:	e028      	b.n	80034b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	68b9      	ldr	r1, [r7, #8]
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 f831 	bl	80034cc <I2C_IsAcknowledgeFailed>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e026      	b.n	80034c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003474:	f7fe fac2 	bl	80019fc <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	429a      	cmp	r2, r3
 8003482:	d302      	bcc.n	800348a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d113      	bne.n	80034b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	f043 0220 	orr.w	r2, r3, #32
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e007      	b.n	80034c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b20      	cmp	r3, #32
 80034be:	d1cf      	bne.n	8003460 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	f003 0310 	and.w	r3, r3, #16
 80034e2:	2b10      	cmp	r3, #16
 80034e4:	d161      	bne.n	80035aa <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034f4:	d02b      	beq.n	800354e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003504:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003506:	e022      	b.n	800354e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350e:	d01e      	beq.n	800354e <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003510:	f7fe fa74 	bl	80019fc <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	429a      	cmp	r2, r3
 800351e:	d302      	bcc.n	8003526 <I2C_IsAcknowledgeFailed+0x5a>
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d113      	bne.n	800354e <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	f043 0220 	orr.w	r2, r3, #32
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e02e      	b.n	80035ac <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b20      	cmp	r3, #32
 800355a:	d1d5      	bne.n	8003508 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2210      	movs	r2, #16
 8003562:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2220      	movs	r2, #32
 800356a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f7ff fecc 	bl	800330a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6859      	ldr	r1, [r3, #4]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4b0d      	ldr	r3, [pc, #52]	; (80035b4 <I2C_IsAcknowledgeFailed+0xe8>)
 800357e:	400b      	ands	r3, r1
 8003580:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003586:	f043 0204 	orr.w	r2, r3, #4
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	fe00e800 	.word	0xfe00e800

080035b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	607b      	str	r3, [r7, #4]
 80035c2:	460b      	mov	r3, r1
 80035c4:	817b      	strh	r3, [r7, #10]
 80035c6:	4613      	mov	r3, r2
 80035c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	0d5b      	lsrs	r3, r3, #21
 80035d4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80035d8:	4b0d      	ldr	r3, [pc, #52]	; (8003610 <I2C_TransferConfig+0x58>)
 80035da:	430b      	orrs	r3, r1
 80035dc:	43db      	mvns	r3, r3
 80035de:	ea02 0103 	and.w	r1, r2, r3
 80035e2:	897b      	ldrh	r3, [r7, #10]
 80035e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035e8:	7a7b      	ldrb	r3, [r7, #9]
 80035ea:	041b      	lsls	r3, r3, #16
 80035ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	431a      	orrs	r2, r3
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	431a      	orrs	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003602:	bf00      	nop
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	03ff63ff 	.word	0x03ff63ff

08003614 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b20      	cmp	r3, #32
 8003628:	d138      	bne.n	800369c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003634:	2302      	movs	r3, #2
 8003636:	e032      	b.n	800369e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2224      	movs	r2, #36	; 0x24
 8003644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0201 	bic.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003666:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6819      	ldr	r1, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0201 	orr.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003698:	2300      	movs	r3, #0
 800369a:	e000      	b.n	800369e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800369c:	2302      	movs	r3, #2
  }
}
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b085      	sub	sp, #20
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b20      	cmp	r3, #32
 80036be:	d139      	bne.n	8003734 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d101      	bne.n	80036ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036ca:	2302      	movs	r3, #2
 80036cc:	e033      	b.n	8003736 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2224      	movs	r2, #36	; 0x24
 80036da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0201 	bic.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	021b      	lsls	r3, r3, #8
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	e000      	b.n	8003736 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003734:	2302      	movs	r3, #2
  }
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
	...

08003744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800374a:	af00      	add	r7, sp, #0
 800374c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003750:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003754:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d102      	bne.n	800376a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	f001 b823 	b.w	80047b0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800376a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 817d 	beq.w	8003a7a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003780:	4bbc      	ldr	r3, [pc, #752]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 030c 	and.w	r3, r3, #12
 8003788:	2b04      	cmp	r3, #4
 800378a:	d00c      	beq.n	80037a6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800378c:	4bb9      	ldr	r3, [pc, #740]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 030c 	and.w	r3, r3, #12
 8003794:	2b08      	cmp	r3, #8
 8003796:	d15c      	bne.n	8003852 <HAL_RCC_OscConfig+0x10e>
 8003798:	4bb6      	ldr	r3, [pc, #728]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a4:	d155      	bne.n	8003852 <HAL_RCC_OscConfig+0x10e>
 80037a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037aa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80037b2:	fa93 f3a3 	rbit	r3, r3
 80037b6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037ba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037be:	fab3 f383 	clz	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d102      	bne.n	80037d8 <HAL_RCC_OscConfig+0x94>
 80037d2:	4ba8      	ldr	r3, [pc, #672]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	e015      	b.n	8003804 <HAL_RCC_OscConfig+0xc0>
 80037d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037dc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80037e4:	fa93 f3a3 	rbit	r3, r3
 80037e8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80037ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037f0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80037f4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80037f8:	fa93 f3a3 	rbit	r3, r3
 80037fc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003800:	4b9c      	ldr	r3, [pc, #624]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003808:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800380c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003810:	fa92 f2a2 	rbit	r2, r2
 8003814:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003818:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800381c:	fab2 f282 	clz	r2, r2
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	f042 0220 	orr.w	r2, r2, #32
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	f002 021f 	and.w	r2, r2, #31
 800382c:	2101      	movs	r1, #1
 800382e:	fa01 f202 	lsl.w	r2, r1, r2
 8003832:	4013      	ands	r3, r2
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 811f 	beq.w	8003a78 <HAL_RCC_OscConfig+0x334>
 800383a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800383e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	f040 8116 	bne.w	8003a78 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	f000 bfaf 	b.w	80047b0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003856:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003862:	d106      	bne.n	8003872 <HAL_RCC_OscConfig+0x12e>
 8003864:	4b83      	ldr	r3, [pc, #524]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a82      	ldr	r2, [pc, #520]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 800386a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	e036      	b.n	80038e0 <HAL_RCC_OscConfig+0x19c>
 8003872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003876:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10c      	bne.n	800389c <HAL_RCC_OscConfig+0x158>
 8003882:	4b7c      	ldr	r3, [pc, #496]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a7b      	ldr	r2, [pc, #492]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	4b79      	ldr	r3, [pc, #484]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a78      	ldr	r2, [pc, #480]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003894:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	e021      	b.n	80038e0 <HAL_RCC_OscConfig+0x19c>
 800389c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x184>
 80038ae:	4b71      	ldr	r3, [pc, #452]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a70      	ldr	r2, [pc, #448]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 80038b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	4b6e      	ldr	r3, [pc, #440]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a6d      	ldr	r2, [pc, #436]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 80038c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	e00b      	b.n	80038e0 <HAL_RCC_OscConfig+0x19c>
 80038c8:	4b6a      	ldr	r3, [pc, #424]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a69      	ldr	r2, [pc, #420]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 80038ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d2:	6013      	str	r3, [r2, #0]
 80038d4:	4b67      	ldr	r3, [pc, #412]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a66      	ldr	r2, [pc, #408]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 80038da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038de:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038e0:	4b64      	ldr	r3, [pc, #400]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	f023 020f 	bic.w	r2, r3, #15
 80038e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	495f      	ldr	r1, [pc, #380]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d059      	beq.n	80039be <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390a:	f7fe f877 	bl	80019fc <HAL_GetTick>
 800390e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	e00a      	b.n	800392a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003914:	f7fe f872 	bl	80019fc <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b64      	cmp	r3, #100	; 0x64
 8003922:	d902      	bls.n	800392a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	f000 bf43 	b.w	80047b0 <HAL_RCC_OscConfig+0x106c>
 800392a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800392e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003932:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003936:	fa93 f3a3 	rbit	r3, r3
 800393a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800393e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003942:	fab3 f383 	clz	r3, r3
 8003946:	b2db      	uxtb	r3, r3
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b01      	cmp	r3, #1
 8003954:	d102      	bne.n	800395c <HAL_RCC_OscConfig+0x218>
 8003956:	4b47      	ldr	r3, [pc, #284]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	e015      	b.n	8003988 <HAL_RCC_OscConfig+0x244>
 800395c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003960:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003964:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003968:	fa93 f3a3 	rbit	r3, r3
 800396c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003970:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003974:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003978:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800397c:	fa93 f3a3 	rbit	r3, r3
 8003980:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003984:	4b3b      	ldr	r3, [pc, #236]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800398c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003990:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003994:	fa92 f2a2 	rbit	r2, r2
 8003998:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800399c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80039a0:	fab2 f282 	clz	r2, r2
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	f042 0220 	orr.w	r2, r2, #32
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	f002 021f 	and.w	r2, r2, #31
 80039b0:	2101      	movs	r1, #1
 80039b2:	fa01 f202 	lsl.w	r2, r1, r2
 80039b6:	4013      	ands	r3, r2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0ab      	beq.n	8003914 <HAL_RCC_OscConfig+0x1d0>
 80039bc:	e05d      	b.n	8003a7a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039be:	f7fe f81d 	bl	80019fc <HAL_GetTick>
 80039c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c6:	e00a      	b.n	80039de <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039c8:	f7fe f818 	bl	80019fc <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b64      	cmp	r3, #100	; 0x64
 80039d6:	d902      	bls.n	80039de <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	f000 bee9 	b.w	80047b0 <HAL_RCC_OscConfig+0x106c>
 80039de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039e2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80039ea:	fa93 f3a3 	rbit	r3, r3
 80039ee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80039f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f6:	fab3 f383 	clz	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	095b      	lsrs	r3, r3, #5
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d102      	bne.n	8003a10 <HAL_RCC_OscConfig+0x2cc>
 8003a0a:	4b1a      	ldr	r3, [pc, #104]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	e015      	b.n	8003a3c <HAL_RCC_OscConfig+0x2f8>
 8003a10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a14:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a18:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003a1c:	fa93 f3a3 	rbit	r3, r3
 8003a20:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003a24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a28:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003a2c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003a30:	fa93 f3a3 	rbit	r3, r3
 8003a34:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003a38:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a40:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003a44:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003a48:	fa92 f2a2 	rbit	r2, r2
 8003a4c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003a50:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003a54:	fab2 f282 	clz	r2, r2
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	f042 0220 	orr.w	r2, r2, #32
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	f002 021f 	and.w	r2, r2, #31
 8003a64:	2101      	movs	r1, #1
 8003a66:	fa01 f202 	lsl.w	r2, r1, r2
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1ab      	bne.n	80039c8 <HAL_RCC_OscConfig+0x284>
 8003a70:	e003      	b.n	8003a7a <HAL_RCC_OscConfig+0x336>
 8003a72:	bf00      	nop
 8003a74:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 817d 	beq.w	8003d8a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a90:	4ba6      	ldr	r3, [pc, #664]	; (8003d2c <HAL_RCC_OscConfig+0x5e8>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 030c 	and.w	r3, r3, #12
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00b      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a9c:	4ba3      	ldr	r3, [pc, #652]	; (8003d2c <HAL_RCC_OscConfig+0x5e8>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 030c 	and.w	r3, r3, #12
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d172      	bne.n	8003b8e <HAL_RCC_OscConfig+0x44a>
 8003aa8:	4ba0      	ldr	r3, [pc, #640]	; (8003d2c <HAL_RCC_OscConfig+0x5e8>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d16c      	bne.n	8003b8e <HAL_RCC_OscConfig+0x44a>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003abe:	fa93 f3a3 	rbit	r3, r3
 8003ac2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003ac6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aca:	fab3 f383 	clz	r3, r3
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	095b      	lsrs	r3, r3, #5
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f043 0301 	orr.w	r3, r3, #1
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d102      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x3a0>
 8003ade:	4b93      	ldr	r3, [pc, #588]	; (8003d2c <HAL_RCC_OscConfig+0x5e8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	e013      	b.n	8003b0c <HAL_RCC_OscConfig+0x3c8>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aea:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003aee:	fa93 f3a3 	rbit	r3, r3
 8003af2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003af6:	2302      	movs	r3, #2
 8003af8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003afc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b00:	fa93 f3a3 	rbit	r3, r3
 8003b04:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003b08:	4b88      	ldr	r3, [pc, #544]	; (8003d2c <HAL_RCC_OscConfig+0x5e8>)
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003b12:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003b16:	fa92 f2a2 	rbit	r2, r2
 8003b1a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003b1e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003b22:	fab2 f282 	clz	r2, r2
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	f042 0220 	orr.w	r2, r2, #32
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	f002 021f 	and.w	r2, r2, #31
 8003b32:	2101      	movs	r1, #1
 8003b34:	fa01 f202 	lsl.w	r2, r1, r2
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <HAL_RCC_OscConfig+0x410>
 8003b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d002      	beq.n	8003b54 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f000 be2e 	b.w	80047b0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b54:	4b75      	ldr	r3, [pc, #468]	; (8003d2c <HAL_RCC_OscConfig+0x5e8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	21f8      	movs	r1, #248	; 0xf8
 8003b6a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003b72:	fa91 f1a1 	rbit	r1, r1
 8003b76:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003b7a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003b7e:	fab1 f181 	clz	r1, r1
 8003b82:	b2c9      	uxtb	r1, r1
 8003b84:	408b      	lsls	r3, r1
 8003b86:	4969      	ldr	r1, [pc, #420]	; (8003d2c <HAL_RCC_OscConfig+0x5e8>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b8c:	e0fd      	b.n	8003d8a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 8088 	beq.w	8003cb0 <HAL_RCC_OscConfig+0x56c>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003baa:	fa93 f3a3 	rbit	r3, r3
 8003bae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003bb2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bb6:	fab3 f383 	clz	r3, r3
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003bc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	2301      	movs	r3, #1
 8003bca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bcc:	f7fd ff16 	bl	80019fc <HAL_GetTick>
 8003bd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd4:	e00a      	b.n	8003bec <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bd6:	f7fd ff11 	bl	80019fc <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d902      	bls.n	8003bec <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	f000 bde2 	b.w	80047b0 <HAL_RCC_OscConfig+0x106c>
 8003bec:	2302      	movs	r3, #2
 8003bee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003bf6:	fa93 f3a3 	rbit	r3, r3
 8003bfa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003bfe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c02:	fab3 f383 	clz	r3, r3
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	095b      	lsrs	r3, r3, #5
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d102      	bne.n	8003c1c <HAL_RCC_OscConfig+0x4d8>
 8003c16:	4b45      	ldr	r3, [pc, #276]	; (8003d2c <HAL_RCC_OscConfig+0x5e8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	e013      	b.n	8003c44 <HAL_RCC_OscConfig+0x500>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c22:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003c26:	fa93 f3a3 	rbit	r3, r3
 8003c2a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003c2e:	2302      	movs	r3, #2
 8003c30:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003c34:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003c38:	fa93 f3a3 	rbit	r3, r3
 8003c3c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003c40:	4b3a      	ldr	r3, [pc, #232]	; (8003d2c <HAL_RCC_OscConfig+0x5e8>)
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	2202      	movs	r2, #2
 8003c46:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003c4a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003c4e:	fa92 f2a2 	rbit	r2, r2
 8003c52:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003c56:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003c5a:	fab2 f282 	clz	r2, r2
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	f042 0220 	orr.w	r2, r2, #32
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	f002 021f 	and.w	r2, r2, #31
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c70:	4013      	ands	r3, r2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0af      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c76:	4b2d      	ldr	r3, [pc, #180]	; (8003d2c <HAL_RCC_OscConfig+0x5e8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	21f8      	movs	r1, #248	; 0xf8
 8003c8c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c90:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003c94:	fa91 f1a1 	rbit	r1, r1
 8003c98:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003c9c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003ca0:	fab1 f181 	clz	r1, r1
 8003ca4:	b2c9      	uxtb	r1, r1
 8003ca6:	408b      	lsls	r3, r1
 8003ca8:	4920      	ldr	r1, [pc, #128]	; (8003d2c <HAL_RCC_OscConfig+0x5e8>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	600b      	str	r3, [r1, #0]
 8003cae:	e06c      	b.n	8003d8a <HAL_RCC_OscConfig+0x646>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003cba:	fa93 f3a3 	rbit	r3, r3
 8003cbe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003cc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cc6:	fab3 f383 	clz	r3, r3
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003cd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	2300      	movs	r3, #0
 8003cda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cdc:	f7fd fe8e 	bl	80019fc <HAL_GetTick>
 8003ce0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce4:	e00a      	b.n	8003cfc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ce6:	f7fd fe89 	bl	80019fc <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d902      	bls.n	8003cfc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	f000 bd5a 	b.w	80047b0 <HAL_RCC_OscConfig+0x106c>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d02:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003d06:	fa93 f3a3 	rbit	r3, r3
 8003d0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d12:	fab3 f383 	clz	r3, r3
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d104      	bne.n	8003d30 <HAL_RCC_OscConfig+0x5ec>
 8003d26:	4b01      	ldr	r3, [pc, #4]	; (8003d2c <HAL_RCC_OscConfig+0x5e8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	e015      	b.n	8003d58 <HAL_RCC_OscConfig+0x614>
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	2302      	movs	r3, #2
 8003d32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003d3a:	fa93 f3a3 	rbit	r3, r3
 8003d3e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003d42:	2302      	movs	r3, #2
 8003d44:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003d48:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d4c:	fa93 f3a3 	rbit	r3, r3
 8003d50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003d54:	4bc8      	ldr	r3, [pc, #800]	; (8004078 <HAL_RCC_OscConfig+0x934>)
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	2202      	movs	r2, #2
 8003d5a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003d5e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003d62:	fa92 f2a2 	rbit	r2, r2
 8003d66:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003d6a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003d6e:	fab2 f282 	clz	r2, r2
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	f042 0220 	orr.w	r2, r2, #32
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	f002 021f 	and.w	r2, r2, #31
 8003d7e:	2101      	movs	r1, #1
 8003d80:	fa01 f202 	lsl.w	r2, r1, r2
 8003d84:	4013      	ands	r3, r2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1ad      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 8110 	beq.w	8003fc0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d079      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x760>
 8003db0:	2301      	movs	r3, #1
 8003db2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003dba:	fa93 f3a3 	rbit	r3, r3
 8003dbe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dc6:	fab3 f383 	clz	r3, r3
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	461a      	mov	r2, r3
 8003dce:	4bab      	ldr	r3, [pc, #684]	; (800407c <HAL_RCC_OscConfig+0x938>)
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dda:	f7fd fe0f 	bl	80019fc <HAL_GetTick>
 8003dde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de2:	e00a      	b.n	8003dfa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de4:	f7fd fe0a 	bl	80019fc <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d902      	bls.n	8003dfa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	f000 bcdb 	b.w	80047b0 <HAL_RCC_OscConfig+0x106c>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003e04:	fa93 f3a3 	rbit	r3, r3
 8003e08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e10:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003e14:	2202      	movs	r2, #2
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e1c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	fa93 f2a3 	rbit	r2, r3
 8003e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e38:	2202      	movs	r2, #2
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	fa93 f2a3 	rbit	r2, r3
 8003e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e52:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e54:	4b88      	ldr	r3, [pc, #544]	; (8004078 <HAL_RCC_OscConfig+0x934>)
 8003e56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003e60:	2102      	movs	r1, #2
 8003e62:	6019      	str	r1, [r3, #0]
 8003e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e68:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	fa93 f1a3 	rbit	r1, r3
 8003e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e76:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003e7a:	6019      	str	r1, [r3, #0]
  return result;
 8003e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e80:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	fab3 f383 	clz	r3, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	f003 031f 	and.w	r3, r3, #31
 8003e96:	2101      	movs	r1, #1
 8003e98:	fa01 f303 	lsl.w	r3, r1, r3
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0a0      	beq.n	8003de4 <HAL_RCC_OscConfig+0x6a0>
 8003ea2:	e08d      	b.n	8003fc0 <HAL_RCC_OscConfig+0x87c>
 8003ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003eac:	2201      	movs	r2, #1
 8003eae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	fa93 f2a3 	rbit	r2, r3
 8003ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003ec6:	601a      	str	r2, [r3, #0]
  return result;
 8003ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ecc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003ed0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ed2:	fab3 f383 	clz	r3, r3
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	461a      	mov	r2, r3
 8003eda:	4b68      	ldr	r3, [pc, #416]	; (800407c <HAL_RCC_OscConfig+0x938>)
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee6:	f7fd fd89 	bl	80019fc <HAL_GetTick>
 8003eea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eee:	e00a      	b.n	8003f06 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ef0:	f7fd fd84 	bl	80019fc <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d902      	bls.n	8003f06 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	f000 bc55 	b.w	80047b0 <HAL_RCC_OscConfig+0x106c>
 8003f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f0a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003f0e:	2202      	movs	r2, #2
 8003f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f16:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	fa93 f2a3 	rbit	r2, r3
 8003f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f24:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f2e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003f32:	2202      	movs	r2, #2
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f3a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	fa93 f2a3 	rbit	r2, r3
 8003f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f56:	2202      	movs	r2, #2
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	fa93 f2a3 	rbit	r2, r3
 8003f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003f70:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f72:	4b41      	ldr	r3, [pc, #260]	; (8004078 <HAL_RCC_OscConfig+0x934>)
 8003f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f7a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003f7e:	2102      	movs	r1, #2
 8003f80:	6019      	str	r1, [r3, #0]
 8003f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f86:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	fa93 f1a3 	rbit	r1, r3
 8003f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f94:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003f98:	6019      	str	r1, [r3, #0]
  return result;
 8003f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	fab3 f383 	clz	r3, r3
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f003 031f 	and.w	r3, r3, #31
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d197      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 81a1 	beq.w	8004318 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fdc:	4b26      	ldr	r3, [pc, #152]	; (8004078 <HAL_RCC_OscConfig+0x934>)
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d116      	bne.n	8004016 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe8:	4b23      	ldr	r3, [pc, #140]	; (8004078 <HAL_RCC_OscConfig+0x934>)
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	4a22      	ldr	r2, [pc, #136]	; (8004078 <HAL_RCC_OscConfig+0x934>)
 8003fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	61d3      	str	r3, [r2, #28]
 8003ff4:	4b20      	ldr	r3, [pc, #128]	; (8004078 <HAL_RCC_OscConfig+0x934>)
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004000:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800400a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800400e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004010:	2301      	movs	r3, #1
 8004012:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004016:	4b1a      	ldr	r3, [pc, #104]	; (8004080 <HAL_RCC_OscConfig+0x93c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401e:	2b00      	cmp	r3, #0
 8004020:	d11a      	bne.n	8004058 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004022:	4b17      	ldr	r3, [pc, #92]	; (8004080 <HAL_RCC_OscConfig+0x93c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a16      	ldr	r2, [pc, #88]	; (8004080 <HAL_RCC_OscConfig+0x93c>)
 8004028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800402c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800402e:	f7fd fce5 	bl	80019fc <HAL_GetTick>
 8004032:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004036:	e009      	b.n	800404c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004038:	f7fd fce0 	bl	80019fc <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b64      	cmp	r3, #100	; 0x64
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e3b1      	b.n	80047b0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404c:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <HAL_RCC_OscConfig+0x93c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0ef      	beq.n	8004038 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d10d      	bne.n	8004084 <HAL_RCC_OscConfig+0x940>
 8004068:	4b03      	ldr	r3, [pc, #12]	; (8004078 <HAL_RCC_OscConfig+0x934>)
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	4a02      	ldr	r2, [pc, #8]	; (8004078 <HAL_RCC_OscConfig+0x934>)
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	6213      	str	r3, [r2, #32]
 8004074:	e03c      	b.n	80040f0 <HAL_RCC_OscConfig+0x9ac>
 8004076:	bf00      	nop
 8004078:	40021000 	.word	0x40021000
 800407c:	10908120 	.word	0x10908120
 8004080:	40007000 	.word	0x40007000
 8004084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004088:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10c      	bne.n	80040ae <HAL_RCC_OscConfig+0x96a>
 8004094:	4bc1      	ldr	r3, [pc, #772]	; (800439c <HAL_RCC_OscConfig+0xc58>)
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	4ac0      	ldr	r2, [pc, #768]	; (800439c <HAL_RCC_OscConfig+0xc58>)
 800409a:	f023 0301 	bic.w	r3, r3, #1
 800409e:	6213      	str	r3, [r2, #32]
 80040a0:	4bbe      	ldr	r3, [pc, #760]	; (800439c <HAL_RCC_OscConfig+0xc58>)
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	4abd      	ldr	r2, [pc, #756]	; (800439c <HAL_RCC_OscConfig+0xc58>)
 80040a6:	f023 0304 	bic.w	r3, r3, #4
 80040aa:	6213      	str	r3, [r2, #32]
 80040ac:	e020      	b.n	80040f0 <HAL_RCC_OscConfig+0x9ac>
 80040ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	2b05      	cmp	r3, #5
 80040bc:	d10c      	bne.n	80040d8 <HAL_RCC_OscConfig+0x994>
 80040be:	4bb7      	ldr	r3, [pc, #732]	; (800439c <HAL_RCC_OscConfig+0xc58>)
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	4ab6      	ldr	r2, [pc, #728]	; (800439c <HAL_RCC_OscConfig+0xc58>)
 80040c4:	f043 0304 	orr.w	r3, r3, #4
 80040c8:	6213      	str	r3, [r2, #32]
 80040ca:	4bb4      	ldr	r3, [pc, #720]	; (800439c <HAL_RCC_OscConfig+0xc58>)
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	4ab3      	ldr	r2, [pc, #716]	; (800439c <HAL_RCC_OscConfig+0xc58>)
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	6213      	str	r3, [r2, #32]
 80040d6:	e00b      	b.n	80040f0 <HAL_RCC_OscConfig+0x9ac>
 80040d8:	4bb0      	ldr	r3, [pc, #704]	; (800439c <HAL_RCC_OscConfig+0xc58>)
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	4aaf      	ldr	r2, [pc, #700]	; (800439c <HAL_RCC_OscConfig+0xc58>)
 80040de:	f023 0301 	bic.w	r3, r3, #1
 80040e2:	6213      	str	r3, [r2, #32]
 80040e4:	4bad      	ldr	r3, [pc, #692]	; (800439c <HAL_RCC_OscConfig+0xc58>)
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	4aac      	ldr	r2, [pc, #688]	; (800439c <HAL_RCC_OscConfig+0xc58>)
 80040ea:	f023 0304 	bic.w	r3, r3, #4
 80040ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 8081 	beq.w	8004204 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004102:	f7fd fc7b 	bl	80019fc <HAL_GetTick>
 8004106:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410a:	e00b      	b.n	8004124 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410c:	f7fd fc76 	bl	80019fc <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	f241 3288 	movw	r2, #5000	; 0x1388
 800411c:	4293      	cmp	r3, r2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e345      	b.n	80047b0 <HAL_RCC_OscConfig+0x106c>
 8004124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004128:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800412c:	2202      	movs	r2, #2
 800412e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004134:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	fa93 f2a3 	rbit	r2, r3
 800413e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004142:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800414c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004150:	2202      	movs	r2, #2
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004158:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	fa93 f2a3 	rbit	r2, r3
 8004162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004166:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800416a:	601a      	str	r2, [r3, #0]
  return result;
 800416c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004170:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004174:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004176:	fab3 f383 	clz	r3, r3
 800417a:	b2db      	uxtb	r3, r3
 800417c:	095b      	lsrs	r3, r3, #5
 800417e:	b2db      	uxtb	r3, r3
 8004180:	f043 0302 	orr.w	r3, r3, #2
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d102      	bne.n	8004190 <HAL_RCC_OscConfig+0xa4c>
 800418a:	4b84      	ldr	r3, [pc, #528]	; (800439c <HAL_RCC_OscConfig+0xc58>)
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	e013      	b.n	80041b8 <HAL_RCC_OscConfig+0xa74>
 8004190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004194:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004198:	2202      	movs	r2, #2
 800419a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	fa93 f2a3 	rbit	r2, r3
 80041aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	4b79      	ldr	r3, [pc, #484]	; (800439c <HAL_RCC_OscConfig+0xc58>)
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80041c0:	2102      	movs	r1, #2
 80041c2:	6011      	str	r1, [r2, #0]
 80041c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041c8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80041cc:	6812      	ldr	r2, [r2, #0]
 80041ce:	fa92 f1a2 	rbit	r1, r2
 80041d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041d6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80041da:	6011      	str	r1, [r2, #0]
  return result;
 80041dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041e0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80041e4:	6812      	ldr	r2, [r2, #0]
 80041e6:	fab2 f282 	clz	r2, r2
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	f002 021f 	and.w	r2, r2, #31
 80041f6:	2101      	movs	r1, #1
 80041f8:	fa01 f202 	lsl.w	r2, r1, r2
 80041fc:	4013      	ands	r3, r2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d084      	beq.n	800410c <HAL_RCC_OscConfig+0x9c8>
 8004202:	e07f      	b.n	8004304 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004204:	f7fd fbfa 	bl	80019fc <HAL_GetTick>
 8004208:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800420c:	e00b      	b.n	8004226 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800420e:	f7fd fbf5 	bl	80019fc <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f241 3288 	movw	r2, #5000	; 0x1388
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e2c4      	b.n	80047b0 <HAL_RCC_OscConfig+0x106c>
 8004226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800422a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800422e:	2202      	movs	r2, #2
 8004230:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004236:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	fa93 f2a3 	rbit	r2, r3
 8004240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004244:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800424e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004252:	2202      	movs	r2, #2
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800425a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	fa93 f2a3 	rbit	r2, r3
 8004264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004268:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800426c:	601a      	str	r2, [r3, #0]
  return result;
 800426e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004272:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004276:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004278:	fab3 f383 	clz	r3, r3
 800427c:	b2db      	uxtb	r3, r3
 800427e:	095b      	lsrs	r3, r3, #5
 8004280:	b2db      	uxtb	r3, r3
 8004282:	f043 0302 	orr.w	r3, r3, #2
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d102      	bne.n	8004292 <HAL_RCC_OscConfig+0xb4e>
 800428c:	4b43      	ldr	r3, [pc, #268]	; (800439c <HAL_RCC_OscConfig+0xc58>)
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	e013      	b.n	80042ba <HAL_RCC_OscConfig+0xb76>
 8004292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004296:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800429a:	2202      	movs	r2, #2
 800429c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	fa93 f2a3 	rbit	r2, r3
 80042ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042b0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	4b39      	ldr	r3, [pc, #228]	; (800439c <HAL_RCC_OscConfig+0xc58>)
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80042c2:	2102      	movs	r1, #2
 80042c4:	6011      	str	r1, [r2, #0]
 80042c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042ca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80042ce:	6812      	ldr	r2, [r2, #0]
 80042d0:	fa92 f1a2 	rbit	r1, r2
 80042d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042d8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80042dc:	6011      	str	r1, [r2, #0]
  return result;
 80042de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042e2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80042e6:	6812      	ldr	r2, [r2, #0]
 80042e8:	fab2 f282 	clz	r2, r2
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	f002 021f 	and.w	r2, r2, #31
 80042f8:	2101      	movs	r1, #1
 80042fa:	fa01 f202 	lsl.w	r2, r1, r2
 80042fe:	4013      	ands	r3, r2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d184      	bne.n	800420e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004304:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004308:	2b01      	cmp	r3, #1
 800430a:	d105      	bne.n	8004318 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800430c:	4b23      	ldr	r3, [pc, #140]	; (800439c <HAL_RCC_OscConfig+0xc58>)
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	4a22      	ldr	r2, [pc, #136]	; (800439c <HAL_RCC_OscConfig+0xc58>)
 8004312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004316:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800431c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 8242 	beq.w	80047ae <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800432a:	4b1c      	ldr	r3, [pc, #112]	; (800439c <HAL_RCC_OscConfig+0xc58>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f003 030c 	and.w	r3, r3, #12
 8004332:	2b08      	cmp	r3, #8
 8004334:	f000 8213 	beq.w	800475e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800433c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	2b02      	cmp	r3, #2
 8004346:	f040 8162 	bne.w	800460e <HAL_RCC_OscConfig+0xeca>
 800434a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800434e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004352:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004356:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800435c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	fa93 f2a3 	rbit	r2, r3
 8004366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800436a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800436e:	601a      	str	r2, [r3, #0]
  return result;
 8004370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004374:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004378:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800437a:	fab3 f383 	clz	r3, r3
 800437e:	b2db      	uxtb	r3, r3
 8004380:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004384:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	461a      	mov	r2, r3
 800438c:	2300      	movs	r3, #0
 800438e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004390:	f7fd fb34 	bl	80019fc <HAL_GetTick>
 8004394:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004398:	e00c      	b.n	80043b4 <HAL_RCC_OscConfig+0xc70>
 800439a:	bf00      	nop
 800439c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fd fb2c 	bl	80019fc <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e1fd      	b.n	80047b0 <HAL_RCC_OscConfig+0x106c>
 80043b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80043bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	fa93 f2a3 	rbit	r2, r3
 80043d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80043d8:	601a      	str	r2, [r3, #0]
  return result;
 80043da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043de:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80043e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043e4:	fab3 f383 	clz	r3, r3
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	f043 0301 	orr.w	r3, r3, #1
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d102      	bne.n	80043fe <HAL_RCC_OscConfig+0xcba>
 80043f8:	4bb0      	ldr	r3, [pc, #704]	; (80046bc <HAL_RCC_OscConfig+0xf78>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	e027      	b.n	800444e <HAL_RCC_OscConfig+0xd0a>
 80043fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004402:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004406:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800440a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004410:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	fa93 f2a3 	rbit	r2, r3
 800441a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800441e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004428:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800442c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004436:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	fa93 f2a3 	rbit	r2, r3
 8004440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004444:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	4b9c      	ldr	r3, [pc, #624]	; (80046bc <HAL_RCC_OscConfig+0xf78>)
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004452:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004456:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800445a:	6011      	str	r1, [r2, #0]
 800445c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004460:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	fa92 f1a2 	rbit	r1, r2
 800446a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800446e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004472:	6011      	str	r1, [r2, #0]
  return result;
 8004474:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004478:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800447c:	6812      	ldr	r2, [r2, #0]
 800447e:	fab2 f282 	clz	r2, r2
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	f042 0220 	orr.w	r2, r2, #32
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	f002 021f 	and.w	r2, r2, #31
 800448e:	2101      	movs	r1, #1
 8004490:	fa01 f202 	lsl.w	r2, r1, r2
 8004494:	4013      	ands	r3, r2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d182      	bne.n	80043a0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800449a:	4b88      	ldr	r3, [pc, #544]	; (80046bc <HAL_RCC_OscConfig+0xf78>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80044a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80044ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	430b      	orrs	r3, r1
 80044bc:	497f      	ldr	r1, [pc, #508]	; (80046bc <HAL_RCC_OscConfig+0xf78>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	604b      	str	r3, [r1, #4]
 80044c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044c6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80044ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	fa93 f2a3 	rbit	r2, r3
 80044de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80044e6:	601a      	str	r2, [r3, #0]
  return result;
 80044e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80044f0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044f2:	fab3 f383 	clz	r3, r3
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	461a      	mov	r2, r3
 8004504:	2301      	movs	r3, #1
 8004506:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004508:	f7fd fa78 	bl	80019fc <HAL_GetTick>
 800450c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004510:	e009      	b.n	8004526 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004512:	f7fd fa73 	bl	80019fc <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e144      	b.n	80047b0 <HAL_RCC_OscConfig+0x106c>
 8004526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800452a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800452e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004538:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	fa93 f2a3 	rbit	r2, r3
 8004542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004546:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800454a:	601a      	str	r2, [r3, #0]
  return result;
 800454c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004550:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004554:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004556:	fab3 f383 	clz	r3, r3
 800455a:	b2db      	uxtb	r3, r3
 800455c:	095b      	lsrs	r3, r3, #5
 800455e:	b2db      	uxtb	r3, r3
 8004560:	f043 0301 	orr.w	r3, r3, #1
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b01      	cmp	r3, #1
 8004568:	d102      	bne.n	8004570 <HAL_RCC_OscConfig+0xe2c>
 800456a:	4b54      	ldr	r3, [pc, #336]	; (80046bc <HAL_RCC_OscConfig+0xf78>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	e027      	b.n	80045c0 <HAL_RCC_OscConfig+0xe7c>
 8004570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004574:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004578:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800457c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004582:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	fa93 f2a3 	rbit	r2, r3
 800458c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004590:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800459a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800459e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	fa93 f2a3 	rbit	r2, r3
 80045b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045b6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	4b3f      	ldr	r3, [pc, #252]	; (80046bc <HAL_RCC_OscConfig+0xf78>)
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045c4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80045c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80045cc:	6011      	str	r1, [r2, #0]
 80045ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045d2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80045d6:	6812      	ldr	r2, [r2, #0]
 80045d8:	fa92 f1a2 	rbit	r1, r2
 80045dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045e0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80045e4:	6011      	str	r1, [r2, #0]
  return result;
 80045e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045ea:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80045ee:	6812      	ldr	r2, [r2, #0]
 80045f0:	fab2 f282 	clz	r2, r2
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	f042 0220 	orr.w	r2, r2, #32
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	f002 021f 	and.w	r2, r2, #31
 8004600:	2101      	movs	r1, #1
 8004602:	fa01 f202 	lsl.w	r2, r1, r2
 8004606:	4013      	ands	r3, r2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d082      	beq.n	8004512 <HAL_RCC_OscConfig+0xdce>
 800460c:	e0cf      	b.n	80047ae <HAL_RCC_OscConfig+0x106a>
 800460e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004612:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004616:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800461a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004620:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	fa93 f2a3 	rbit	r2, r3
 800462a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800462e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004632:	601a      	str	r2, [r3, #0]
  return result;
 8004634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004638:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800463c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463e:	fab3 f383 	clz	r3, r3
 8004642:	b2db      	uxtb	r3, r3
 8004644:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004648:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	461a      	mov	r2, r3
 8004650:	2300      	movs	r3, #0
 8004652:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004654:	f7fd f9d2 	bl	80019fc <HAL_GetTick>
 8004658:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800465c:	e009      	b.n	8004672 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800465e:	f7fd f9cd 	bl	80019fc <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e09e      	b.n	80047b0 <HAL_RCC_OscConfig+0x106c>
 8004672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004676:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800467a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800467e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004684:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	fa93 f2a3 	rbit	r2, r3
 800468e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004692:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004696:	601a      	str	r2, [r3, #0]
  return result;
 8004698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800469c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80046a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046a2:	fab3 f383 	clz	r3, r3
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d104      	bne.n	80046c0 <HAL_RCC_OscConfig+0xf7c>
 80046b6:	4b01      	ldr	r3, [pc, #4]	; (80046bc <HAL_RCC_OscConfig+0xf78>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	e029      	b.n	8004710 <HAL_RCC_OscConfig+0xfcc>
 80046bc:	40021000 	.word	0x40021000
 80046c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80046c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	fa93 f2a3 	rbit	r2, r3
 80046dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ea:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80046ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	fa93 f2a3 	rbit	r2, r3
 8004702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004706:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	4b2b      	ldr	r3, [pc, #172]	; (80047bc <HAL_RCC_OscConfig+0x1078>)
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004714:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004718:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800471c:	6011      	str	r1, [r2, #0]
 800471e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004722:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004726:	6812      	ldr	r2, [r2, #0]
 8004728:	fa92 f1a2 	rbit	r1, r2
 800472c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004730:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004734:	6011      	str	r1, [r2, #0]
  return result;
 8004736:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800473a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800473e:	6812      	ldr	r2, [r2, #0]
 8004740:	fab2 f282 	clz	r2, r2
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	f042 0220 	orr.w	r2, r2, #32
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	f002 021f 	and.w	r2, r2, #31
 8004750:	2101      	movs	r1, #1
 8004752:	fa01 f202 	lsl.w	r2, r1, r2
 8004756:	4013      	ands	r3, r2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d180      	bne.n	800465e <HAL_RCC_OscConfig+0xf1a>
 800475c:	e027      	b.n	80047ae <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800475e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004762:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d101      	bne.n	8004772 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e01e      	b.n	80047b0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004772:	4b12      	ldr	r3, [pc, #72]	; (80047bc <HAL_RCC_OscConfig+0x1078>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800477a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800477e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004786:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	429a      	cmp	r2, r3
 8004790:	d10b      	bne.n	80047aa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004792:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004796:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800479a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800479e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d001      	beq.n	80047ae <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	40021000 	.word	0x40021000

080047c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b09e      	sub	sp, #120	; 0x78
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e162      	b.n	8004a9e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047d8:	4b90      	ldr	r3, [pc, #576]	; (8004a1c <HAL_RCC_ClockConfig+0x25c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d910      	bls.n	8004808 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e6:	4b8d      	ldr	r3, [pc, #564]	; (8004a1c <HAL_RCC_ClockConfig+0x25c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f023 0207 	bic.w	r2, r3, #7
 80047ee:	498b      	ldr	r1, [pc, #556]	; (8004a1c <HAL_RCC_ClockConfig+0x25c>)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f6:	4b89      	ldr	r3, [pc, #548]	; (8004a1c <HAL_RCC_ClockConfig+0x25c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d001      	beq.n	8004808 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e14a      	b.n	8004a9e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d008      	beq.n	8004826 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004814:	4b82      	ldr	r3, [pc, #520]	; (8004a20 <HAL_RCC_ClockConfig+0x260>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	497f      	ldr	r1, [pc, #508]	; (8004a20 <HAL_RCC_ClockConfig+0x260>)
 8004822:	4313      	orrs	r3, r2
 8004824:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 80dc 	beq.w	80049ec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d13c      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xf6>
 800483c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004840:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004842:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004844:	fa93 f3a3 	rbit	r3, r3
 8004848:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800484a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484c:	fab3 f383 	clz	r3, r3
 8004850:	b2db      	uxtb	r3, r3
 8004852:	095b      	lsrs	r3, r3, #5
 8004854:	b2db      	uxtb	r3, r3
 8004856:	f043 0301 	orr.w	r3, r3, #1
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	d102      	bne.n	8004866 <HAL_RCC_ClockConfig+0xa6>
 8004860:	4b6f      	ldr	r3, [pc, #444]	; (8004a20 <HAL_RCC_ClockConfig+0x260>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	e00f      	b.n	8004886 <HAL_RCC_ClockConfig+0xc6>
 8004866:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800486a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800486e:	fa93 f3a3 	rbit	r3, r3
 8004872:	667b      	str	r3, [r7, #100]	; 0x64
 8004874:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004878:	663b      	str	r3, [r7, #96]	; 0x60
 800487a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800487c:	fa93 f3a3 	rbit	r3, r3
 8004880:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004882:	4b67      	ldr	r3, [pc, #412]	; (8004a20 <HAL_RCC_ClockConfig+0x260>)
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800488a:	65ba      	str	r2, [r7, #88]	; 0x58
 800488c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800488e:	fa92 f2a2 	rbit	r2, r2
 8004892:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004894:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004896:	fab2 f282 	clz	r2, r2
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	f042 0220 	orr.w	r2, r2, #32
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	f002 021f 	and.w	r2, r2, #31
 80048a6:	2101      	movs	r1, #1
 80048a8:	fa01 f202 	lsl.w	r2, r1, r2
 80048ac:	4013      	ands	r3, r2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d17b      	bne.n	80049aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e0f3      	b.n	8004a9e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d13c      	bne.n	8004938 <HAL_RCC_ClockConfig+0x178>
 80048be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c6:	fa93 f3a3 	rbit	r3, r3
 80048ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80048cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ce:	fab3 f383 	clz	r3, r3
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	095b      	lsrs	r3, r3, #5
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	f043 0301 	orr.w	r3, r3, #1
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d102      	bne.n	80048e8 <HAL_RCC_ClockConfig+0x128>
 80048e2:	4b4f      	ldr	r3, [pc, #316]	; (8004a20 <HAL_RCC_ClockConfig+0x260>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	e00f      	b.n	8004908 <HAL_RCC_ClockConfig+0x148>
 80048e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048f0:	fa93 f3a3 	rbit	r3, r3
 80048f4:	647b      	str	r3, [r7, #68]	; 0x44
 80048f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048fa:	643b      	str	r3, [r7, #64]	; 0x40
 80048fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048fe:	fa93 f3a3 	rbit	r3, r3
 8004902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004904:	4b46      	ldr	r3, [pc, #280]	; (8004a20 <HAL_RCC_ClockConfig+0x260>)
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800490c:	63ba      	str	r2, [r7, #56]	; 0x38
 800490e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004910:	fa92 f2a2 	rbit	r2, r2
 8004914:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004918:	fab2 f282 	clz	r2, r2
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	f042 0220 	orr.w	r2, r2, #32
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	f002 021f 	and.w	r2, r2, #31
 8004928:	2101      	movs	r1, #1
 800492a:	fa01 f202 	lsl.w	r2, r1, r2
 800492e:	4013      	ands	r3, r2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d13a      	bne.n	80049aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e0b2      	b.n	8004a9e <HAL_RCC_ClockConfig+0x2de>
 8004938:	2302      	movs	r3, #2
 800493a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493e:	fa93 f3a3 	rbit	r3, r3
 8004942:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004946:	fab3 f383 	clz	r3, r3
 800494a:	b2db      	uxtb	r3, r3
 800494c:	095b      	lsrs	r3, r3, #5
 800494e:	b2db      	uxtb	r3, r3
 8004950:	f043 0301 	orr.w	r3, r3, #1
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b01      	cmp	r3, #1
 8004958:	d102      	bne.n	8004960 <HAL_RCC_ClockConfig+0x1a0>
 800495a:	4b31      	ldr	r3, [pc, #196]	; (8004a20 <HAL_RCC_ClockConfig+0x260>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	e00d      	b.n	800497c <HAL_RCC_ClockConfig+0x1bc>
 8004960:	2302      	movs	r3, #2
 8004962:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	fa93 f3a3 	rbit	r3, r3
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
 800496c:	2302      	movs	r3, #2
 800496e:	623b      	str	r3, [r7, #32]
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	fa93 f3a3 	rbit	r3, r3
 8004976:	61fb      	str	r3, [r7, #28]
 8004978:	4b29      	ldr	r3, [pc, #164]	; (8004a20 <HAL_RCC_ClockConfig+0x260>)
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	2202      	movs	r2, #2
 800497e:	61ba      	str	r2, [r7, #24]
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	fa92 f2a2 	rbit	r2, r2
 8004986:	617a      	str	r2, [r7, #20]
  return result;
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	fab2 f282 	clz	r2, r2
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	f042 0220 	orr.w	r2, r2, #32
 8004994:	b2d2      	uxtb	r2, r2
 8004996:	f002 021f 	and.w	r2, r2, #31
 800499a:	2101      	movs	r1, #1
 800499c:	fa01 f202 	lsl.w	r2, r1, r2
 80049a0:	4013      	ands	r3, r2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e079      	b.n	8004a9e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049aa:	4b1d      	ldr	r3, [pc, #116]	; (8004a20 <HAL_RCC_ClockConfig+0x260>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f023 0203 	bic.w	r2, r3, #3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	491a      	ldr	r1, [pc, #104]	; (8004a20 <HAL_RCC_ClockConfig+0x260>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049bc:	f7fd f81e 	bl	80019fc <HAL_GetTick>
 80049c0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c2:	e00a      	b.n	80049da <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049c4:	f7fd f81a 	bl	80019fc <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e061      	b.n	8004a9e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049da:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <HAL_RCC_ClockConfig+0x260>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f003 020c 	and.w	r2, r3, #12
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d1eb      	bne.n	80049c4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049ec:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <HAL_RCC_ClockConfig+0x25c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d214      	bcs.n	8004a24 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049fa:	4b08      	ldr	r3, [pc, #32]	; (8004a1c <HAL_RCC_ClockConfig+0x25c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f023 0207 	bic.w	r2, r3, #7
 8004a02:	4906      	ldr	r1, [pc, #24]	; (8004a1c <HAL_RCC_ClockConfig+0x25c>)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0a:	4b04      	ldr	r3, [pc, #16]	; (8004a1c <HAL_RCC_ClockConfig+0x25c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d005      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e040      	b.n	8004a9e <HAL_RCC_ClockConfig+0x2de>
 8004a1c:	40022000 	.word	0x40022000
 8004a20:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d008      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a30:	4b1d      	ldr	r3, [pc, #116]	; (8004aa8 <HAL_RCC_ClockConfig+0x2e8>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	491a      	ldr	r1, [pc, #104]	; (8004aa8 <HAL_RCC_ClockConfig+0x2e8>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0308 	and.w	r3, r3, #8
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d009      	beq.n	8004a62 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a4e:	4b16      	ldr	r3, [pc, #88]	; (8004aa8 <HAL_RCC_ClockConfig+0x2e8>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	4912      	ldr	r1, [pc, #72]	; (8004aa8 <HAL_RCC_ClockConfig+0x2e8>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004a62:	f000 f829 	bl	8004ab8 <HAL_RCC_GetSysClockFreq>
 8004a66:	4601      	mov	r1, r0
 8004a68:	4b0f      	ldr	r3, [pc, #60]	; (8004aa8 <HAL_RCC_ClockConfig+0x2e8>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a70:	22f0      	movs	r2, #240	; 0xf0
 8004a72:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	fa92 f2a2 	rbit	r2, r2
 8004a7a:	60fa      	str	r2, [r7, #12]
  return result;
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	fab2 f282 	clz	r2, r2
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	40d3      	lsrs	r3, r2
 8004a86:	4a09      	ldr	r2, [pc, #36]	; (8004aac <HAL_RCC_ClockConfig+0x2ec>)
 8004a88:	5cd3      	ldrb	r3, [r2, r3]
 8004a8a:	fa21 f303 	lsr.w	r3, r1, r3
 8004a8e:	4a08      	ldr	r2, [pc, #32]	; (8004ab0 <HAL_RCC_ClockConfig+0x2f0>)
 8004a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004a92:	4b08      	ldr	r3, [pc, #32]	; (8004ab4 <HAL_RCC_ClockConfig+0x2f4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fc ff6c 	bl	8001974 <HAL_InitTick>
  
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3778      	adds	r7, #120	; 0x78
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	08008300 	.word	0x08008300
 8004ab0:	2000000c 	.word	0x2000000c
 8004ab4:	20000010 	.word	0x20000010

08004ab8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b08b      	sub	sp, #44	; 0x2c
 8004abc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61fb      	str	r3, [r7, #28]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61bb      	str	r3, [r7, #24]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004ad2:	4b29      	ldr	r3, [pc, #164]	; (8004b78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	f003 030c 	and.w	r3, r3, #12
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d002      	beq.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x30>
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d003      	beq.n	8004aee <HAL_RCC_GetSysClockFreq+0x36>
 8004ae6:	e03c      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ae8:	4b24      	ldr	r3, [pc, #144]	; (8004b7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004aea:	623b      	str	r3, [r7, #32]
      break;
 8004aec:	e03c      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004af4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004af8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	fa92 f2a2 	rbit	r2, r2
 8004b00:	607a      	str	r2, [r7, #4]
  return result;
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	fab2 f282 	clz	r2, r2
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	40d3      	lsrs	r3, r2
 8004b0c:	4a1c      	ldr	r2, [pc, #112]	; (8004b80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004b0e:	5cd3      	ldrb	r3, [r2, r3]
 8004b10:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004b12:	4b19      	ldr	r3, [pc, #100]	; (8004b78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	220f      	movs	r2, #15
 8004b1c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	fa92 f2a2 	rbit	r2, r2
 8004b24:	60fa      	str	r2, [r7, #12]
  return result;
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	fab2 f282 	clz	r2, r2
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	40d3      	lsrs	r3, r2
 8004b30:	4a14      	ldr	r2, [pc, #80]	; (8004b84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004b32:	5cd3      	ldrb	r3, [r2, r3]
 8004b34:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d008      	beq.n	8004b52 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b40:	4a0e      	ldr	r2, [pc, #56]	; (8004b7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	fb02 f303 	mul.w	r3, r2, r3
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b50:	e004      	b.n	8004b5c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	4a0c      	ldr	r2, [pc, #48]	; (8004b88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b56:	fb02 f303 	mul.w	r3, r2, r3
 8004b5a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	623b      	str	r3, [r7, #32]
      break;
 8004b60:	e002      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b62:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004b64:	623b      	str	r3, [r7, #32]
      break;
 8004b66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b68:	6a3b      	ldr	r3, [r7, #32]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	372c      	adds	r7, #44	; 0x2c
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	007a1200 	.word	0x007a1200
 8004b80:	08008310 	.word	0x08008310
 8004b84:	08008320 	.word	0x08008320
 8004b88:	003d0900 	.word	0x003d0900

08004b8c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b092      	sub	sp, #72	; 0x48
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 80cd 	beq.w	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bb0:	4b86      	ldr	r3, [pc, #536]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10e      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bbc:	4b83      	ldr	r3, [pc, #524]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	4a82      	ldr	r2, [pc, #520]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc6:	61d3      	str	r3, [r2, #28]
 8004bc8:	4b80      	ldr	r3, [pc, #512]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd0:	60bb      	str	r3, [r7, #8]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bda:	4b7d      	ldr	r3, [pc, #500]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d118      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004be6:	4b7a      	ldr	r3, [pc, #488]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a79      	ldr	r2, [pc, #484]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bf2:	f7fc ff03 	bl	80019fc <HAL_GetTick>
 8004bf6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf8:	e008      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bfa:	f7fc feff 	bl	80019fc <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b64      	cmp	r3, #100	; 0x64
 8004c06:	d901      	bls.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e0db      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c0c:	4b70      	ldr	r3, [pc, #448]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0f0      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c18:	4b6c      	ldr	r3, [pc, #432]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c20:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d07d      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d076      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c36:	4b65      	ldr	r3, [pc, #404]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c44:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	fa93 f3a3 	rbit	r3, r3
 8004c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c50:	fab3 f383 	clz	r3, r3
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	461a      	mov	r2, r3
 8004c58:	4b5e      	ldr	r3, [pc, #376]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c5a:	4413      	add	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	461a      	mov	r2, r3
 8004c60:	2301      	movs	r3, #1
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6c:	fa93 f3a3 	rbit	r3, r3
 8004c70:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c74:	fab3 f383 	clz	r3, r3
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	4b55      	ldr	r3, [pc, #340]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c7e:	4413      	add	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	461a      	mov	r2, r3
 8004c84:	2300      	movs	r3, #0
 8004c86:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c88:	4a50      	ldr	r2, [pc, #320]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c8c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d045      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c98:	f7fc feb0 	bl	80019fc <HAL_GetTick>
 8004c9c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c9e:	e00a      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca0:	f7fc feac 	bl	80019fc <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e086      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbc:	fa93 f3a3 	rbit	r3, r3
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	623b      	str	r3, [r7, #32]
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	fa93 f3a3 	rbit	r3, r3
 8004ccc:	61fb      	str	r3, [r7, #28]
  return result;
 8004cce:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd0:	fab3 f383 	clz	r3, r3
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	f043 0302 	orr.w	r3, r3, #2
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d102      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004ce4:	4b39      	ldr	r3, [pc, #228]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	e007      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004cea:	2302      	movs	r3, #2
 8004cec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	fa93 f3a3 	rbit	r3, r3
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	4b35      	ldr	r3, [pc, #212]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	613a      	str	r2, [r7, #16]
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	fa92 f2a2 	rbit	r2, r2
 8004d04:	60fa      	str	r2, [r7, #12]
  return result;
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	fab2 f282 	clz	r2, r2
 8004d0c:	b2d2      	uxtb	r2, r2
 8004d0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	f002 021f 	and.w	r2, r2, #31
 8004d18:	2101      	movs	r1, #1
 8004d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0bd      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004d24:	4b29      	ldr	r3, [pc, #164]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	4926      	ldr	r1, [pc, #152]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d105      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d3e:	4b23      	ldr	r3, [pc, #140]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	4a22      	ldr	r2, [pc, #136]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d48:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d008      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d56:	4b1d      	ldr	r3, [pc, #116]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5a:	f023 0203 	bic.w	r2, r3, #3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	491a      	ldr	r1, [pc, #104]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0320 	and.w	r3, r3, #32
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d008      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d74:	4b15      	ldr	r3, [pc, #84]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d78:	f023 0210 	bic.w	r2, r3, #16
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	4912      	ldr	r1, [pc, #72]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d008      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d92:	4b0e      	ldr	r3, [pc, #56]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d96:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	490b      	ldr	r1, [pc, #44]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d008      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004db0:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	4903      	ldr	r1, [pc, #12]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3748      	adds	r7, #72	; 0x48
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	40007000 	.word	0x40007000
 8004dd4:	10908100 	.word	0x10908100

08004dd8 <gcvt>:
 8004dd8:	b530      	push	{r4, r5, lr}
 8004dda:	2200      	movs	r2, #0
 8004ddc:	b085      	sub	sp, #20
 8004dde:	460c      	mov	r4, r1
 8004de0:	4605      	mov	r5, r0
 8004de2:	2300      	movs	r3, #0
 8004de4:	ec51 0b10 	vmov	r0, r1, d0
 8004de8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004dec:	f7fb fe6e 	bl	8000acc <__aeabi_dcmplt>
 8004df0:	ed9d 0b02 	vldr	d0, [sp, #8]
 8004df4:	4622      	mov	r2, r4
 8004df6:	b118      	cbz	r0, 8004e00 <gcvt+0x28>
 8004df8:	232d      	movs	r3, #45	; 0x2d
 8004dfa:	f802 3b01 	strb.w	r3, [r2], #1
 8004dfe:	3d01      	subs	r5, #1
 8004e00:	2300      	movs	r3, #0
 8004e02:	4806      	ldr	r0, [pc, #24]	; (8004e1c <gcvt+0x44>)
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	4629      	mov	r1, r5
 8004e08:	2367      	movs	r3, #103	; 0x67
 8004e0a:	6800      	ldr	r0, [r0, #0]
 8004e0c:	f000 f8b4 	bl	8004f78 <_gcvt>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	bf14      	ite	ne
 8004e14:	4620      	movne	r0, r4
 8004e16:	2000      	moveq	r0, #0
 8004e18:	b005      	add	sp, #20
 8004e1a:	bd30      	pop	{r4, r5, pc}
 8004e1c:	20000018 	.word	0x20000018

08004e20 <__errno>:
 8004e20:	4b01      	ldr	r3, [pc, #4]	; (8004e28 <__errno+0x8>)
 8004e22:	6818      	ldr	r0, [r3, #0]
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	20000018 	.word	0x20000018

08004e2c <__libc_init_array>:
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	4d0d      	ldr	r5, [pc, #52]	; (8004e64 <__libc_init_array+0x38>)
 8004e30:	4c0d      	ldr	r4, [pc, #52]	; (8004e68 <__libc_init_array+0x3c>)
 8004e32:	1b64      	subs	r4, r4, r5
 8004e34:	10a4      	asrs	r4, r4, #2
 8004e36:	2600      	movs	r6, #0
 8004e38:	42a6      	cmp	r6, r4
 8004e3a:	d109      	bne.n	8004e50 <__libc_init_array+0x24>
 8004e3c:	4d0b      	ldr	r5, [pc, #44]	; (8004e6c <__libc_init_array+0x40>)
 8004e3e:	4c0c      	ldr	r4, [pc, #48]	; (8004e70 <__libc_init_array+0x44>)
 8004e40:	f002 fb9e 	bl	8007580 <_init>
 8004e44:	1b64      	subs	r4, r4, r5
 8004e46:	10a4      	asrs	r4, r4, #2
 8004e48:	2600      	movs	r6, #0
 8004e4a:	42a6      	cmp	r6, r4
 8004e4c:	d105      	bne.n	8004e5a <__libc_init_array+0x2e>
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}
 8004e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e54:	4798      	blx	r3
 8004e56:	3601      	adds	r6, #1
 8004e58:	e7ee      	b.n	8004e38 <__libc_init_array+0xc>
 8004e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5e:	4798      	blx	r3
 8004e60:	3601      	adds	r6, #1
 8004e62:	e7f2      	b.n	8004e4a <__libc_init_array+0x1e>
 8004e64:	080085f0 	.word	0x080085f0
 8004e68:	080085f0 	.word	0x080085f0
 8004e6c:	080085f0 	.word	0x080085f0
 8004e70:	080085f4 	.word	0x080085f4

08004e74 <memset>:
 8004e74:	4402      	add	r2, r0
 8004e76:	4603      	mov	r3, r0
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d100      	bne.n	8004e7e <memset+0xa>
 8004e7c:	4770      	bx	lr
 8004e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e82:	e7f9      	b.n	8004e78 <memset+0x4>

08004e84 <print_e>:
 8004e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e86:	b087      	sub	sp, #28
 8004e88:	ec43 2b10 	vmov	d0, r2, r3
 8004e8c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004e8e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8004e92:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004e94:	ab04      	add	r3, sp, #16
 8004e96:	9301      	str	r3, [sp, #4]
 8004e98:	ab03      	add	r3, sp, #12
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	1c62      	adds	r2, r4, #1
 8004e9e:	ab05      	add	r3, sp, #20
 8004ea0:	460f      	mov	r7, r1
 8004ea2:	2102      	movs	r1, #2
 8004ea4:	f000 fe38 	bl	8005b18 <_dtoa_r>
 8004ea8:	9a05      	ldr	r2, [sp, #20]
 8004eaa:	f242 730f 	movw	r3, #9999	; 0x270f
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d105      	bne.n	8004ebe <print_e+0x3a>
 8004eb2:	4601      	mov	r1, r0
 8004eb4:	4638      	mov	r0, r7
 8004eb6:	f000 fd7b 	bl	80059b0 <strcpy>
 8004eba:	b007      	add	sp, #28
 8004ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ebe:	463b      	mov	r3, r7
 8004ec0:	7801      	ldrb	r1, [r0, #0]
 8004ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ec6:	2c00      	cmp	r4, #0
 8004ec8:	bfc8      	it	gt
 8004eca:	2501      	movgt	r5, #1
 8004ecc:	212e      	movs	r1, #46	; 0x2e
 8004ece:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8004ed2:	b10f      	cbz	r7, 8004ed8 <print_e+0x54>
 8004ed4:	2c00      	cmp	r4, #0
 8004ed6:	dc37      	bgt.n	8004f48 <print_e+0xc4>
 8004ed8:	2e67      	cmp	r6, #103	; 0x67
 8004eda:	d046      	beq.n	8004f6a <print_e+0xe6>
 8004edc:	2e47      	cmp	r6, #71	; 0x47
 8004ede:	d046      	beq.n	8004f6e <print_e+0xea>
 8004ee0:	212e      	movs	r1, #46	; 0x2e
 8004ee2:	2030      	movs	r0, #48	; 0x30
 8004ee4:	2c00      	cmp	r4, #0
 8004ee6:	dc38      	bgt.n	8004f5a <print_e+0xd6>
 8004ee8:	1e51      	subs	r1, r2, #1
 8004eea:	2900      	cmp	r1, #0
 8004eec:	bfb8      	it	lt
 8004eee:	f1c2 0201 	rsblt	r2, r2, #1
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	9105      	str	r1, [sp, #20]
 8004ef6:	bfac      	ite	ge
 8004ef8:	222b      	movge	r2, #43	; 0x2b
 8004efa:	9205      	strlt	r2, [sp, #20]
 8004efc:	f800 6b02 	strb.w	r6, [r0], #2
 8004f00:	bfa8      	it	ge
 8004f02:	705a      	strbge	r2, [r3, #1]
 8004f04:	9a05      	ldr	r2, [sp, #20]
 8004f06:	bfbc      	itt	lt
 8004f08:	212d      	movlt	r1, #45	; 0x2d
 8004f0a:	7059      	strblt	r1, [r3, #1]
 8004f0c:	2a63      	cmp	r2, #99	; 0x63
 8004f0e:	dd0b      	ble.n	8004f28 <print_e+0xa4>
 8004f10:	2164      	movs	r1, #100	; 0x64
 8004f12:	fb92 f1f1 	sdiv	r1, r2, r1
 8004f16:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8004f1a:	1cd8      	adds	r0, r3, #3
 8004f1c:	709c      	strb	r4, [r3, #2]
 8004f1e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8004f22:	fb03 2201 	mla	r2, r3, r1, r2
 8004f26:	9205      	str	r2, [sp, #20]
 8004f28:	9b05      	ldr	r3, [sp, #20]
 8004f2a:	220a      	movs	r2, #10
 8004f2c:	fb93 f2f2 	sdiv	r2, r3, r2
 8004f30:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8004f34:	7001      	strb	r1, [r0, #0]
 8004f36:	f06f 0109 	mvn.w	r1, #9
 8004f3a:	fb01 3302 	mla	r3, r1, r2, r3
 8004f3e:	3330      	adds	r3, #48	; 0x30
 8004f40:	7043      	strb	r3, [r0, #1]
 8004f42:	2300      	movs	r3, #0
 8004f44:	7083      	strb	r3, [r0, #2]
 8004f46:	e7b8      	b.n	8004eba <print_e+0x36>
 8004f48:	b10d      	cbz	r5, 8004f4e <print_e+0xca>
 8004f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f4e:	7805      	ldrb	r5, [r0, #0]
 8004f50:	f803 5b01 	strb.w	r5, [r3], #1
 8004f54:	3c01      	subs	r4, #1
 8004f56:	2500      	movs	r5, #0
 8004f58:	e7b9      	b.n	8004ece <print_e+0x4a>
 8004f5a:	b10d      	cbz	r5, 8004f60 <print_e+0xdc>
 8004f5c:	f803 1b01 	strb.w	r1, [r3], #1
 8004f60:	f803 0b01 	strb.w	r0, [r3], #1
 8004f64:	3c01      	subs	r4, #1
 8004f66:	2500      	movs	r5, #0
 8004f68:	e7bc      	b.n	8004ee4 <print_e+0x60>
 8004f6a:	2665      	movs	r6, #101	; 0x65
 8004f6c:	e7bc      	b.n	8004ee8 <print_e+0x64>
 8004f6e:	2645      	movs	r6, #69	; 0x45
 8004f70:	e7ba      	b.n	8004ee8 <print_e+0x64>
 8004f72:	0000      	movs	r0, r0
 8004f74:	0000      	movs	r0, r0
	...

08004f78 <_gcvt>:
 8004f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f7c:	ec55 4b10 	vmov	r4, r5, d0
 8004f80:	b088      	sub	sp, #32
 8004f82:	4681      	mov	r9, r0
 8004f84:	4688      	mov	r8, r1
 8004f86:	4616      	mov	r6, r2
 8004f88:	469a      	mov	sl, r3
 8004f8a:	ee10 0a10 	vmov	r0, s0
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2300      	movs	r3, #0
 8004f92:	4629      	mov	r1, r5
 8004f94:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8004f96:	f7fb fd99 	bl	8000acc <__aeabi_dcmplt>
 8004f9a:	b110      	cbz	r0, 8004fa2 <_gcvt+0x2a>
 8004f9c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004fa0:	461d      	mov	r5, r3
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	4629      	mov	r1, r5
 8004faa:	f7fb fd85 	bl	8000ab8 <__aeabi_dcmpeq>
 8004fae:	b138      	cbz	r0, 8004fc0 <_gcvt+0x48>
 8004fb0:	2330      	movs	r3, #48	; 0x30
 8004fb2:	7033      	strb	r3, [r6, #0]
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	7073      	strb	r3, [r6, #1]
 8004fb8:	4630      	mov	r0, r6
 8004fba:	b008      	add	sp, #32
 8004fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc0:	a34b      	add	r3, pc, #300	; (adr r3, 80050f0 <_gcvt+0x178>)
 8004fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	4629      	mov	r1, r5
 8004fca:	f7fb fd89 	bl	8000ae0 <__aeabi_dcmple>
 8004fce:	b158      	cbz	r0, 8004fe8 <_gcvt+0x70>
 8004fd0:	f108 31ff 	add.w	r1, r8, #4294967295
 8004fd4:	9100      	str	r1, [sp, #0]
 8004fd6:	e9cd a701 	strd	sl, r7, [sp, #4]
 8004fda:	4622      	mov	r2, r4
 8004fdc:	462b      	mov	r3, r5
 8004fde:	4631      	mov	r1, r6
 8004fe0:	4648      	mov	r0, r9
 8004fe2:	f7ff ff4f 	bl	8004e84 <print_e>
 8004fe6:	e7e7      	b.n	8004fb8 <_gcvt+0x40>
 8004fe8:	4640      	mov	r0, r8
 8004fea:	f000 fc09 	bl	8005800 <_mprec_log10>
 8004fee:	4622      	mov	r2, r4
 8004ff0:	ec51 0b10 	vmov	r0, r1, d0
 8004ff4:	462b      	mov	r3, r5
 8004ff6:	f7fb fd73 	bl	8000ae0 <__aeabi_dcmple>
 8004ffa:	2800      	cmp	r0, #0
 8004ffc:	d1e8      	bne.n	8004fd0 <_gcvt+0x58>
 8004ffe:	ab07      	add	r3, sp, #28
 8005000:	9301      	str	r3, [sp, #4]
 8005002:	ab06      	add	r3, sp, #24
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	4642      	mov	r2, r8
 8005008:	ab05      	add	r3, sp, #20
 800500a:	ec45 4b10 	vmov	d0, r4, r5
 800500e:	2102      	movs	r1, #2
 8005010:	4648      	mov	r0, r9
 8005012:	f000 fd81 	bl	8005b18 <_dtoa_r>
 8005016:	9a05      	ldr	r2, [sp, #20]
 8005018:	f242 730f 	movw	r3, #9999	; 0x270f
 800501c:	429a      	cmp	r2, r3
 800501e:	d00e      	beq.n	800503e <_gcvt+0xc6>
 8005020:	4633      	mov	r3, r6
 8005022:	44b0      	add	r8, r6
 8005024:	4605      	mov	r5, r0
 8005026:	f810 1b01 	ldrb.w	r1, [r0], #1
 800502a:	9c05      	ldr	r4, [sp, #20]
 800502c:	eba8 0203 	sub.w	r2, r8, r3
 8005030:	b109      	cbz	r1, 8005036 <_gcvt+0xbe>
 8005032:	2c00      	cmp	r4, #0
 8005034:	dc08      	bgt.n	8005048 <_gcvt+0xd0>
 8005036:	2100      	movs	r1, #0
 8005038:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800503c:	e00d      	b.n	800505a <_gcvt+0xe2>
 800503e:	4601      	mov	r1, r0
 8005040:	4630      	mov	r0, r6
 8005042:	f000 fcb5 	bl	80059b0 <strcpy>
 8005046:	e7b7      	b.n	8004fb8 <_gcvt+0x40>
 8005048:	3c01      	subs	r4, #1
 800504a:	f803 1b01 	strb.w	r1, [r3], #1
 800504e:	9405      	str	r4, [sp, #20]
 8005050:	e7e8      	b.n	8005024 <_gcvt+0xac>
 8005052:	f803 cb01 	strb.w	ip, [r3], #1
 8005056:	3a01      	subs	r2, #1
 8005058:	2101      	movs	r1, #1
 800505a:	2c00      	cmp	r4, #0
 800505c:	4620      	mov	r0, r4
 800505e:	dc2a      	bgt.n	80050b6 <_gcvt+0x13e>
 8005060:	b101      	cbz	r1, 8005064 <_gcvt+0xec>
 8005062:	9405      	str	r4, [sp, #20]
 8005064:	b90f      	cbnz	r7, 800506a <_gcvt+0xf2>
 8005066:	7829      	ldrb	r1, [r5, #0]
 8005068:	b311      	cbz	r1, 80050b0 <_gcvt+0x138>
 800506a:	42b3      	cmp	r3, r6
 800506c:	bf04      	itt	eq
 800506e:	2130      	moveq	r1, #48	; 0x30
 8005070:	f803 1b01 	strbeq.w	r1, [r3], #1
 8005074:	212e      	movs	r1, #46	; 0x2e
 8005076:	7019      	strb	r1, [r3, #0]
 8005078:	9905      	ldr	r1, [sp, #20]
 800507a:	4618      	mov	r0, r3
 800507c:	2400      	movs	r4, #0
 800507e:	eba1 0c03 	sub.w	ip, r1, r3
 8005082:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8005086:	eb1c 0f00 	cmn.w	ip, r0
 800508a:	d41c      	bmi.n	80050c6 <_gcvt+0x14e>
 800508c:	2900      	cmp	r1, #0
 800508e:	f1c1 0000 	rsb	r0, r1, #0
 8005092:	bfc8      	it	gt
 8005094:	2000      	movgt	r0, #0
 8005096:	f100 0c01 	add.w	ip, r0, #1
 800509a:	4463      	add	r3, ip
 800509c:	4401      	add	r1, r0
 800509e:	b104      	cbz	r4, 80050a2 <_gcvt+0x12a>
 80050a0:	9105      	str	r1, [sp, #20]
 80050a2:	1e69      	subs	r1, r5, #1
 80050a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80050a8:	b108      	cbz	r0, 80050ae <_gcvt+0x136>
 80050aa:	2a00      	cmp	r2, #0
 80050ac:	dc0f      	bgt.n	80050ce <_gcvt+0x156>
 80050ae:	b9df      	cbnz	r7, 80050e8 <_gcvt+0x170>
 80050b0:	2200      	movs	r2, #0
 80050b2:	701a      	strb	r2, [r3, #0]
 80050b4:	e780      	b.n	8004fb8 <_gcvt+0x40>
 80050b6:	2a00      	cmp	r2, #0
 80050b8:	f104 34ff 	add.w	r4, r4, #4294967295
 80050bc:	dcc9      	bgt.n	8005052 <_gcvt+0xda>
 80050be:	2900      	cmp	r1, #0
 80050c0:	d0d0      	beq.n	8005064 <_gcvt+0xec>
 80050c2:	9005      	str	r0, [sp, #20]
 80050c4:	e7ce      	b.n	8005064 <_gcvt+0xec>
 80050c6:	f800 ef01 	strb.w	lr, [r0, #1]!
 80050ca:	2401      	movs	r4, #1
 80050cc:	e7db      	b.n	8005086 <_gcvt+0x10e>
 80050ce:	f803 0b01 	strb.w	r0, [r3], #1
 80050d2:	3a01      	subs	r2, #1
 80050d4:	e7e6      	b.n	80050a4 <_gcvt+0x12c>
 80050d6:	f801 5b01 	strb.w	r5, [r1], #1
 80050da:	1a60      	subs	r0, r4, r1
 80050dc:	2800      	cmp	r0, #0
 80050de:	dcfa      	bgt.n	80050d6 <_gcvt+0x15e>
 80050e0:	2a00      	cmp	r2, #0
 80050e2:	bfa8      	it	ge
 80050e4:	189b      	addge	r3, r3, r2
 80050e6:	e7e3      	b.n	80050b0 <_gcvt+0x138>
 80050e8:	4619      	mov	r1, r3
 80050ea:	189c      	adds	r4, r3, r2
 80050ec:	2530      	movs	r5, #48	; 0x30
 80050ee:	e7f4      	b.n	80050da <_gcvt+0x162>
 80050f0:	eb1c432d 	.word	0xeb1c432d
 80050f4:	3f1a36e2 	.word	0x3f1a36e2

080050f8 <_Balloc>:
 80050f8:	b570      	push	{r4, r5, r6, lr}
 80050fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80050fc:	4604      	mov	r4, r0
 80050fe:	460d      	mov	r5, r1
 8005100:	b976      	cbnz	r6, 8005120 <_Balloc+0x28>
 8005102:	2010      	movs	r0, #16
 8005104:	f001 fb08 	bl	8006718 <malloc>
 8005108:	4602      	mov	r2, r0
 800510a:	6260      	str	r0, [r4, #36]	; 0x24
 800510c:	b920      	cbnz	r0, 8005118 <_Balloc+0x20>
 800510e:	4b18      	ldr	r3, [pc, #96]	; (8005170 <_Balloc+0x78>)
 8005110:	4818      	ldr	r0, [pc, #96]	; (8005174 <_Balloc+0x7c>)
 8005112:	2166      	movs	r1, #102	; 0x66
 8005114:	f000 fc54 	bl	80059c0 <__assert_func>
 8005118:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800511c:	6006      	str	r6, [r0, #0]
 800511e:	60c6      	str	r6, [r0, #12]
 8005120:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005122:	68f3      	ldr	r3, [r6, #12]
 8005124:	b183      	cbz	r3, 8005148 <_Balloc+0x50>
 8005126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800512e:	b9b8      	cbnz	r0, 8005160 <_Balloc+0x68>
 8005130:	2101      	movs	r1, #1
 8005132:	fa01 f605 	lsl.w	r6, r1, r5
 8005136:	1d72      	adds	r2, r6, #5
 8005138:	0092      	lsls	r2, r2, #2
 800513a:	4620      	mov	r0, r4
 800513c:	f000 fb7e 	bl	800583c <_calloc_r>
 8005140:	b160      	cbz	r0, 800515c <_Balloc+0x64>
 8005142:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005146:	e00e      	b.n	8005166 <_Balloc+0x6e>
 8005148:	2221      	movs	r2, #33	; 0x21
 800514a:	2104      	movs	r1, #4
 800514c:	4620      	mov	r0, r4
 800514e:	f000 fb75 	bl	800583c <_calloc_r>
 8005152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005154:	60f0      	str	r0, [r6, #12]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1e4      	bne.n	8005126 <_Balloc+0x2e>
 800515c:	2000      	movs	r0, #0
 800515e:	bd70      	pop	{r4, r5, r6, pc}
 8005160:	6802      	ldr	r2, [r0, #0]
 8005162:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005166:	2300      	movs	r3, #0
 8005168:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800516c:	e7f7      	b.n	800515e <_Balloc+0x66>
 800516e:	bf00      	nop
 8005170:	08008334 	.word	0x08008334
 8005174:	0800834b 	.word	0x0800834b

08005178 <_Bfree>:
 8005178:	b570      	push	{r4, r5, r6, lr}
 800517a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800517c:	4605      	mov	r5, r0
 800517e:	460c      	mov	r4, r1
 8005180:	b976      	cbnz	r6, 80051a0 <_Bfree+0x28>
 8005182:	2010      	movs	r0, #16
 8005184:	f001 fac8 	bl	8006718 <malloc>
 8005188:	4602      	mov	r2, r0
 800518a:	6268      	str	r0, [r5, #36]	; 0x24
 800518c:	b920      	cbnz	r0, 8005198 <_Bfree+0x20>
 800518e:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <_Bfree+0x3c>)
 8005190:	4809      	ldr	r0, [pc, #36]	; (80051b8 <_Bfree+0x40>)
 8005192:	218a      	movs	r1, #138	; 0x8a
 8005194:	f000 fc14 	bl	80059c0 <__assert_func>
 8005198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800519c:	6006      	str	r6, [r0, #0]
 800519e:	60c6      	str	r6, [r0, #12]
 80051a0:	b13c      	cbz	r4, 80051b2 <_Bfree+0x3a>
 80051a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80051a4:	6862      	ldr	r2, [r4, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051ac:	6021      	str	r1, [r4, #0]
 80051ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80051b2:	bd70      	pop	{r4, r5, r6, pc}
 80051b4:	08008334 	.word	0x08008334
 80051b8:	0800834b 	.word	0x0800834b

080051bc <__multadd>:
 80051bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c0:	690d      	ldr	r5, [r1, #16]
 80051c2:	4607      	mov	r7, r0
 80051c4:	460c      	mov	r4, r1
 80051c6:	461e      	mov	r6, r3
 80051c8:	f101 0c14 	add.w	ip, r1, #20
 80051cc:	2000      	movs	r0, #0
 80051ce:	f8dc 3000 	ldr.w	r3, [ip]
 80051d2:	b299      	uxth	r1, r3
 80051d4:	fb02 6101 	mla	r1, r2, r1, r6
 80051d8:	0c1e      	lsrs	r6, r3, #16
 80051da:	0c0b      	lsrs	r3, r1, #16
 80051dc:	fb02 3306 	mla	r3, r2, r6, r3
 80051e0:	b289      	uxth	r1, r1
 80051e2:	3001      	adds	r0, #1
 80051e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80051e8:	4285      	cmp	r5, r0
 80051ea:	f84c 1b04 	str.w	r1, [ip], #4
 80051ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80051f2:	dcec      	bgt.n	80051ce <__multadd+0x12>
 80051f4:	b30e      	cbz	r6, 800523a <__multadd+0x7e>
 80051f6:	68a3      	ldr	r3, [r4, #8]
 80051f8:	42ab      	cmp	r3, r5
 80051fa:	dc19      	bgt.n	8005230 <__multadd+0x74>
 80051fc:	6861      	ldr	r1, [r4, #4]
 80051fe:	4638      	mov	r0, r7
 8005200:	3101      	adds	r1, #1
 8005202:	f7ff ff79 	bl	80050f8 <_Balloc>
 8005206:	4680      	mov	r8, r0
 8005208:	b928      	cbnz	r0, 8005216 <__multadd+0x5a>
 800520a:	4602      	mov	r2, r0
 800520c:	4b0c      	ldr	r3, [pc, #48]	; (8005240 <__multadd+0x84>)
 800520e:	480d      	ldr	r0, [pc, #52]	; (8005244 <__multadd+0x88>)
 8005210:	21b5      	movs	r1, #181	; 0xb5
 8005212:	f000 fbd5 	bl	80059c0 <__assert_func>
 8005216:	6922      	ldr	r2, [r4, #16]
 8005218:	3202      	adds	r2, #2
 800521a:	f104 010c 	add.w	r1, r4, #12
 800521e:	0092      	lsls	r2, r2, #2
 8005220:	300c      	adds	r0, #12
 8005222:	f001 fa81 	bl	8006728 <memcpy>
 8005226:	4621      	mov	r1, r4
 8005228:	4638      	mov	r0, r7
 800522a:	f7ff ffa5 	bl	8005178 <_Bfree>
 800522e:	4644      	mov	r4, r8
 8005230:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005234:	3501      	adds	r5, #1
 8005236:	615e      	str	r6, [r3, #20]
 8005238:	6125      	str	r5, [r4, #16]
 800523a:	4620      	mov	r0, r4
 800523c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005240:	080083a7 	.word	0x080083a7
 8005244:	0800834b 	.word	0x0800834b

08005248 <__hi0bits>:
 8005248:	0c03      	lsrs	r3, r0, #16
 800524a:	041b      	lsls	r3, r3, #16
 800524c:	b9d3      	cbnz	r3, 8005284 <__hi0bits+0x3c>
 800524e:	0400      	lsls	r0, r0, #16
 8005250:	2310      	movs	r3, #16
 8005252:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005256:	bf04      	itt	eq
 8005258:	0200      	lsleq	r0, r0, #8
 800525a:	3308      	addeq	r3, #8
 800525c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005260:	bf04      	itt	eq
 8005262:	0100      	lsleq	r0, r0, #4
 8005264:	3304      	addeq	r3, #4
 8005266:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800526a:	bf04      	itt	eq
 800526c:	0080      	lsleq	r0, r0, #2
 800526e:	3302      	addeq	r3, #2
 8005270:	2800      	cmp	r0, #0
 8005272:	db05      	blt.n	8005280 <__hi0bits+0x38>
 8005274:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005278:	f103 0301 	add.w	r3, r3, #1
 800527c:	bf08      	it	eq
 800527e:	2320      	moveq	r3, #32
 8005280:	4618      	mov	r0, r3
 8005282:	4770      	bx	lr
 8005284:	2300      	movs	r3, #0
 8005286:	e7e4      	b.n	8005252 <__hi0bits+0xa>

08005288 <__lo0bits>:
 8005288:	6803      	ldr	r3, [r0, #0]
 800528a:	f013 0207 	ands.w	r2, r3, #7
 800528e:	4601      	mov	r1, r0
 8005290:	d00b      	beq.n	80052aa <__lo0bits+0x22>
 8005292:	07da      	lsls	r2, r3, #31
 8005294:	d423      	bmi.n	80052de <__lo0bits+0x56>
 8005296:	0798      	lsls	r0, r3, #30
 8005298:	bf49      	itett	mi
 800529a:	085b      	lsrmi	r3, r3, #1
 800529c:	089b      	lsrpl	r3, r3, #2
 800529e:	2001      	movmi	r0, #1
 80052a0:	600b      	strmi	r3, [r1, #0]
 80052a2:	bf5c      	itt	pl
 80052a4:	600b      	strpl	r3, [r1, #0]
 80052a6:	2002      	movpl	r0, #2
 80052a8:	4770      	bx	lr
 80052aa:	b298      	uxth	r0, r3
 80052ac:	b9a8      	cbnz	r0, 80052da <__lo0bits+0x52>
 80052ae:	0c1b      	lsrs	r3, r3, #16
 80052b0:	2010      	movs	r0, #16
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	b90a      	cbnz	r2, 80052ba <__lo0bits+0x32>
 80052b6:	3008      	adds	r0, #8
 80052b8:	0a1b      	lsrs	r3, r3, #8
 80052ba:	071a      	lsls	r2, r3, #28
 80052bc:	bf04      	itt	eq
 80052be:	091b      	lsreq	r3, r3, #4
 80052c0:	3004      	addeq	r0, #4
 80052c2:	079a      	lsls	r2, r3, #30
 80052c4:	bf04      	itt	eq
 80052c6:	089b      	lsreq	r3, r3, #2
 80052c8:	3002      	addeq	r0, #2
 80052ca:	07da      	lsls	r2, r3, #31
 80052cc:	d403      	bmi.n	80052d6 <__lo0bits+0x4e>
 80052ce:	085b      	lsrs	r3, r3, #1
 80052d0:	f100 0001 	add.w	r0, r0, #1
 80052d4:	d005      	beq.n	80052e2 <__lo0bits+0x5a>
 80052d6:	600b      	str	r3, [r1, #0]
 80052d8:	4770      	bx	lr
 80052da:	4610      	mov	r0, r2
 80052dc:	e7e9      	b.n	80052b2 <__lo0bits+0x2a>
 80052de:	2000      	movs	r0, #0
 80052e0:	4770      	bx	lr
 80052e2:	2020      	movs	r0, #32
 80052e4:	4770      	bx	lr
	...

080052e8 <__i2b>:
 80052e8:	b510      	push	{r4, lr}
 80052ea:	460c      	mov	r4, r1
 80052ec:	2101      	movs	r1, #1
 80052ee:	f7ff ff03 	bl	80050f8 <_Balloc>
 80052f2:	4602      	mov	r2, r0
 80052f4:	b928      	cbnz	r0, 8005302 <__i2b+0x1a>
 80052f6:	4b05      	ldr	r3, [pc, #20]	; (800530c <__i2b+0x24>)
 80052f8:	4805      	ldr	r0, [pc, #20]	; (8005310 <__i2b+0x28>)
 80052fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80052fe:	f000 fb5f 	bl	80059c0 <__assert_func>
 8005302:	2301      	movs	r3, #1
 8005304:	6144      	str	r4, [r0, #20]
 8005306:	6103      	str	r3, [r0, #16]
 8005308:	bd10      	pop	{r4, pc}
 800530a:	bf00      	nop
 800530c:	080083a7 	.word	0x080083a7
 8005310:	0800834b 	.word	0x0800834b

08005314 <__multiply>:
 8005314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005318:	4691      	mov	r9, r2
 800531a:	690a      	ldr	r2, [r1, #16]
 800531c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005320:	429a      	cmp	r2, r3
 8005322:	bfb8      	it	lt
 8005324:	460b      	movlt	r3, r1
 8005326:	460c      	mov	r4, r1
 8005328:	bfbc      	itt	lt
 800532a:	464c      	movlt	r4, r9
 800532c:	4699      	movlt	r9, r3
 800532e:	6927      	ldr	r7, [r4, #16]
 8005330:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005334:	68a3      	ldr	r3, [r4, #8]
 8005336:	6861      	ldr	r1, [r4, #4]
 8005338:	eb07 060a 	add.w	r6, r7, sl
 800533c:	42b3      	cmp	r3, r6
 800533e:	b085      	sub	sp, #20
 8005340:	bfb8      	it	lt
 8005342:	3101      	addlt	r1, #1
 8005344:	f7ff fed8 	bl	80050f8 <_Balloc>
 8005348:	b930      	cbnz	r0, 8005358 <__multiply+0x44>
 800534a:	4602      	mov	r2, r0
 800534c:	4b44      	ldr	r3, [pc, #272]	; (8005460 <__multiply+0x14c>)
 800534e:	4845      	ldr	r0, [pc, #276]	; (8005464 <__multiply+0x150>)
 8005350:	f240 115d 	movw	r1, #349	; 0x15d
 8005354:	f000 fb34 	bl	80059c0 <__assert_func>
 8005358:	f100 0514 	add.w	r5, r0, #20
 800535c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005360:	462b      	mov	r3, r5
 8005362:	2200      	movs	r2, #0
 8005364:	4543      	cmp	r3, r8
 8005366:	d321      	bcc.n	80053ac <__multiply+0x98>
 8005368:	f104 0314 	add.w	r3, r4, #20
 800536c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005370:	f109 0314 	add.w	r3, r9, #20
 8005374:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005378:	9202      	str	r2, [sp, #8]
 800537a:	1b3a      	subs	r2, r7, r4
 800537c:	3a15      	subs	r2, #21
 800537e:	f022 0203 	bic.w	r2, r2, #3
 8005382:	3204      	adds	r2, #4
 8005384:	f104 0115 	add.w	r1, r4, #21
 8005388:	428f      	cmp	r7, r1
 800538a:	bf38      	it	cc
 800538c:	2204      	movcc	r2, #4
 800538e:	9201      	str	r2, [sp, #4]
 8005390:	9a02      	ldr	r2, [sp, #8]
 8005392:	9303      	str	r3, [sp, #12]
 8005394:	429a      	cmp	r2, r3
 8005396:	d80c      	bhi.n	80053b2 <__multiply+0x9e>
 8005398:	2e00      	cmp	r6, #0
 800539a:	dd03      	ble.n	80053a4 <__multiply+0x90>
 800539c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d05a      	beq.n	800545a <__multiply+0x146>
 80053a4:	6106      	str	r6, [r0, #16]
 80053a6:	b005      	add	sp, #20
 80053a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ac:	f843 2b04 	str.w	r2, [r3], #4
 80053b0:	e7d8      	b.n	8005364 <__multiply+0x50>
 80053b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80053b6:	f1ba 0f00 	cmp.w	sl, #0
 80053ba:	d024      	beq.n	8005406 <__multiply+0xf2>
 80053bc:	f104 0e14 	add.w	lr, r4, #20
 80053c0:	46a9      	mov	r9, r5
 80053c2:	f04f 0c00 	mov.w	ip, #0
 80053c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80053ca:	f8d9 1000 	ldr.w	r1, [r9]
 80053ce:	fa1f fb82 	uxth.w	fp, r2
 80053d2:	b289      	uxth	r1, r1
 80053d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80053d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80053dc:	f8d9 2000 	ldr.w	r2, [r9]
 80053e0:	4461      	add	r1, ip
 80053e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80053e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80053ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80053ee:	b289      	uxth	r1, r1
 80053f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80053f4:	4577      	cmp	r7, lr
 80053f6:	f849 1b04 	str.w	r1, [r9], #4
 80053fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80053fe:	d8e2      	bhi.n	80053c6 <__multiply+0xb2>
 8005400:	9a01      	ldr	r2, [sp, #4]
 8005402:	f845 c002 	str.w	ip, [r5, r2]
 8005406:	9a03      	ldr	r2, [sp, #12]
 8005408:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800540c:	3304      	adds	r3, #4
 800540e:	f1b9 0f00 	cmp.w	r9, #0
 8005412:	d020      	beq.n	8005456 <__multiply+0x142>
 8005414:	6829      	ldr	r1, [r5, #0]
 8005416:	f104 0c14 	add.w	ip, r4, #20
 800541a:	46ae      	mov	lr, r5
 800541c:	f04f 0a00 	mov.w	sl, #0
 8005420:	f8bc b000 	ldrh.w	fp, [ip]
 8005424:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005428:	fb09 220b 	mla	r2, r9, fp, r2
 800542c:	4492      	add	sl, r2
 800542e:	b289      	uxth	r1, r1
 8005430:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005434:	f84e 1b04 	str.w	r1, [lr], #4
 8005438:	f85c 2b04 	ldr.w	r2, [ip], #4
 800543c:	f8be 1000 	ldrh.w	r1, [lr]
 8005440:	0c12      	lsrs	r2, r2, #16
 8005442:	fb09 1102 	mla	r1, r9, r2, r1
 8005446:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800544a:	4567      	cmp	r7, ip
 800544c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005450:	d8e6      	bhi.n	8005420 <__multiply+0x10c>
 8005452:	9a01      	ldr	r2, [sp, #4]
 8005454:	50a9      	str	r1, [r5, r2]
 8005456:	3504      	adds	r5, #4
 8005458:	e79a      	b.n	8005390 <__multiply+0x7c>
 800545a:	3e01      	subs	r6, #1
 800545c:	e79c      	b.n	8005398 <__multiply+0x84>
 800545e:	bf00      	nop
 8005460:	080083a7 	.word	0x080083a7
 8005464:	0800834b 	.word	0x0800834b

08005468 <__pow5mult>:
 8005468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800546c:	4615      	mov	r5, r2
 800546e:	f012 0203 	ands.w	r2, r2, #3
 8005472:	4606      	mov	r6, r0
 8005474:	460f      	mov	r7, r1
 8005476:	d007      	beq.n	8005488 <__pow5mult+0x20>
 8005478:	4c25      	ldr	r4, [pc, #148]	; (8005510 <__pow5mult+0xa8>)
 800547a:	3a01      	subs	r2, #1
 800547c:	2300      	movs	r3, #0
 800547e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005482:	f7ff fe9b 	bl	80051bc <__multadd>
 8005486:	4607      	mov	r7, r0
 8005488:	10ad      	asrs	r5, r5, #2
 800548a:	d03d      	beq.n	8005508 <__pow5mult+0xa0>
 800548c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800548e:	b97c      	cbnz	r4, 80054b0 <__pow5mult+0x48>
 8005490:	2010      	movs	r0, #16
 8005492:	f001 f941 	bl	8006718 <malloc>
 8005496:	4602      	mov	r2, r0
 8005498:	6270      	str	r0, [r6, #36]	; 0x24
 800549a:	b928      	cbnz	r0, 80054a8 <__pow5mult+0x40>
 800549c:	4b1d      	ldr	r3, [pc, #116]	; (8005514 <__pow5mult+0xac>)
 800549e:	481e      	ldr	r0, [pc, #120]	; (8005518 <__pow5mult+0xb0>)
 80054a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80054a4:	f000 fa8c 	bl	80059c0 <__assert_func>
 80054a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80054ac:	6004      	str	r4, [r0, #0]
 80054ae:	60c4      	str	r4, [r0, #12]
 80054b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80054b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80054b8:	b94c      	cbnz	r4, 80054ce <__pow5mult+0x66>
 80054ba:	f240 2171 	movw	r1, #625	; 0x271
 80054be:	4630      	mov	r0, r6
 80054c0:	f7ff ff12 	bl	80052e8 <__i2b>
 80054c4:	2300      	movs	r3, #0
 80054c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80054ca:	4604      	mov	r4, r0
 80054cc:	6003      	str	r3, [r0, #0]
 80054ce:	f04f 0900 	mov.w	r9, #0
 80054d2:	07eb      	lsls	r3, r5, #31
 80054d4:	d50a      	bpl.n	80054ec <__pow5mult+0x84>
 80054d6:	4639      	mov	r1, r7
 80054d8:	4622      	mov	r2, r4
 80054da:	4630      	mov	r0, r6
 80054dc:	f7ff ff1a 	bl	8005314 <__multiply>
 80054e0:	4639      	mov	r1, r7
 80054e2:	4680      	mov	r8, r0
 80054e4:	4630      	mov	r0, r6
 80054e6:	f7ff fe47 	bl	8005178 <_Bfree>
 80054ea:	4647      	mov	r7, r8
 80054ec:	106d      	asrs	r5, r5, #1
 80054ee:	d00b      	beq.n	8005508 <__pow5mult+0xa0>
 80054f0:	6820      	ldr	r0, [r4, #0]
 80054f2:	b938      	cbnz	r0, 8005504 <__pow5mult+0x9c>
 80054f4:	4622      	mov	r2, r4
 80054f6:	4621      	mov	r1, r4
 80054f8:	4630      	mov	r0, r6
 80054fa:	f7ff ff0b 	bl	8005314 <__multiply>
 80054fe:	6020      	str	r0, [r4, #0]
 8005500:	f8c0 9000 	str.w	r9, [r0]
 8005504:	4604      	mov	r4, r0
 8005506:	e7e4      	b.n	80054d2 <__pow5mult+0x6a>
 8005508:	4638      	mov	r0, r7
 800550a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800550e:	bf00      	nop
 8005510:	080084a8 	.word	0x080084a8
 8005514:	08008334 	.word	0x08008334
 8005518:	0800834b 	.word	0x0800834b

0800551c <__lshift>:
 800551c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005520:	460c      	mov	r4, r1
 8005522:	6849      	ldr	r1, [r1, #4]
 8005524:	6923      	ldr	r3, [r4, #16]
 8005526:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800552a:	68a3      	ldr	r3, [r4, #8]
 800552c:	4607      	mov	r7, r0
 800552e:	4691      	mov	r9, r2
 8005530:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005534:	f108 0601 	add.w	r6, r8, #1
 8005538:	42b3      	cmp	r3, r6
 800553a:	db0b      	blt.n	8005554 <__lshift+0x38>
 800553c:	4638      	mov	r0, r7
 800553e:	f7ff fddb 	bl	80050f8 <_Balloc>
 8005542:	4605      	mov	r5, r0
 8005544:	b948      	cbnz	r0, 800555a <__lshift+0x3e>
 8005546:	4602      	mov	r2, r0
 8005548:	4b2a      	ldr	r3, [pc, #168]	; (80055f4 <__lshift+0xd8>)
 800554a:	482b      	ldr	r0, [pc, #172]	; (80055f8 <__lshift+0xdc>)
 800554c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005550:	f000 fa36 	bl	80059c0 <__assert_func>
 8005554:	3101      	adds	r1, #1
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	e7ee      	b.n	8005538 <__lshift+0x1c>
 800555a:	2300      	movs	r3, #0
 800555c:	f100 0114 	add.w	r1, r0, #20
 8005560:	f100 0210 	add.w	r2, r0, #16
 8005564:	4618      	mov	r0, r3
 8005566:	4553      	cmp	r3, sl
 8005568:	db37      	blt.n	80055da <__lshift+0xbe>
 800556a:	6920      	ldr	r0, [r4, #16]
 800556c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005570:	f104 0314 	add.w	r3, r4, #20
 8005574:	f019 091f 	ands.w	r9, r9, #31
 8005578:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800557c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005580:	d02f      	beq.n	80055e2 <__lshift+0xc6>
 8005582:	f1c9 0e20 	rsb	lr, r9, #32
 8005586:	468a      	mov	sl, r1
 8005588:	f04f 0c00 	mov.w	ip, #0
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	fa02 f209 	lsl.w	r2, r2, r9
 8005592:	ea42 020c 	orr.w	r2, r2, ip
 8005596:	f84a 2b04 	str.w	r2, [sl], #4
 800559a:	f853 2b04 	ldr.w	r2, [r3], #4
 800559e:	4298      	cmp	r0, r3
 80055a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80055a4:	d8f2      	bhi.n	800558c <__lshift+0x70>
 80055a6:	1b03      	subs	r3, r0, r4
 80055a8:	3b15      	subs	r3, #21
 80055aa:	f023 0303 	bic.w	r3, r3, #3
 80055ae:	3304      	adds	r3, #4
 80055b0:	f104 0215 	add.w	r2, r4, #21
 80055b4:	4290      	cmp	r0, r2
 80055b6:	bf38      	it	cc
 80055b8:	2304      	movcc	r3, #4
 80055ba:	f841 c003 	str.w	ip, [r1, r3]
 80055be:	f1bc 0f00 	cmp.w	ip, #0
 80055c2:	d001      	beq.n	80055c8 <__lshift+0xac>
 80055c4:	f108 0602 	add.w	r6, r8, #2
 80055c8:	3e01      	subs	r6, #1
 80055ca:	4638      	mov	r0, r7
 80055cc:	612e      	str	r6, [r5, #16]
 80055ce:	4621      	mov	r1, r4
 80055d0:	f7ff fdd2 	bl	8005178 <_Bfree>
 80055d4:	4628      	mov	r0, r5
 80055d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055da:	f842 0f04 	str.w	r0, [r2, #4]!
 80055de:	3301      	adds	r3, #1
 80055e0:	e7c1      	b.n	8005566 <__lshift+0x4a>
 80055e2:	3904      	subs	r1, #4
 80055e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80055e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80055ec:	4298      	cmp	r0, r3
 80055ee:	d8f9      	bhi.n	80055e4 <__lshift+0xc8>
 80055f0:	e7ea      	b.n	80055c8 <__lshift+0xac>
 80055f2:	bf00      	nop
 80055f4:	080083a7 	.word	0x080083a7
 80055f8:	0800834b 	.word	0x0800834b

080055fc <__mcmp>:
 80055fc:	b530      	push	{r4, r5, lr}
 80055fe:	6902      	ldr	r2, [r0, #16]
 8005600:	690c      	ldr	r4, [r1, #16]
 8005602:	1b12      	subs	r2, r2, r4
 8005604:	d10e      	bne.n	8005624 <__mcmp+0x28>
 8005606:	f100 0314 	add.w	r3, r0, #20
 800560a:	3114      	adds	r1, #20
 800560c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005610:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005614:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005618:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800561c:	42a5      	cmp	r5, r4
 800561e:	d003      	beq.n	8005628 <__mcmp+0x2c>
 8005620:	d305      	bcc.n	800562e <__mcmp+0x32>
 8005622:	2201      	movs	r2, #1
 8005624:	4610      	mov	r0, r2
 8005626:	bd30      	pop	{r4, r5, pc}
 8005628:	4283      	cmp	r3, r0
 800562a:	d3f3      	bcc.n	8005614 <__mcmp+0x18>
 800562c:	e7fa      	b.n	8005624 <__mcmp+0x28>
 800562e:	f04f 32ff 	mov.w	r2, #4294967295
 8005632:	e7f7      	b.n	8005624 <__mcmp+0x28>

08005634 <__mdiff>:
 8005634:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005638:	460c      	mov	r4, r1
 800563a:	4606      	mov	r6, r0
 800563c:	4611      	mov	r1, r2
 800563e:	4620      	mov	r0, r4
 8005640:	4690      	mov	r8, r2
 8005642:	f7ff ffdb 	bl	80055fc <__mcmp>
 8005646:	1e05      	subs	r5, r0, #0
 8005648:	d110      	bne.n	800566c <__mdiff+0x38>
 800564a:	4629      	mov	r1, r5
 800564c:	4630      	mov	r0, r6
 800564e:	f7ff fd53 	bl	80050f8 <_Balloc>
 8005652:	b930      	cbnz	r0, 8005662 <__mdiff+0x2e>
 8005654:	4b3a      	ldr	r3, [pc, #232]	; (8005740 <__mdiff+0x10c>)
 8005656:	4602      	mov	r2, r0
 8005658:	f240 2132 	movw	r1, #562	; 0x232
 800565c:	4839      	ldr	r0, [pc, #228]	; (8005744 <__mdiff+0x110>)
 800565e:	f000 f9af 	bl	80059c0 <__assert_func>
 8005662:	2301      	movs	r3, #1
 8005664:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005668:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800566c:	bfa4      	itt	ge
 800566e:	4643      	movge	r3, r8
 8005670:	46a0      	movge	r8, r4
 8005672:	4630      	mov	r0, r6
 8005674:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005678:	bfa6      	itte	ge
 800567a:	461c      	movge	r4, r3
 800567c:	2500      	movge	r5, #0
 800567e:	2501      	movlt	r5, #1
 8005680:	f7ff fd3a 	bl	80050f8 <_Balloc>
 8005684:	b920      	cbnz	r0, 8005690 <__mdiff+0x5c>
 8005686:	4b2e      	ldr	r3, [pc, #184]	; (8005740 <__mdiff+0x10c>)
 8005688:	4602      	mov	r2, r0
 800568a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800568e:	e7e5      	b.n	800565c <__mdiff+0x28>
 8005690:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005694:	6926      	ldr	r6, [r4, #16]
 8005696:	60c5      	str	r5, [r0, #12]
 8005698:	f104 0914 	add.w	r9, r4, #20
 800569c:	f108 0514 	add.w	r5, r8, #20
 80056a0:	f100 0e14 	add.w	lr, r0, #20
 80056a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80056a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80056ac:	f108 0210 	add.w	r2, r8, #16
 80056b0:	46f2      	mov	sl, lr
 80056b2:	2100      	movs	r1, #0
 80056b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80056b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80056bc:	fa1f f883 	uxth.w	r8, r3
 80056c0:	fa11 f18b 	uxtah	r1, r1, fp
 80056c4:	0c1b      	lsrs	r3, r3, #16
 80056c6:	eba1 0808 	sub.w	r8, r1, r8
 80056ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80056ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80056d2:	fa1f f888 	uxth.w	r8, r8
 80056d6:	1419      	asrs	r1, r3, #16
 80056d8:	454e      	cmp	r6, r9
 80056da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80056de:	f84a 3b04 	str.w	r3, [sl], #4
 80056e2:	d8e7      	bhi.n	80056b4 <__mdiff+0x80>
 80056e4:	1b33      	subs	r3, r6, r4
 80056e6:	3b15      	subs	r3, #21
 80056e8:	f023 0303 	bic.w	r3, r3, #3
 80056ec:	3304      	adds	r3, #4
 80056ee:	3415      	adds	r4, #21
 80056f0:	42a6      	cmp	r6, r4
 80056f2:	bf38      	it	cc
 80056f4:	2304      	movcc	r3, #4
 80056f6:	441d      	add	r5, r3
 80056f8:	4473      	add	r3, lr
 80056fa:	469e      	mov	lr, r3
 80056fc:	462e      	mov	r6, r5
 80056fe:	4566      	cmp	r6, ip
 8005700:	d30e      	bcc.n	8005720 <__mdiff+0xec>
 8005702:	f10c 0203 	add.w	r2, ip, #3
 8005706:	1b52      	subs	r2, r2, r5
 8005708:	f022 0203 	bic.w	r2, r2, #3
 800570c:	3d03      	subs	r5, #3
 800570e:	45ac      	cmp	ip, r5
 8005710:	bf38      	it	cc
 8005712:	2200      	movcc	r2, #0
 8005714:	441a      	add	r2, r3
 8005716:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800571a:	b17b      	cbz	r3, 800573c <__mdiff+0x108>
 800571c:	6107      	str	r7, [r0, #16]
 800571e:	e7a3      	b.n	8005668 <__mdiff+0x34>
 8005720:	f856 8b04 	ldr.w	r8, [r6], #4
 8005724:	fa11 f288 	uxtah	r2, r1, r8
 8005728:	1414      	asrs	r4, r2, #16
 800572a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800572e:	b292      	uxth	r2, r2
 8005730:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005734:	f84e 2b04 	str.w	r2, [lr], #4
 8005738:	1421      	asrs	r1, r4, #16
 800573a:	e7e0      	b.n	80056fe <__mdiff+0xca>
 800573c:	3f01      	subs	r7, #1
 800573e:	e7ea      	b.n	8005716 <__mdiff+0xe2>
 8005740:	080083a7 	.word	0x080083a7
 8005744:	0800834b 	.word	0x0800834b

08005748 <__d2b>:
 8005748:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800574c:	4689      	mov	r9, r1
 800574e:	2101      	movs	r1, #1
 8005750:	ec57 6b10 	vmov	r6, r7, d0
 8005754:	4690      	mov	r8, r2
 8005756:	f7ff fccf 	bl	80050f8 <_Balloc>
 800575a:	4604      	mov	r4, r0
 800575c:	b930      	cbnz	r0, 800576c <__d2b+0x24>
 800575e:	4602      	mov	r2, r0
 8005760:	4b25      	ldr	r3, [pc, #148]	; (80057f8 <__d2b+0xb0>)
 8005762:	4826      	ldr	r0, [pc, #152]	; (80057fc <__d2b+0xb4>)
 8005764:	f240 310a 	movw	r1, #778	; 0x30a
 8005768:	f000 f92a 	bl	80059c0 <__assert_func>
 800576c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005770:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005774:	bb35      	cbnz	r5, 80057c4 <__d2b+0x7c>
 8005776:	2e00      	cmp	r6, #0
 8005778:	9301      	str	r3, [sp, #4]
 800577a:	d028      	beq.n	80057ce <__d2b+0x86>
 800577c:	4668      	mov	r0, sp
 800577e:	9600      	str	r6, [sp, #0]
 8005780:	f7ff fd82 	bl	8005288 <__lo0bits>
 8005784:	9900      	ldr	r1, [sp, #0]
 8005786:	b300      	cbz	r0, 80057ca <__d2b+0x82>
 8005788:	9a01      	ldr	r2, [sp, #4]
 800578a:	f1c0 0320 	rsb	r3, r0, #32
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	430b      	orrs	r3, r1
 8005794:	40c2      	lsrs	r2, r0
 8005796:	6163      	str	r3, [r4, #20]
 8005798:	9201      	str	r2, [sp, #4]
 800579a:	9b01      	ldr	r3, [sp, #4]
 800579c:	61a3      	str	r3, [r4, #24]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bf14      	ite	ne
 80057a2:	2202      	movne	r2, #2
 80057a4:	2201      	moveq	r2, #1
 80057a6:	6122      	str	r2, [r4, #16]
 80057a8:	b1d5      	cbz	r5, 80057e0 <__d2b+0x98>
 80057aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80057ae:	4405      	add	r5, r0
 80057b0:	f8c9 5000 	str.w	r5, [r9]
 80057b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80057b8:	f8c8 0000 	str.w	r0, [r8]
 80057bc:	4620      	mov	r0, r4
 80057be:	b003      	add	sp, #12
 80057c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057c8:	e7d5      	b.n	8005776 <__d2b+0x2e>
 80057ca:	6161      	str	r1, [r4, #20]
 80057cc:	e7e5      	b.n	800579a <__d2b+0x52>
 80057ce:	a801      	add	r0, sp, #4
 80057d0:	f7ff fd5a 	bl	8005288 <__lo0bits>
 80057d4:	9b01      	ldr	r3, [sp, #4]
 80057d6:	6163      	str	r3, [r4, #20]
 80057d8:	2201      	movs	r2, #1
 80057da:	6122      	str	r2, [r4, #16]
 80057dc:	3020      	adds	r0, #32
 80057de:	e7e3      	b.n	80057a8 <__d2b+0x60>
 80057e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80057e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80057e8:	f8c9 0000 	str.w	r0, [r9]
 80057ec:	6918      	ldr	r0, [r3, #16]
 80057ee:	f7ff fd2b 	bl	8005248 <__hi0bits>
 80057f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80057f6:	e7df      	b.n	80057b8 <__d2b+0x70>
 80057f8:	080083a7 	.word	0x080083a7
 80057fc:	0800834b 	.word	0x0800834b

08005800 <_mprec_log10>:
 8005800:	2817      	cmp	r0, #23
 8005802:	b5d0      	push	{r4, r6, r7, lr}
 8005804:	4604      	mov	r4, r0
 8005806:	dc07      	bgt.n	8005818 <_mprec_log10+0x18>
 8005808:	4809      	ldr	r0, [pc, #36]	; (8005830 <_mprec_log10+0x30>)
 800580a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800580e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005812:	ec41 0b10 	vmov	d0, r0, r1
 8005816:	bdd0      	pop	{r4, r6, r7, pc}
 8005818:	4906      	ldr	r1, [pc, #24]	; (8005834 <_mprec_log10+0x34>)
 800581a:	4f07      	ldr	r7, [pc, #28]	; (8005838 <_mprec_log10+0x38>)
 800581c:	2000      	movs	r0, #0
 800581e:	2600      	movs	r6, #0
 8005820:	4632      	mov	r2, r6
 8005822:	463b      	mov	r3, r7
 8005824:	f7fa fee0 	bl	80005e8 <__aeabi_dmul>
 8005828:	3c01      	subs	r4, #1
 800582a:	d1f9      	bne.n	8005820 <_mprec_log10+0x20>
 800582c:	e7f1      	b.n	8005812 <_mprec_log10+0x12>
 800582e:	bf00      	nop
 8005830:	080083e0 	.word	0x080083e0
 8005834:	3ff00000 	.word	0x3ff00000
 8005838:	40240000 	.word	0x40240000

0800583c <_calloc_r>:
 800583c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800583e:	fba1 2402 	umull	r2, r4, r1, r2
 8005842:	b94c      	cbnz	r4, 8005858 <_calloc_r+0x1c>
 8005844:	4611      	mov	r1, r2
 8005846:	9201      	str	r2, [sp, #4]
 8005848:	f000 f82e 	bl	80058a8 <_malloc_r>
 800584c:	9a01      	ldr	r2, [sp, #4]
 800584e:	4605      	mov	r5, r0
 8005850:	b930      	cbnz	r0, 8005860 <_calloc_r+0x24>
 8005852:	4628      	mov	r0, r5
 8005854:	b003      	add	sp, #12
 8005856:	bd30      	pop	{r4, r5, pc}
 8005858:	220c      	movs	r2, #12
 800585a:	6002      	str	r2, [r0, #0]
 800585c:	2500      	movs	r5, #0
 800585e:	e7f8      	b.n	8005852 <_calloc_r+0x16>
 8005860:	4621      	mov	r1, r4
 8005862:	f7ff fb07 	bl	8004e74 <memset>
 8005866:	e7f4      	b.n	8005852 <_calloc_r+0x16>

08005868 <sbrk_aligned>:
 8005868:	b570      	push	{r4, r5, r6, lr}
 800586a:	4e0e      	ldr	r6, [pc, #56]	; (80058a4 <sbrk_aligned+0x3c>)
 800586c:	460c      	mov	r4, r1
 800586e:	6831      	ldr	r1, [r6, #0]
 8005870:	4605      	mov	r5, r0
 8005872:	b911      	cbnz	r1, 800587a <sbrk_aligned+0x12>
 8005874:	f000 f88c 	bl	8005990 <_sbrk_r>
 8005878:	6030      	str	r0, [r6, #0]
 800587a:	4621      	mov	r1, r4
 800587c:	4628      	mov	r0, r5
 800587e:	f000 f887 	bl	8005990 <_sbrk_r>
 8005882:	1c43      	adds	r3, r0, #1
 8005884:	d00a      	beq.n	800589c <sbrk_aligned+0x34>
 8005886:	1cc4      	adds	r4, r0, #3
 8005888:	f024 0403 	bic.w	r4, r4, #3
 800588c:	42a0      	cmp	r0, r4
 800588e:	d007      	beq.n	80058a0 <sbrk_aligned+0x38>
 8005890:	1a21      	subs	r1, r4, r0
 8005892:	4628      	mov	r0, r5
 8005894:	f000 f87c 	bl	8005990 <_sbrk_r>
 8005898:	3001      	adds	r0, #1
 800589a:	d101      	bne.n	80058a0 <sbrk_aligned+0x38>
 800589c:	f04f 34ff 	mov.w	r4, #4294967295
 80058a0:	4620      	mov	r0, r4
 80058a2:	bd70      	pop	{r4, r5, r6, pc}
 80058a4:	20000554 	.word	0x20000554

080058a8 <_malloc_r>:
 80058a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ac:	1ccd      	adds	r5, r1, #3
 80058ae:	f025 0503 	bic.w	r5, r5, #3
 80058b2:	3508      	adds	r5, #8
 80058b4:	2d0c      	cmp	r5, #12
 80058b6:	bf38      	it	cc
 80058b8:	250c      	movcc	r5, #12
 80058ba:	2d00      	cmp	r5, #0
 80058bc:	4607      	mov	r7, r0
 80058be:	db01      	blt.n	80058c4 <_malloc_r+0x1c>
 80058c0:	42a9      	cmp	r1, r5
 80058c2:	d905      	bls.n	80058d0 <_malloc_r+0x28>
 80058c4:	230c      	movs	r3, #12
 80058c6:	603b      	str	r3, [r7, #0]
 80058c8:	2600      	movs	r6, #0
 80058ca:	4630      	mov	r0, r6
 80058cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058d0:	4e2e      	ldr	r6, [pc, #184]	; (800598c <_malloc_r+0xe4>)
 80058d2:	f000 ff37 	bl	8006744 <__malloc_lock>
 80058d6:	6833      	ldr	r3, [r6, #0]
 80058d8:	461c      	mov	r4, r3
 80058da:	bb34      	cbnz	r4, 800592a <_malloc_r+0x82>
 80058dc:	4629      	mov	r1, r5
 80058de:	4638      	mov	r0, r7
 80058e0:	f7ff ffc2 	bl	8005868 <sbrk_aligned>
 80058e4:	1c43      	adds	r3, r0, #1
 80058e6:	4604      	mov	r4, r0
 80058e8:	d14d      	bne.n	8005986 <_malloc_r+0xde>
 80058ea:	6834      	ldr	r4, [r6, #0]
 80058ec:	4626      	mov	r6, r4
 80058ee:	2e00      	cmp	r6, #0
 80058f0:	d140      	bne.n	8005974 <_malloc_r+0xcc>
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	4631      	mov	r1, r6
 80058f6:	4638      	mov	r0, r7
 80058f8:	eb04 0803 	add.w	r8, r4, r3
 80058fc:	f000 f848 	bl	8005990 <_sbrk_r>
 8005900:	4580      	cmp	r8, r0
 8005902:	d13a      	bne.n	800597a <_malloc_r+0xd2>
 8005904:	6821      	ldr	r1, [r4, #0]
 8005906:	3503      	adds	r5, #3
 8005908:	1a6d      	subs	r5, r5, r1
 800590a:	f025 0503 	bic.w	r5, r5, #3
 800590e:	3508      	adds	r5, #8
 8005910:	2d0c      	cmp	r5, #12
 8005912:	bf38      	it	cc
 8005914:	250c      	movcc	r5, #12
 8005916:	4629      	mov	r1, r5
 8005918:	4638      	mov	r0, r7
 800591a:	f7ff ffa5 	bl	8005868 <sbrk_aligned>
 800591e:	3001      	adds	r0, #1
 8005920:	d02b      	beq.n	800597a <_malloc_r+0xd2>
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	442b      	add	r3, r5
 8005926:	6023      	str	r3, [r4, #0]
 8005928:	e00e      	b.n	8005948 <_malloc_r+0xa0>
 800592a:	6822      	ldr	r2, [r4, #0]
 800592c:	1b52      	subs	r2, r2, r5
 800592e:	d41e      	bmi.n	800596e <_malloc_r+0xc6>
 8005930:	2a0b      	cmp	r2, #11
 8005932:	d916      	bls.n	8005962 <_malloc_r+0xba>
 8005934:	1961      	adds	r1, r4, r5
 8005936:	42a3      	cmp	r3, r4
 8005938:	6025      	str	r5, [r4, #0]
 800593a:	bf18      	it	ne
 800593c:	6059      	strne	r1, [r3, #4]
 800593e:	6863      	ldr	r3, [r4, #4]
 8005940:	bf08      	it	eq
 8005942:	6031      	streq	r1, [r6, #0]
 8005944:	5162      	str	r2, [r4, r5]
 8005946:	604b      	str	r3, [r1, #4]
 8005948:	4638      	mov	r0, r7
 800594a:	f104 060b 	add.w	r6, r4, #11
 800594e:	f000 feff 	bl	8006750 <__malloc_unlock>
 8005952:	f026 0607 	bic.w	r6, r6, #7
 8005956:	1d23      	adds	r3, r4, #4
 8005958:	1af2      	subs	r2, r6, r3
 800595a:	d0b6      	beq.n	80058ca <_malloc_r+0x22>
 800595c:	1b9b      	subs	r3, r3, r6
 800595e:	50a3      	str	r3, [r4, r2]
 8005960:	e7b3      	b.n	80058ca <_malloc_r+0x22>
 8005962:	6862      	ldr	r2, [r4, #4]
 8005964:	42a3      	cmp	r3, r4
 8005966:	bf0c      	ite	eq
 8005968:	6032      	streq	r2, [r6, #0]
 800596a:	605a      	strne	r2, [r3, #4]
 800596c:	e7ec      	b.n	8005948 <_malloc_r+0xa0>
 800596e:	4623      	mov	r3, r4
 8005970:	6864      	ldr	r4, [r4, #4]
 8005972:	e7b2      	b.n	80058da <_malloc_r+0x32>
 8005974:	4634      	mov	r4, r6
 8005976:	6876      	ldr	r6, [r6, #4]
 8005978:	e7b9      	b.n	80058ee <_malloc_r+0x46>
 800597a:	230c      	movs	r3, #12
 800597c:	603b      	str	r3, [r7, #0]
 800597e:	4638      	mov	r0, r7
 8005980:	f000 fee6 	bl	8006750 <__malloc_unlock>
 8005984:	e7a1      	b.n	80058ca <_malloc_r+0x22>
 8005986:	6025      	str	r5, [r4, #0]
 8005988:	e7de      	b.n	8005948 <_malloc_r+0xa0>
 800598a:	bf00      	nop
 800598c:	20000550 	.word	0x20000550

08005990 <_sbrk_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4d06      	ldr	r5, [pc, #24]	; (80059ac <_sbrk_r+0x1c>)
 8005994:	2300      	movs	r3, #0
 8005996:	4604      	mov	r4, r0
 8005998:	4608      	mov	r0, r1
 800599a:	602b      	str	r3, [r5, #0]
 800599c:	f7fb ff62 	bl	8001864 <_sbrk>
 80059a0:	1c43      	adds	r3, r0, #1
 80059a2:	d102      	bne.n	80059aa <_sbrk_r+0x1a>
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	b103      	cbz	r3, 80059aa <_sbrk_r+0x1a>
 80059a8:	6023      	str	r3, [r4, #0]
 80059aa:	bd38      	pop	{r3, r4, r5, pc}
 80059ac:	20000558 	.word	0x20000558

080059b0 <strcpy>:
 80059b0:	4603      	mov	r3, r0
 80059b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059b6:	f803 2b01 	strb.w	r2, [r3], #1
 80059ba:	2a00      	cmp	r2, #0
 80059bc:	d1f9      	bne.n	80059b2 <strcpy+0x2>
 80059be:	4770      	bx	lr

080059c0 <__assert_func>:
 80059c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059c2:	4614      	mov	r4, r2
 80059c4:	461a      	mov	r2, r3
 80059c6:	4b09      	ldr	r3, [pc, #36]	; (80059ec <__assert_func+0x2c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4605      	mov	r5, r0
 80059cc:	68d8      	ldr	r0, [r3, #12]
 80059ce:	b14c      	cbz	r4, 80059e4 <__assert_func+0x24>
 80059d0:	4b07      	ldr	r3, [pc, #28]	; (80059f0 <__assert_func+0x30>)
 80059d2:	9100      	str	r1, [sp, #0]
 80059d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80059d8:	4906      	ldr	r1, [pc, #24]	; (80059f4 <__assert_func+0x34>)
 80059da:	462b      	mov	r3, r5
 80059dc:	f000 fe8a 	bl	80066f4 <fiprintf>
 80059e0:	f001 fab6 	bl	8006f50 <abort>
 80059e4:	4b04      	ldr	r3, [pc, #16]	; (80059f8 <__assert_func+0x38>)
 80059e6:	461c      	mov	r4, r3
 80059e8:	e7f3      	b.n	80059d2 <__assert_func+0x12>
 80059ea:	bf00      	nop
 80059ec:	20000018 	.word	0x20000018
 80059f0:	080084b4 	.word	0x080084b4
 80059f4:	080084c1 	.word	0x080084c1
 80059f8:	080084ef 	.word	0x080084ef

080059fc <quorem>:
 80059fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a00:	6903      	ldr	r3, [r0, #16]
 8005a02:	690c      	ldr	r4, [r1, #16]
 8005a04:	42a3      	cmp	r3, r4
 8005a06:	4607      	mov	r7, r0
 8005a08:	f2c0 8081 	blt.w	8005b0e <quorem+0x112>
 8005a0c:	3c01      	subs	r4, #1
 8005a0e:	f101 0814 	add.w	r8, r1, #20
 8005a12:	f100 0514 	add.w	r5, r0, #20
 8005a16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a1a:	9301      	str	r3, [sp, #4]
 8005a1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a24:	3301      	adds	r3, #1
 8005a26:	429a      	cmp	r2, r3
 8005a28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005a2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a30:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a34:	d331      	bcc.n	8005a9a <quorem+0x9e>
 8005a36:	f04f 0e00 	mov.w	lr, #0
 8005a3a:	4640      	mov	r0, r8
 8005a3c:	46ac      	mov	ip, r5
 8005a3e:	46f2      	mov	sl, lr
 8005a40:	f850 2b04 	ldr.w	r2, [r0], #4
 8005a44:	b293      	uxth	r3, r2
 8005a46:	fb06 e303 	mla	r3, r6, r3, lr
 8005a4a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	ebaa 0303 	sub.w	r3, sl, r3
 8005a54:	f8dc a000 	ldr.w	sl, [ip]
 8005a58:	0c12      	lsrs	r2, r2, #16
 8005a5a:	fa13 f38a 	uxtah	r3, r3, sl
 8005a5e:	fb06 e202 	mla	r2, r6, r2, lr
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	9b00      	ldr	r3, [sp, #0]
 8005a66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a6a:	b292      	uxth	r2, r2
 8005a6c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005a70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a74:	f8bd 3000 	ldrh.w	r3, [sp]
 8005a78:	4581      	cmp	r9, r0
 8005a7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a7e:	f84c 3b04 	str.w	r3, [ip], #4
 8005a82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005a86:	d2db      	bcs.n	8005a40 <quorem+0x44>
 8005a88:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a8c:	b92b      	cbnz	r3, 8005a9a <quorem+0x9e>
 8005a8e:	9b01      	ldr	r3, [sp, #4]
 8005a90:	3b04      	subs	r3, #4
 8005a92:	429d      	cmp	r5, r3
 8005a94:	461a      	mov	r2, r3
 8005a96:	d32e      	bcc.n	8005af6 <quorem+0xfa>
 8005a98:	613c      	str	r4, [r7, #16]
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	f7ff fdae 	bl	80055fc <__mcmp>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	db24      	blt.n	8005aee <quorem+0xf2>
 8005aa4:	3601      	adds	r6, #1
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f04f 0c00 	mov.w	ip, #0
 8005aac:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ab0:	f8d0 e000 	ldr.w	lr, [r0]
 8005ab4:	b293      	uxth	r3, r2
 8005ab6:	ebac 0303 	sub.w	r3, ip, r3
 8005aba:	0c12      	lsrs	r2, r2, #16
 8005abc:	fa13 f38e 	uxtah	r3, r3, lr
 8005ac0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005ac4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ace:	45c1      	cmp	r9, r8
 8005ad0:	f840 3b04 	str.w	r3, [r0], #4
 8005ad4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ad8:	d2e8      	bcs.n	8005aac <quorem+0xb0>
 8005ada:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ade:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ae2:	b922      	cbnz	r2, 8005aee <quorem+0xf2>
 8005ae4:	3b04      	subs	r3, #4
 8005ae6:	429d      	cmp	r5, r3
 8005ae8:	461a      	mov	r2, r3
 8005aea:	d30a      	bcc.n	8005b02 <quorem+0x106>
 8005aec:	613c      	str	r4, [r7, #16]
 8005aee:	4630      	mov	r0, r6
 8005af0:	b003      	add	sp, #12
 8005af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af6:	6812      	ldr	r2, [r2, #0]
 8005af8:	3b04      	subs	r3, #4
 8005afa:	2a00      	cmp	r2, #0
 8005afc:	d1cc      	bne.n	8005a98 <quorem+0x9c>
 8005afe:	3c01      	subs	r4, #1
 8005b00:	e7c7      	b.n	8005a92 <quorem+0x96>
 8005b02:	6812      	ldr	r2, [r2, #0]
 8005b04:	3b04      	subs	r3, #4
 8005b06:	2a00      	cmp	r2, #0
 8005b08:	d1f0      	bne.n	8005aec <quorem+0xf0>
 8005b0a:	3c01      	subs	r4, #1
 8005b0c:	e7eb      	b.n	8005ae6 <quorem+0xea>
 8005b0e:	2000      	movs	r0, #0
 8005b10:	e7ee      	b.n	8005af0 <quorem+0xf4>
 8005b12:	0000      	movs	r0, r0
 8005b14:	0000      	movs	r0, r0
	...

08005b18 <_dtoa_r>:
 8005b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b1c:	ed2d 8b04 	vpush	{d8-d9}
 8005b20:	ec57 6b10 	vmov	r6, r7, d0
 8005b24:	b093      	sub	sp, #76	; 0x4c
 8005b26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005b28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005b2c:	9106      	str	r1, [sp, #24]
 8005b2e:	ee10 aa10 	vmov	sl, s0
 8005b32:	4604      	mov	r4, r0
 8005b34:	9209      	str	r2, [sp, #36]	; 0x24
 8005b36:	930c      	str	r3, [sp, #48]	; 0x30
 8005b38:	46bb      	mov	fp, r7
 8005b3a:	b975      	cbnz	r5, 8005b5a <_dtoa_r+0x42>
 8005b3c:	2010      	movs	r0, #16
 8005b3e:	f000 fdeb 	bl	8006718 <malloc>
 8005b42:	4602      	mov	r2, r0
 8005b44:	6260      	str	r0, [r4, #36]	; 0x24
 8005b46:	b920      	cbnz	r0, 8005b52 <_dtoa_r+0x3a>
 8005b48:	4ba7      	ldr	r3, [pc, #668]	; (8005de8 <_dtoa_r+0x2d0>)
 8005b4a:	21ea      	movs	r1, #234	; 0xea
 8005b4c:	48a7      	ldr	r0, [pc, #668]	; (8005dec <_dtoa_r+0x2d4>)
 8005b4e:	f7ff ff37 	bl	80059c0 <__assert_func>
 8005b52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b56:	6005      	str	r5, [r0, #0]
 8005b58:	60c5      	str	r5, [r0, #12]
 8005b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b5c:	6819      	ldr	r1, [r3, #0]
 8005b5e:	b151      	cbz	r1, 8005b76 <_dtoa_r+0x5e>
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	604a      	str	r2, [r1, #4]
 8005b64:	2301      	movs	r3, #1
 8005b66:	4093      	lsls	r3, r2
 8005b68:	608b      	str	r3, [r1, #8]
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	f7ff fb04 	bl	8005178 <_Bfree>
 8005b70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	1e3b      	subs	r3, r7, #0
 8005b78:	bfaa      	itet	ge
 8005b7a:	2300      	movge	r3, #0
 8005b7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005b80:	f8c8 3000 	strge.w	r3, [r8]
 8005b84:	4b9a      	ldr	r3, [pc, #616]	; (8005df0 <_dtoa_r+0x2d8>)
 8005b86:	bfbc      	itt	lt
 8005b88:	2201      	movlt	r2, #1
 8005b8a:	f8c8 2000 	strlt.w	r2, [r8]
 8005b8e:	ea33 030b 	bics.w	r3, r3, fp
 8005b92:	d11b      	bne.n	8005bcc <_dtoa_r+0xb4>
 8005b94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b96:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ba0:	4333      	orrs	r3, r6
 8005ba2:	f000 8592 	beq.w	80066ca <_dtoa_r+0xbb2>
 8005ba6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ba8:	b963      	cbnz	r3, 8005bc4 <_dtoa_r+0xac>
 8005baa:	4b92      	ldr	r3, [pc, #584]	; (8005df4 <_dtoa_r+0x2dc>)
 8005bac:	e022      	b.n	8005bf4 <_dtoa_r+0xdc>
 8005bae:	4b92      	ldr	r3, [pc, #584]	; (8005df8 <_dtoa_r+0x2e0>)
 8005bb0:	9301      	str	r3, [sp, #4]
 8005bb2:	3308      	adds	r3, #8
 8005bb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005bb6:	6013      	str	r3, [r2, #0]
 8005bb8:	9801      	ldr	r0, [sp, #4]
 8005bba:	b013      	add	sp, #76	; 0x4c
 8005bbc:	ecbd 8b04 	vpop	{d8-d9}
 8005bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc4:	4b8b      	ldr	r3, [pc, #556]	; (8005df4 <_dtoa_r+0x2dc>)
 8005bc6:	9301      	str	r3, [sp, #4]
 8005bc8:	3303      	adds	r3, #3
 8005bca:	e7f3      	b.n	8005bb4 <_dtoa_r+0x9c>
 8005bcc:	2200      	movs	r2, #0
 8005bce:	2300      	movs	r3, #0
 8005bd0:	4650      	mov	r0, sl
 8005bd2:	4659      	mov	r1, fp
 8005bd4:	f7fa ff70 	bl	8000ab8 <__aeabi_dcmpeq>
 8005bd8:	ec4b ab19 	vmov	d9, sl, fp
 8005bdc:	4680      	mov	r8, r0
 8005bde:	b158      	cbz	r0, 8005bf8 <_dtoa_r+0xe0>
 8005be0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005be2:	2301      	movs	r3, #1
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 856b 	beq.w	80066c4 <_dtoa_r+0xbac>
 8005bee:	4883      	ldr	r0, [pc, #524]	; (8005dfc <_dtoa_r+0x2e4>)
 8005bf0:	6018      	str	r0, [r3, #0]
 8005bf2:	1e43      	subs	r3, r0, #1
 8005bf4:	9301      	str	r3, [sp, #4]
 8005bf6:	e7df      	b.n	8005bb8 <_dtoa_r+0xa0>
 8005bf8:	ec4b ab10 	vmov	d0, sl, fp
 8005bfc:	aa10      	add	r2, sp, #64	; 0x40
 8005bfe:	a911      	add	r1, sp, #68	; 0x44
 8005c00:	4620      	mov	r0, r4
 8005c02:	f7ff fda1 	bl	8005748 <__d2b>
 8005c06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005c0a:	ee08 0a10 	vmov	s16, r0
 8005c0e:	2d00      	cmp	r5, #0
 8005c10:	f000 8084 	beq.w	8005d1c <_dtoa_r+0x204>
 8005c14:	ee19 3a90 	vmov	r3, s19
 8005c18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005c20:	4656      	mov	r6, sl
 8005c22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005c26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005c2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005c2e:	4b74      	ldr	r3, [pc, #464]	; (8005e00 <_dtoa_r+0x2e8>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	4630      	mov	r0, r6
 8005c34:	4639      	mov	r1, r7
 8005c36:	f7fa fb1f 	bl	8000278 <__aeabi_dsub>
 8005c3a:	a365      	add	r3, pc, #404	; (adr r3, 8005dd0 <_dtoa_r+0x2b8>)
 8005c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c40:	f7fa fcd2 	bl	80005e8 <__aeabi_dmul>
 8005c44:	a364      	add	r3, pc, #400	; (adr r3, 8005dd8 <_dtoa_r+0x2c0>)
 8005c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4a:	f7fa fb17 	bl	800027c <__adddf3>
 8005c4e:	4606      	mov	r6, r0
 8005c50:	4628      	mov	r0, r5
 8005c52:	460f      	mov	r7, r1
 8005c54:	f7fa fc5e 	bl	8000514 <__aeabi_i2d>
 8005c58:	a361      	add	r3, pc, #388	; (adr r3, 8005de0 <_dtoa_r+0x2c8>)
 8005c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5e:	f7fa fcc3 	bl	80005e8 <__aeabi_dmul>
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	4630      	mov	r0, r6
 8005c68:	4639      	mov	r1, r7
 8005c6a:	f7fa fb07 	bl	800027c <__adddf3>
 8005c6e:	4606      	mov	r6, r0
 8005c70:	460f      	mov	r7, r1
 8005c72:	f7fa ff53 	bl	8000b1c <__aeabi_d2iz>
 8005c76:	2200      	movs	r2, #0
 8005c78:	9000      	str	r0, [sp, #0]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	4639      	mov	r1, r7
 8005c80:	f7fa ff24 	bl	8000acc <__aeabi_dcmplt>
 8005c84:	b150      	cbz	r0, 8005c9c <_dtoa_r+0x184>
 8005c86:	9800      	ldr	r0, [sp, #0]
 8005c88:	f7fa fc44 	bl	8000514 <__aeabi_i2d>
 8005c8c:	4632      	mov	r2, r6
 8005c8e:	463b      	mov	r3, r7
 8005c90:	f7fa ff12 	bl	8000ab8 <__aeabi_dcmpeq>
 8005c94:	b910      	cbnz	r0, 8005c9c <_dtoa_r+0x184>
 8005c96:	9b00      	ldr	r3, [sp, #0]
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	9b00      	ldr	r3, [sp, #0]
 8005c9e:	2b16      	cmp	r3, #22
 8005ca0:	d85a      	bhi.n	8005d58 <_dtoa_r+0x240>
 8005ca2:	9a00      	ldr	r2, [sp, #0]
 8005ca4:	4b57      	ldr	r3, [pc, #348]	; (8005e04 <_dtoa_r+0x2ec>)
 8005ca6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cae:	ec51 0b19 	vmov	r0, r1, d9
 8005cb2:	f7fa ff0b 	bl	8000acc <__aeabi_dcmplt>
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	d050      	beq.n	8005d5c <_dtoa_r+0x244>
 8005cba:	9b00      	ldr	r3, [sp, #0]
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005cc6:	1b5d      	subs	r5, r3, r5
 8005cc8:	1e6b      	subs	r3, r5, #1
 8005cca:	9305      	str	r3, [sp, #20]
 8005ccc:	bf45      	ittet	mi
 8005cce:	f1c5 0301 	rsbmi	r3, r5, #1
 8005cd2:	9304      	strmi	r3, [sp, #16]
 8005cd4:	2300      	movpl	r3, #0
 8005cd6:	2300      	movmi	r3, #0
 8005cd8:	bf4c      	ite	mi
 8005cda:	9305      	strmi	r3, [sp, #20]
 8005cdc:	9304      	strpl	r3, [sp, #16]
 8005cde:	9b00      	ldr	r3, [sp, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	db3d      	blt.n	8005d60 <_dtoa_r+0x248>
 8005ce4:	9b05      	ldr	r3, [sp, #20]
 8005ce6:	9a00      	ldr	r2, [sp, #0]
 8005ce8:	920a      	str	r2, [sp, #40]	; 0x28
 8005cea:	4413      	add	r3, r2
 8005cec:	9305      	str	r3, [sp, #20]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	9307      	str	r3, [sp, #28]
 8005cf2:	9b06      	ldr	r3, [sp, #24]
 8005cf4:	2b09      	cmp	r3, #9
 8005cf6:	f200 8089 	bhi.w	8005e0c <_dtoa_r+0x2f4>
 8005cfa:	2b05      	cmp	r3, #5
 8005cfc:	bfc4      	itt	gt
 8005cfe:	3b04      	subgt	r3, #4
 8005d00:	9306      	strgt	r3, [sp, #24]
 8005d02:	9b06      	ldr	r3, [sp, #24]
 8005d04:	f1a3 0302 	sub.w	r3, r3, #2
 8005d08:	bfcc      	ite	gt
 8005d0a:	2500      	movgt	r5, #0
 8005d0c:	2501      	movle	r5, #1
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	f200 8087 	bhi.w	8005e22 <_dtoa_r+0x30a>
 8005d14:	e8df f003 	tbb	[pc, r3]
 8005d18:	59383a2d 	.word	0x59383a2d
 8005d1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005d20:	441d      	add	r5, r3
 8005d22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005d26:	2b20      	cmp	r3, #32
 8005d28:	bfc1      	itttt	gt
 8005d2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005d2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005d32:	fa0b f303 	lslgt.w	r3, fp, r3
 8005d36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005d3a:	bfda      	itte	le
 8005d3c:	f1c3 0320 	rsble	r3, r3, #32
 8005d40:	fa06 f003 	lslle.w	r0, r6, r3
 8005d44:	4318      	orrgt	r0, r3
 8005d46:	f7fa fbd5 	bl	80004f4 <__aeabi_ui2d>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	4606      	mov	r6, r0
 8005d4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005d52:	3d01      	subs	r5, #1
 8005d54:	930e      	str	r3, [sp, #56]	; 0x38
 8005d56:	e76a      	b.n	8005c2e <_dtoa_r+0x116>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e7b2      	b.n	8005cc2 <_dtoa_r+0x1aa>
 8005d5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005d5e:	e7b1      	b.n	8005cc4 <_dtoa_r+0x1ac>
 8005d60:	9b04      	ldr	r3, [sp, #16]
 8005d62:	9a00      	ldr	r2, [sp, #0]
 8005d64:	1a9b      	subs	r3, r3, r2
 8005d66:	9304      	str	r3, [sp, #16]
 8005d68:	4253      	negs	r3, r2
 8005d6a:	9307      	str	r3, [sp, #28]
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	930a      	str	r3, [sp, #40]	; 0x28
 8005d70:	e7bf      	b.n	8005cf2 <_dtoa_r+0x1da>
 8005d72:	2300      	movs	r3, #0
 8005d74:	9308      	str	r3, [sp, #32]
 8005d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	dc55      	bgt.n	8005e28 <_dtoa_r+0x310>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005d82:	461a      	mov	r2, r3
 8005d84:	9209      	str	r2, [sp, #36]	; 0x24
 8005d86:	e00c      	b.n	8005da2 <_dtoa_r+0x28a>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e7f3      	b.n	8005d74 <_dtoa_r+0x25c>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d90:	9308      	str	r3, [sp, #32]
 8005d92:	9b00      	ldr	r3, [sp, #0]
 8005d94:	4413      	add	r3, r2
 8005d96:	9302      	str	r3, [sp, #8]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	9303      	str	r3, [sp, #12]
 8005d9e:	bfb8      	it	lt
 8005da0:	2301      	movlt	r3, #1
 8005da2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005da4:	2200      	movs	r2, #0
 8005da6:	6042      	str	r2, [r0, #4]
 8005da8:	2204      	movs	r2, #4
 8005daa:	f102 0614 	add.w	r6, r2, #20
 8005dae:	429e      	cmp	r6, r3
 8005db0:	6841      	ldr	r1, [r0, #4]
 8005db2:	d93d      	bls.n	8005e30 <_dtoa_r+0x318>
 8005db4:	4620      	mov	r0, r4
 8005db6:	f7ff f99f 	bl	80050f8 <_Balloc>
 8005dba:	9001      	str	r0, [sp, #4]
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	d13b      	bne.n	8005e38 <_dtoa_r+0x320>
 8005dc0:	4b11      	ldr	r3, [pc, #68]	; (8005e08 <_dtoa_r+0x2f0>)
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005dc8:	e6c0      	b.n	8005b4c <_dtoa_r+0x34>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e7df      	b.n	8005d8e <_dtoa_r+0x276>
 8005dce:	bf00      	nop
 8005dd0:	636f4361 	.word	0x636f4361
 8005dd4:	3fd287a7 	.word	0x3fd287a7
 8005dd8:	8b60c8b3 	.word	0x8b60c8b3
 8005ddc:	3fc68a28 	.word	0x3fc68a28
 8005de0:	509f79fb 	.word	0x509f79fb
 8005de4:	3fd34413 	.word	0x3fd34413
 8005de8:	08008334 	.word	0x08008334
 8005dec:	080084ff 	.word	0x080084ff
 8005df0:	7ff00000 	.word	0x7ff00000
 8005df4:	080084f9 	.word	0x080084f9
 8005df8:	080084f0 	.word	0x080084f0
 8005dfc:	080084fe 	.word	0x080084fe
 8005e00:	3ff80000 	.word	0x3ff80000
 8005e04:	080083e0 	.word	0x080083e0
 8005e08:	080083a7 	.word	0x080083a7
 8005e0c:	2501      	movs	r5, #1
 8005e0e:	2300      	movs	r3, #0
 8005e10:	9306      	str	r3, [sp, #24]
 8005e12:	9508      	str	r5, [sp, #32]
 8005e14:	f04f 33ff 	mov.w	r3, #4294967295
 8005e18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	2312      	movs	r3, #18
 8005e20:	e7b0      	b.n	8005d84 <_dtoa_r+0x26c>
 8005e22:	2301      	movs	r3, #1
 8005e24:	9308      	str	r3, [sp, #32]
 8005e26:	e7f5      	b.n	8005e14 <_dtoa_r+0x2fc>
 8005e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005e2e:	e7b8      	b.n	8005da2 <_dtoa_r+0x28a>
 8005e30:	3101      	adds	r1, #1
 8005e32:	6041      	str	r1, [r0, #4]
 8005e34:	0052      	lsls	r2, r2, #1
 8005e36:	e7b8      	b.n	8005daa <_dtoa_r+0x292>
 8005e38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e3a:	9a01      	ldr	r2, [sp, #4]
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	9b03      	ldr	r3, [sp, #12]
 8005e40:	2b0e      	cmp	r3, #14
 8005e42:	f200 809d 	bhi.w	8005f80 <_dtoa_r+0x468>
 8005e46:	2d00      	cmp	r5, #0
 8005e48:	f000 809a 	beq.w	8005f80 <_dtoa_r+0x468>
 8005e4c:	9b00      	ldr	r3, [sp, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	dd32      	ble.n	8005eb8 <_dtoa_r+0x3a0>
 8005e52:	4ab7      	ldr	r2, [pc, #732]	; (8006130 <_dtoa_r+0x618>)
 8005e54:	f003 030f 	and.w	r3, r3, #15
 8005e58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005e5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e60:	9b00      	ldr	r3, [sp, #0]
 8005e62:	05d8      	lsls	r0, r3, #23
 8005e64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005e68:	d516      	bpl.n	8005e98 <_dtoa_r+0x380>
 8005e6a:	4bb2      	ldr	r3, [pc, #712]	; (8006134 <_dtoa_r+0x61c>)
 8005e6c:	ec51 0b19 	vmov	r0, r1, d9
 8005e70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e74:	f7fa fce2 	bl	800083c <__aeabi_ddiv>
 8005e78:	f007 070f 	and.w	r7, r7, #15
 8005e7c:	4682      	mov	sl, r0
 8005e7e:	468b      	mov	fp, r1
 8005e80:	2503      	movs	r5, #3
 8005e82:	4eac      	ldr	r6, [pc, #688]	; (8006134 <_dtoa_r+0x61c>)
 8005e84:	b957      	cbnz	r7, 8005e9c <_dtoa_r+0x384>
 8005e86:	4642      	mov	r2, r8
 8005e88:	464b      	mov	r3, r9
 8005e8a:	4650      	mov	r0, sl
 8005e8c:	4659      	mov	r1, fp
 8005e8e:	f7fa fcd5 	bl	800083c <__aeabi_ddiv>
 8005e92:	4682      	mov	sl, r0
 8005e94:	468b      	mov	fp, r1
 8005e96:	e028      	b.n	8005eea <_dtoa_r+0x3d2>
 8005e98:	2502      	movs	r5, #2
 8005e9a:	e7f2      	b.n	8005e82 <_dtoa_r+0x36a>
 8005e9c:	07f9      	lsls	r1, r7, #31
 8005e9e:	d508      	bpl.n	8005eb2 <_dtoa_r+0x39a>
 8005ea0:	4640      	mov	r0, r8
 8005ea2:	4649      	mov	r1, r9
 8005ea4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ea8:	f7fa fb9e 	bl	80005e8 <__aeabi_dmul>
 8005eac:	3501      	adds	r5, #1
 8005eae:	4680      	mov	r8, r0
 8005eb0:	4689      	mov	r9, r1
 8005eb2:	107f      	asrs	r7, r7, #1
 8005eb4:	3608      	adds	r6, #8
 8005eb6:	e7e5      	b.n	8005e84 <_dtoa_r+0x36c>
 8005eb8:	f000 809b 	beq.w	8005ff2 <_dtoa_r+0x4da>
 8005ebc:	9b00      	ldr	r3, [sp, #0]
 8005ebe:	4f9d      	ldr	r7, [pc, #628]	; (8006134 <_dtoa_r+0x61c>)
 8005ec0:	425e      	negs	r6, r3
 8005ec2:	4b9b      	ldr	r3, [pc, #620]	; (8006130 <_dtoa_r+0x618>)
 8005ec4:	f006 020f 	and.w	r2, r6, #15
 8005ec8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	ec51 0b19 	vmov	r0, r1, d9
 8005ed4:	f7fa fb88 	bl	80005e8 <__aeabi_dmul>
 8005ed8:	1136      	asrs	r6, r6, #4
 8005eda:	4682      	mov	sl, r0
 8005edc:	468b      	mov	fp, r1
 8005ede:	2300      	movs	r3, #0
 8005ee0:	2502      	movs	r5, #2
 8005ee2:	2e00      	cmp	r6, #0
 8005ee4:	d17a      	bne.n	8005fdc <_dtoa_r+0x4c4>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1d3      	bne.n	8005e92 <_dtoa_r+0x37a>
 8005eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 8082 	beq.w	8005ff6 <_dtoa_r+0x4de>
 8005ef2:	4b91      	ldr	r3, [pc, #580]	; (8006138 <_dtoa_r+0x620>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	4650      	mov	r0, sl
 8005ef8:	4659      	mov	r1, fp
 8005efa:	f7fa fde7 	bl	8000acc <__aeabi_dcmplt>
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d079      	beq.n	8005ff6 <_dtoa_r+0x4de>
 8005f02:	9b03      	ldr	r3, [sp, #12]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d076      	beq.n	8005ff6 <_dtoa_r+0x4de>
 8005f08:	9b02      	ldr	r3, [sp, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	dd36      	ble.n	8005f7c <_dtoa_r+0x464>
 8005f0e:	9b00      	ldr	r3, [sp, #0]
 8005f10:	4650      	mov	r0, sl
 8005f12:	4659      	mov	r1, fp
 8005f14:	1e5f      	subs	r7, r3, #1
 8005f16:	2200      	movs	r2, #0
 8005f18:	4b88      	ldr	r3, [pc, #544]	; (800613c <_dtoa_r+0x624>)
 8005f1a:	f7fa fb65 	bl	80005e8 <__aeabi_dmul>
 8005f1e:	9e02      	ldr	r6, [sp, #8]
 8005f20:	4682      	mov	sl, r0
 8005f22:	468b      	mov	fp, r1
 8005f24:	3501      	adds	r5, #1
 8005f26:	4628      	mov	r0, r5
 8005f28:	f7fa faf4 	bl	8000514 <__aeabi_i2d>
 8005f2c:	4652      	mov	r2, sl
 8005f2e:	465b      	mov	r3, fp
 8005f30:	f7fa fb5a 	bl	80005e8 <__aeabi_dmul>
 8005f34:	4b82      	ldr	r3, [pc, #520]	; (8006140 <_dtoa_r+0x628>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	f7fa f9a0 	bl	800027c <__adddf3>
 8005f3c:	46d0      	mov	r8, sl
 8005f3e:	46d9      	mov	r9, fp
 8005f40:	4682      	mov	sl, r0
 8005f42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005f46:	2e00      	cmp	r6, #0
 8005f48:	d158      	bne.n	8005ffc <_dtoa_r+0x4e4>
 8005f4a:	4b7e      	ldr	r3, [pc, #504]	; (8006144 <_dtoa_r+0x62c>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	4640      	mov	r0, r8
 8005f50:	4649      	mov	r1, r9
 8005f52:	f7fa f991 	bl	8000278 <__aeabi_dsub>
 8005f56:	4652      	mov	r2, sl
 8005f58:	465b      	mov	r3, fp
 8005f5a:	4680      	mov	r8, r0
 8005f5c:	4689      	mov	r9, r1
 8005f5e:	f7fa fdd3 	bl	8000b08 <__aeabi_dcmpgt>
 8005f62:	2800      	cmp	r0, #0
 8005f64:	f040 8295 	bne.w	8006492 <_dtoa_r+0x97a>
 8005f68:	4652      	mov	r2, sl
 8005f6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005f6e:	4640      	mov	r0, r8
 8005f70:	4649      	mov	r1, r9
 8005f72:	f7fa fdab 	bl	8000acc <__aeabi_dcmplt>
 8005f76:	2800      	cmp	r0, #0
 8005f78:	f040 8289 	bne.w	800648e <_dtoa_r+0x976>
 8005f7c:	ec5b ab19 	vmov	sl, fp, d9
 8005f80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f2c0 8148 	blt.w	8006218 <_dtoa_r+0x700>
 8005f88:	9a00      	ldr	r2, [sp, #0]
 8005f8a:	2a0e      	cmp	r2, #14
 8005f8c:	f300 8144 	bgt.w	8006218 <_dtoa_r+0x700>
 8005f90:	4b67      	ldr	r3, [pc, #412]	; (8006130 <_dtoa_r+0x618>)
 8005f92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f280 80d5 	bge.w	800614c <_dtoa_r+0x634>
 8005fa2:	9b03      	ldr	r3, [sp, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f300 80d1 	bgt.w	800614c <_dtoa_r+0x634>
 8005faa:	f040 826f 	bne.w	800648c <_dtoa_r+0x974>
 8005fae:	4b65      	ldr	r3, [pc, #404]	; (8006144 <_dtoa_r+0x62c>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	4640      	mov	r0, r8
 8005fb4:	4649      	mov	r1, r9
 8005fb6:	f7fa fb17 	bl	80005e8 <__aeabi_dmul>
 8005fba:	4652      	mov	r2, sl
 8005fbc:	465b      	mov	r3, fp
 8005fbe:	f7fa fd99 	bl	8000af4 <__aeabi_dcmpge>
 8005fc2:	9e03      	ldr	r6, [sp, #12]
 8005fc4:	4637      	mov	r7, r6
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	f040 8245 	bne.w	8006456 <_dtoa_r+0x93e>
 8005fcc:	9d01      	ldr	r5, [sp, #4]
 8005fce:	2331      	movs	r3, #49	; 0x31
 8005fd0:	f805 3b01 	strb.w	r3, [r5], #1
 8005fd4:	9b00      	ldr	r3, [sp, #0]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	e240      	b.n	800645e <_dtoa_r+0x946>
 8005fdc:	07f2      	lsls	r2, r6, #31
 8005fde:	d505      	bpl.n	8005fec <_dtoa_r+0x4d4>
 8005fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fe4:	f7fa fb00 	bl	80005e8 <__aeabi_dmul>
 8005fe8:	3501      	adds	r5, #1
 8005fea:	2301      	movs	r3, #1
 8005fec:	1076      	asrs	r6, r6, #1
 8005fee:	3708      	adds	r7, #8
 8005ff0:	e777      	b.n	8005ee2 <_dtoa_r+0x3ca>
 8005ff2:	2502      	movs	r5, #2
 8005ff4:	e779      	b.n	8005eea <_dtoa_r+0x3d2>
 8005ff6:	9f00      	ldr	r7, [sp, #0]
 8005ff8:	9e03      	ldr	r6, [sp, #12]
 8005ffa:	e794      	b.n	8005f26 <_dtoa_r+0x40e>
 8005ffc:	9901      	ldr	r1, [sp, #4]
 8005ffe:	4b4c      	ldr	r3, [pc, #304]	; (8006130 <_dtoa_r+0x618>)
 8006000:	4431      	add	r1, r6
 8006002:	910d      	str	r1, [sp, #52]	; 0x34
 8006004:	9908      	ldr	r1, [sp, #32]
 8006006:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800600a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800600e:	2900      	cmp	r1, #0
 8006010:	d043      	beq.n	800609a <_dtoa_r+0x582>
 8006012:	494d      	ldr	r1, [pc, #308]	; (8006148 <_dtoa_r+0x630>)
 8006014:	2000      	movs	r0, #0
 8006016:	f7fa fc11 	bl	800083c <__aeabi_ddiv>
 800601a:	4652      	mov	r2, sl
 800601c:	465b      	mov	r3, fp
 800601e:	f7fa f92b 	bl	8000278 <__aeabi_dsub>
 8006022:	9d01      	ldr	r5, [sp, #4]
 8006024:	4682      	mov	sl, r0
 8006026:	468b      	mov	fp, r1
 8006028:	4649      	mov	r1, r9
 800602a:	4640      	mov	r0, r8
 800602c:	f7fa fd76 	bl	8000b1c <__aeabi_d2iz>
 8006030:	4606      	mov	r6, r0
 8006032:	f7fa fa6f 	bl	8000514 <__aeabi_i2d>
 8006036:	4602      	mov	r2, r0
 8006038:	460b      	mov	r3, r1
 800603a:	4640      	mov	r0, r8
 800603c:	4649      	mov	r1, r9
 800603e:	f7fa f91b 	bl	8000278 <__aeabi_dsub>
 8006042:	3630      	adds	r6, #48	; 0x30
 8006044:	f805 6b01 	strb.w	r6, [r5], #1
 8006048:	4652      	mov	r2, sl
 800604a:	465b      	mov	r3, fp
 800604c:	4680      	mov	r8, r0
 800604e:	4689      	mov	r9, r1
 8006050:	f7fa fd3c 	bl	8000acc <__aeabi_dcmplt>
 8006054:	2800      	cmp	r0, #0
 8006056:	d163      	bne.n	8006120 <_dtoa_r+0x608>
 8006058:	4642      	mov	r2, r8
 800605a:	464b      	mov	r3, r9
 800605c:	4936      	ldr	r1, [pc, #216]	; (8006138 <_dtoa_r+0x620>)
 800605e:	2000      	movs	r0, #0
 8006060:	f7fa f90a 	bl	8000278 <__aeabi_dsub>
 8006064:	4652      	mov	r2, sl
 8006066:	465b      	mov	r3, fp
 8006068:	f7fa fd30 	bl	8000acc <__aeabi_dcmplt>
 800606c:	2800      	cmp	r0, #0
 800606e:	f040 80b5 	bne.w	80061dc <_dtoa_r+0x6c4>
 8006072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006074:	429d      	cmp	r5, r3
 8006076:	d081      	beq.n	8005f7c <_dtoa_r+0x464>
 8006078:	4b30      	ldr	r3, [pc, #192]	; (800613c <_dtoa_r+0x624>)
 800607a:	2200      	movs	r2, #0
 800607c:	4650      	mov	r0, sl
 800607e:	4659      	mov	r1, fp
 8006080:	f7fa fab2 	bl	80005e8 <__aeabi_dmul>
 8006084:	4b2d      	ldr	r3, [pc, #180]	; (800613c <_dtoa_r+0x624>)
 8006086:	4682      	mov	sl, r0
 8006088:	468b      	mov	fp, r1
 800608a:	4640      	mov	r0, r8
 800608c:	4649      	mov	r1, r9
 800608e:	2200      	movs	r2, #0
 8006090:	f7fa faaa 	bl	80005e8 <__aeabi_dmul>
 8006094:	4680      	mov	r8, r0
 8006096:	4689      	mov	r9, r1
 8006098:	e7c6      	b.n	8006028 <_dtoa_r+0x510>
 800609a:	4650      	mov	r0, sl
 800609c:	4659      	mov	r1, fp
 800609e:	f7fa faa3 	bl	80005e8 <__aeabi_dmul>
 80060a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060a4:	9d01      	ldr	r5, [sp, #4]
 80060a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80060a8:	4682      	mov	sl, r0
 80060aa:	468b      	mov	fp, r1
 80060ac:	4649      	mov	r1, r9
 80060ae:	4640      	mov	r0, r8
 80060b0:	f7fa fd34 	bl	8000b1c <__aeabi_d2iz>
 80060b4:	4606      	mov	r6, r0
 80060b6:	f7fa fa2d 	bl	8000514 <__aeabi_i2d>
 80060ba:	3630      	adds	r6, #48	; 0x30
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4640      	mov	r0, r8
 80060c2:	4649      	mov	r1, r9
 80060c4:	f7fa f8d8 	bl	8000278 <__aeabi_dsub>
 80060c8:	f805 6b01 	strb.w	r6, [r5], #1
 80060cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060ce:	429d      	cmp	r5, r3
 80060d0:	4680      	mov	r8, r0
 80060d2:	4689      	mov	r9, r1
 80060d4:	f04f 0200 	mov.w	r2, #0
 80060d8:	d124      	bne.n	8006124 <_dtoa_r+0x60c>
 80060da:	4b1b      	ldr	r3, [pc, #108]	; (8006148 <_dtoa_r+0x630>)
 80060dc:	4650      	mov	r0, sl
 80060de:	4659      	mov	r1, fp
 80060e0:	f7fa f8cc 	bl	800027c <__adddf3>
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	4640      	mov	r0, r8
 80060ea:	4649      	mov	r1, r9
 80060ec:	f7fa fd0c 	bl	8000b08 <__aeabi_dcmpgt>
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d173      	bne.n	80061dc <_dtoa_r+0x6c4>
 80060f4:	4652      	mov	r2, sl
 80060f6:	465b      	mov	r3, fp
 80060f8:	4913      	ldr	r1, [pc, #76]	; (8006148 <_dtoa_r+0x630>)
 80060fa:	2000      	movs	r0, #0
 80060fc:	f7fa f8bc 	bl	8000278 <__aeabi_dsub>
 8006100:	4602      	mov	r2, r0
 8006102:	460b      	mov	r3, r1
 8006104:	4640      	mov	r0, r8
 8006106:	4649      	mov	r1, r9
 8006108:	f7fa fce0 	bl	8000acc <__aeabi_dcmplt>
 800610c:	2800      	cmp	r0, #0
 800610e:	f43f af35 	beq.w	8005f7c <_dtoa_r+0x464>
 8006112:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006114:	1e6b      	subs	r3, r5, #1
 8006116:	930f      	str	r3, [sp, #60]	; 0x3c
 8006118:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800611c:	2b30      	cmp	r3, #48	; 0x30
 800611e:	d0f8      	beq.n	8006112 <_dtoa_r+0x5fa>
 8006120:	9700      	str	r7, [sp, #0]
 8006122:	e049      	b.n	80061b8 <_dtoa_r+0x6a0>
 8006124:	4b05      	ldr	r3, [pc, #20]	; (800613c <_dtoa_r+0x624>)
 8006126:	f7fa fa5f 	bl	80005e8 <__aeabi_dmul>
 800612a:	4680      	mov	r8, r0
 800612c:	4689      	mov	r9, r1
 800612e:	e7bd      	b.n	80060ac <_dtoa_r+0x594>
 8006130:	080083e0 	.word	0x080083e0
 8006134:	080083b8 	.word	0x080083b8
 8006138:	3ff00000 	.word	0x3ff00000
 800613c:	40240000 	.word	0x40240000
 8006140:	401c0000 	.word	0x401c0000
 8006144:	40140000 	.word	0x40140000
 8006148:	3fe00000 	.word	0x3fe00000
 800614c:	9d01      	ldr	r5, [sp, #4]
 800614e:	4656      	mov	r6, sl
 8006150:	465f      	mov	r7, fp
 8006152:	4642      	mov	r2, r8
 8006154:	464b      	mov	r3, r9
 8006156:	4630      	mov	r0, r6
 8006158:	4639      	mov	r1, r7
 800615a:	f7fa fb6f 	bl	800083c <__aeabi_ddiv>
 800615e:	f7fa fcdd 	bl	8000b1c <__aeabi_d2iz>
 8006162:	4682      	mov	sl, r0
 8006164:	f7fa f9d6 	bl	8000514 <__aeabi_i2d>
 8006168:	4642      	mov	r2, r8
 800616a:	464b      	mov	r3, r9
 800616c:	f7fa fa3c 	bl	80005e8 <__aeabi_dmul>
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	4630      	mov	r0, r6
 8006176:	4639      	mov	r1, r7
 8006178:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800617c:	f7fa f87c 	bl	8000278 <__aeabi_dsub>
 8006180:	f805 6b01 	strb.w	r6, [r5], #1
 8006184:	9e01      	ldr	r6, [sp, #4]
 8006186:	9f03      	ldr	r7, [sp, #12]
 8006188:	1bae      	subs	r6, r5, r6
 800618a:	42b7      	cmp	r7, r6
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	d135      	bne.n	80061fe <_dtoa_r+0x6e6>
 8006192:	f7fa f873 	bl	800027c <__adddf3>
 8006196:	4642      	mov	r2, r8
 8006198:	464b      	mov	r3, r9
 800619a:	4606      	mov	r6, r0
 800619c:	460f      	mov	r7, r1
 800619e:	f7fa fcb3 	bl	8000b08 <__aeabi_dcmpgt>
 80061a2:	b9d0      	cbnz	r0, 80061da <_dtoa_r+0x6c2>
 80061a4:	4642      	mov	r2, r8
 80061a6:	464b      	mov	r3, r9
 80061a8:	4630      	mov	r0, r6
 80061aa:	4639      	mov	r1, r7
 80061ac:	f7fa fc84 	bl	8000ab8 <__aeabi_dcmpeq>
 80061b0:	b110      	cbz	r0, 80061b8 <_dtoa_r+0x6a0>
 80061b2:	f01a 0f01 	tst.w	sl, #1
 80061b6:	d110      	bne.n	80061da <_dtoa_r+0x6c2>
 80061b8:	4620      	mov	r0, r4
 80061ba:	ee18 1a10 	vmov	r1, s16
 80061be:	f7fe ffdb 	bl	8005178 <_Bfree>
 80061c2:	2300      	movs	r3, #0
 80061c4:	9800      	ldr	r0, [sp, #0]
 80061c6:	702b      	strb	r3, [r5, #0]
 80061c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061ca:	3001      	adds	r0, #1
 80061cc:	6018      	str	r0, [r3, #0]
 80061ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f43f acf1 	beq.w	8005bb8 <_dtoa_r+0xa0>
 80061d6:	601d      	str	r5, [r3, #0]
 80061d8:	e4ee      	b.n	8005bb8 <_dtoa_r+0xa0>
 80061da:	9f00      	ldr	r7, [sp, #0]
 80061dc:	462b      	mov	r3, r5
 80061de:	461d      	mov	r5, r3
 80061e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061e4:	2a39      	cmp	r2, #57	; 0x39
 80061e6:	d106      	bne.n	80061f6 <_dtoa_r+0x6de>
 80061e8:	9a01      	ldr	r2, [sp, #4]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d1f7      	bne.n	80061de <_dtoa_r+0x6c6>
 80061ee:	9901      	ldr	r1, [sp, #4]
 80061f0:	2230      	movs	r2, #48	; 0x30
 80061f2:	3701      	adds	r7, #1
 80061f4:	700a      	strb	r2, [r1, #0]
 80061f6:	781a      	ldrb	r2, [r3, #0]
 80061f8:	3201      	adds	r2, #1
 80061fa:	701a      	strb	r2, [r3, #0]
 80061fc:	e790      	b.n	8006120 <_dtoa_r+0x608>
 80061fe:	4ba6      	ldr	r3, [pc, #664]	; (8006498 <_dtoa_r+0x980>)
 8006200:	2200      	movs	r2, #0
 8006202:	f7fa f9f1 	bl	80005e8 <__aeabi_dmul>
 8006206:	2200      	movs	r2, #0
 8006208:	2300      	movs	r3, #0
 800620a:	4606      	mov	r6, r0
 800620c:	460f      	mov	r7, r1
 800620e:	f7fa fc53 	bl	8000ab8 <__aeabi_dcmpeq>
 8006212:	2800      	cmp	r0, #0
 8006214:	d09d      	beq.n	8006152 <_dtoa_r+0x63a>
 8006216:	e7cf      	b.n	80061b8 <_dtoa_r+0x6a0>
 8006218:	9a08      	ldr	r2, [sp, #32]
 800621a:	2a00      	cmp	r2, #0
 800621c:	f000 80d7 	beq.w	80063ce <_dtoa_r+0x8b6>
 8006220:	9a06      	ldr	r2, [sp, #24]
 8006222:	2a01      	cmp	r2, #1
 8006224:	f300 80ba 	bgt.w	800639c <_dtoa_r+0x884>
 8006228:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800622a:	2a00      	cmp	r2, #0
 800622c:	f000 80b2 	beq.w	8006394 <_dtoa_r+0x87c>
 8006230:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006234:	9e07      	ldr	r6, [sp, #28]
 8006236:	9d04      	ldr	r5, [sp, #16]
 8006238:	9a04      	ldr	r2, [sp, #16]
 800623a:	441a      	add	r2, r3
 800623c:	9204      	str	r2, [sp, #16]
 800623e:	9a05      	ldr	r2, [sp, #20]
 8006240:	2101      	movs	r1, #1
 8006242:	441a      	add	r2, r3
 8006244:	4620      	mov	r0, r4
 8006246:	9205      	str	r2, [sp, #20]
 8006248:	f7ff f84e 	bl	80052e8 <__i2b>
 800624c:	4607      	mov	r7, r0
 800624e:	2d00      	cmp	r5, #0
 8006250:	dd0c      	ble.n	800626c <_dtoa_r+0x754>
 8006252:	9b05      	ldr	r3, [sp, #20]
 8006254:	2b00      	cmp	r3, #0
 8006256:	dd09      	ble.n	800626c <_dtoa_r+0x754>
 8006258:	42ab      	cmp	r3, r5
 800625a:	9a04      	ldr	r2, [sp, #16]
 800625c:	bfa8      	it	ge
 800625e:	462b      	movge	r3, r5
 8006260:	1ad2      	subs	r2, r2, r3
 8006262:	9204      	str	r2, [sp, #16]
 8006264:	9a05      	ldr	r2, [sp, #20]
 8006266:	1aed      	subs	r5, r5, r3
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	9305      	str	r3, [sp, #20]
 800626c:	9b07      	ldr	r3, [sp, #28]
 800626e:	b31b      	cbz	r3, 80062b8 <_dtoa_r+0x7a0>
 8006270:	9b08      	ldr	r3, [sp, #32]
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 80af 	beq.w	80063d6 <_dtoa_r+0x8be>
 8006278:	2e00      	cmp	r6, #0
 800627a:	dd13      	ble.n	80062a4 <_dtoa_r+0x78c>
 800627c:	4639      	mov	r1, r7
 800627e:	4632      	mov	r2, r6
 8006280:	4620      	mov	r0, r4
 8006282:	f7ff f8f1 	bl	8005468 <__pow5mult>
 8006286:	ee18 2a10 	vmov	r2, s16
 800628a:	4601      	mov	r1, r0
 800628c:	4607      	mov	r7, r0
 800628e:	4620      	mov	r0, r4
 8006290:	f7ff f840 	bl	8005314 <__multiply>
 8006294:	ee18 1a10 	vmov	r1, s16
 8006298:	4680      	mov	r8, r0
 800629a:	4620      	mov	r0, r4
 800629c:	f7fe ff6c 	bl	8005178 <_Bfree>
 80062a0:	ee08 8a10 	vmov	s16, r8
 80062a4:	9b07      	ldr	r3, [sp, #28]
 80062a6:	1b9a      	subs	r2, r3, r6
 80062a8:	d006      	beq.n	80062b8 <_dtoa_r+0x7a0>
 80062aa:	ee18 1a10 	vmov	r1, s16
 80062ae:	4620      	mov	r0, r4
 80062b0:	f7ff f8da 	bl	8005468 <__pow5mult>
 80062b4:	ee08 0a10 	vmov	s16, r0
 80062b8:	2101      	movs	r1, #1
 80062ba:	4620      	mov	r0, r4
 80062bc:	f7ff f814 	bl	80052e8 <__i2b>
 80062c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	4606      	mov	r6, r0
 80062c6:	f340 8088 	ble.w	80063da <_dtoa_r+0x8c2>
 80062ca:	461a      	mov	r2, r3
 80062cc:	4601      	mov	r1, r0
 80062ce:	4620      	mov	r0, r4
 80062d0:	f7ff f8ca 	bl	8005468 <__pow5mult>
 80062d4:	9b06      	ldr	r3, [sp, #24]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	4606      	mov	r6, r0
 80062da:	f340 8081 	ble.w	80063e0 <_dtoa_r+0x8c8>
 80062de:	f04f 0800 	mov.w	r8, #0
 80062e2:	6933      	ldr	r3, [r6, #16]
 80062e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80062e8:	6918      	ldr	r0, [r3, #16]
 80062ea:	f7fe ffad 	bl	8005248 <__hi0bits>
 80062ee:	f1c0 0020 	rsb	r0, r0, #32
 80062f2:	9b05      	ldr	r3, [sp, #20]
 80062f4:	4418      	add	r0, r3
 80062f6:	f010 001f 	ands.w	r0, r0, #31
 80062fa:	f000 8092 	beq.w	8006422 <_dtoa_r+0x90a>
 80062fe:	f1c0 0320 	rsb	r3, r0, #32
 8006302:	2b04      	cmp	r3, #4
 8006304:	f340 808a 	ble.w	800641c <_dtoa_r+0x904>
 8006308:	f1c0 001c 	rsb	r0, r0, #28
 800630c:	9b04      	ldr	r3, [sp, #16]
 800630e:	4403      	add	r3, r0
 8006310:	9304      	str	r3, [sp, #16]
 8006312:	9b05      	ldr	r3, [sp, #20]
 8006314:	4403      	add	r3, r0
 8006316:	4405      	add	r5, r0
 8006318:	9305      	str	r3, [sp, #20]
 800631a:	9b04      	ldr	r3, [sp, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	dd07      	ble.n	8006330 <_dtoa_r+0x818>
 8006320:	ee18 1a10 	vmov	r1, s16
 8006324:	461a      	mov	r2, r3
 8006326:	4620      	mov	r0, r4
 8006328:	f7ff f8f8 	bl	800551c <__lshift>
 800632c:	ee08 0a10 	vmov	s16, r0
 8006330:	9b05      	ldr	r3, [sp, #20]
 8006332:	2b00      	cmp	r3, #0
 8006334:	dd05      	ble.n	8006342 <_dtoa_r+0x82a>
 8006336:	4631      	mov	r1, r6
 8006338:	461a      	mov	r2, r3
 800633a:	4620      	mov	r0, r4
 800633c:	f7ff f8ee 	bl	800551c <__lshift>
 8006340:	4606      	mov	r6, r0
 8006342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006344:	2b00      	cmp	r3, #0
 8006346:	d06e      	beq.n	8006426 <_dtoa_r+0x90e>
 8006348:	ee18 0a10 	vmov	r0, s16
 800634c:	4631      	mov	r1, r6
 800634e:	f7ff f955 	bl	80055fc <__mcmp>
 8006352:	2800      	cmp	r0, #0
 8006354:	da67      	bge.n	8006426 <_dtoa_r+0x90e>
 8006356:	9b00      	ldr	r3, [sp, #0]
 8006358:	3b01      	subs	r3, #1
 800635a:	ee18 1a10 	vmov	r1, s16
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	220a      	movs	r2, #10
 8006362:	2300      	movs	r3, #0
 8006364:	4620      	mov	r0, r4
 8006366:	f7fe ff29 	bl	80051bc <__multadd>
 800636a:	9b08      	ldr	r3, [sp, #32]
 800636c:	ee08 0a10 	vmov	s16, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 81b1 	beq.w	80066d8 <_dtoa_r+0xbc0>
 8006376:	2300      	movs	r3, #0
 8006378:	4639      	mov	r1, r7
 800637a:	220a      	movs	r2, #10
 800637c:	4620      	mov	r0, r4
 800637e:	f7fe ff1d 	bl	80051bc <__multadd>
 8006382:	9b02      	ldr	r3, [sp, #8]
 8006384:	2b00      	cmp	r3, #0
 8006386:	4607      	mov	r7, r0
 8006388:	f300 808e 	bgt.w	80064a8 <_dtoa_r+0x990>
 800638c:	9b06      	ldr	r3, [sp, #24]
 800638e:	2b02      	cmp	r3, #2
 8006390:	dc51      	bgt.n	8006436 <_dtoa_r+0x91e>
 8006392:	e089      	b.n	80064a8 <_dtoa_r+0x990>
 8006394:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006396:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800639a:	e74b      	b.n	8006234 <_dtoa_r+0x71c>
 800639c:	9b03      	ldr	r3, [sp, #12]
 800639e:	1e5e      	subs	r6, r3, #1
 80063a0:	9b07      	ldr	r3, [sp, #28]
 80063a2:	42b3      	cmp	r3, r6
 80063a4:	bfbf      	itttt	lt
 80063a6:	9b07      	ldrlt	r3, [sp, #28]
 80063a8:	9607      	strlt	r6, [sp, #28]
 80063aa:	1af2      	sublt	r2, r6, r3
 80063ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80063ae:	bfb6      	itet	lt
 80063b0:	189b      	addlt	r3, r3, r2
 80063b2:	1b9e      	subge	r6, r3, r6
 80063b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80063b6:	9b03      	ldr	r3, [sp, #12]
 80063b8:	bfb8      	it	lt
 80063ba:	2600      	movlt	r6, #0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	bfb7      	itett	lt
 80063c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80063c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80063c8:	1a9d      	sublt	r5, r3, r2
 80063ca:	2300      	movlt	r3, #0
 80063cc:	e734      	b.n	8006238 <_dtoa_r+0x720>
 80063ce:	9e07      	ldr	r6, [sp, #28]
 80063d0:	9d04      	ldr	r5, [sp, #16]
 80063d2:	9f08      	ldr	r7, [sp, #32]
 80063d4:	e73b      	b.n	800624e <_dtoa_r+0x736>
 80063d6:	9a07      	ldr	r2, [sp, #28]
 80063d8:	e767      	b.n	80062aa <_dtoa_r+0x792>
 80063da:	9b06      	ldr	r3, [sp, #24]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	dc18      	bgt.n	8006412 <_dtoa_r+0x8fa>
 80063e0:	f1ba 0f00 	cmp.w	sl, #0
 80063e4:	d115      	bne.n	8006412 <_dtoa_r+0x8fa>
 80063e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063ea:	b993      	cbnz	r3, 8006412 <_dtoa_r+0x8fa>
 80063ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80063f0:	0d1b      	lsrs	r3, r3, #20
 80063f2:	051b      	lsls	r3, r3, #20
 80063f4:	b183      	cbz	r3, 8006418 <_dtoa_r+0x900>
 80063f6:	9b04      	ldr	r3, [sp, #16]
 80063f8:	3301      	adds	r3, #1
 80063fa:	9304      	str	r3, [sp, #16]
 80063fc:	9b05      	ldr	r3, [sp, #20]
 80063fe:	3301      	adds	r3, #1
 8006400:	9305      	str	r3, [sp, #20]
 8006402:	f04f 0801 	mov.w	r8, #1
 8006406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006408:	2b00      	cmp	r3, #0
 800640a:	f47f af6a 	bne.w	80062e2 <_dtoa_r+0x7ca>
 800640e:	2001      	movs	r0, #1
 8006410:	e76f      	b.n	80062f2 <_dtoa_r+0x7da>
 8006412:	f04f 0800 	mov.w	r8, #0
 8006416:	e7f6      	b.n	8006406 <_dtoa_r+0x8ee>
 8006418:	4698      	mov	r8, r3
 800641a:	e7f4      	b.n	8006406 <_dtoa_r+0x8ee>
 800641c:	f43f af7d 	beq.w	800631a <_dtoa_r+0x802>
 8006420:	4618      	mov	r0, r3
 8006422:	301c      	adds	r0, #28
 8006424:	e772      	b.n	800630c <_dtoa_r+0x7f4>
 8006426:	9b03      	ldr	r3, [sp, #12]
 8006428:	2b00      	cmp	r3, #0
 800642a:	dc37      	bgt.n	800649c <_dtoa_r+0x984>
 800642c:	9b06      	ldr	r3, [sp, #24]
 800642e:	2b02      	cmp	r3, #2
 8006430:	dd34      	ble.n	800649c <_dtoa_r+0x984>
 8006432:	9b03      	ldr	r3, [sp, #12]
 8006434:	9302      	str	r3, [sp, #8]
 8006436:	9b02      	ldr	r3, [sp, #8]
 8006438:	b96b      	cbnz	r3, 8006456 <_dtoa_r+0x93e>
 800643a:	4631      	mov	r1, r6
 800643c:	2205      	movs	r2, #5
 800643e:	4620      	mov	r0, r4
 8006440:	f7fe febc 	bl	80051bc <__multadd>
 8006444:	4601      	mov	r1, r0
 8006446:	4606      	mov	r6, r0
 8006448:	ee18 0a10 	vmov	r0, s16
 800644c:	f7ff f8d6 	bl	80055fc <__mcmp>
 8006450:	2800      	cmp	r0, #0
 8006452:	f73f adbb 	bgt.w	8005fcc <_dtoa_r+0x4b4>
 8006456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006458:	9d01      	ldr	r5, [sp, #4]
 800645a:	43db      	mvns	r3, r3
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	f04f 0800 	mov.w	r8, #0
 8006462:	4631      	mov	r1, r6
 8006464:	4620      	mov	r0, r4
 8006466:	f7fe fe87 	bl	8005178 <_Bfree>
 800646a:	2f00      	cmp	r7, #0
 800646c:	f43f aea4 	beq.w	80061b8 <_dtoa_r+0x6a0>
 8006470:	f1b8 0f00 	cmp.w	r8, #0
 8006474:	d005      	beq.n	8006482 <_dtoa_r+0x96a>
 8006476:	45b8      	cmp	r8, r7
 8006478:	d003      	beq.n	8006482 <_dtoa_r+0x96a>
 800647a:	4641      	mov	r1, r8
 800647c:	4620      	mov	r0, r4
 800647e:	f7fe fe7b 	bl	8005178 <_Bfree>
 8006482:	4639      	mov	r1, r7
 8006484:	4620      	mov	r0, r4
 8006486:	f7fe fe77 	bl	8005178 <_Bfree>
 800648a:	e695      	b.n	80061b8 <_dtoa_r+0x6a0>
 800648c:	2600      	movs	r6, #0
 800648e:	4637      	mov	r7, r6
 8006490:	e7e1      	b.n	8006456 <_dtoa_r+0x93e>
 8006492:	9700      	str	r7, [sp, #0]
 8006494:	4637      	mov	r7, r6
 8006496:	e599      	b.n	8005fcc <_dtoa_r+0x4b4>
 8006498:	40240000 	.word	0x40240000
 800649c:	9b08      	ldr	r3, [sp, #32]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 80ca 	beq.w	8006638 <_dtoa_r+0xb20>
 80064a4:	9b03      	ldr	r3, [sp, #12]
 80064a6:	9302      	str	r3, [sp, #8]
 80064a8:	2d00      	cmp	r5, #0
 80064aa:	dd05      	ble.n	80064b8 <_dtoa_r+0x9a0>
 80064ac:	4639      	mov	r1, r7
 80064ae:	462a      	mov	r2, r5
 80064b0:	4620      	mov	r0, r4
 80064b2:	f7ff f833 	bl	800551c <__lshift>
 80064b6:	4607      	mov	r7, r0
 80064b8:	f1b8 0f00 	cmp.w	r8, #0
 80064bc:	d05b      	beq.n	8006576 <_dtoa_r+0xa5e>
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	4620      	mov	r0, r4
 80064c2:	f7fe fe19 	bl	80050f8 <_Balloc>
 80064c6:	4605      	mov	r5, r0
 80064c8:	b928      	cbnz	r0, 80064d6 <_dtoa_r+0x9be>
 80064ca:	4b87      	ldr	r3, [pc, #540]	; (80066e8 <_dtoa_r+0xbd0>)
 80064cc:	4602      	mov	r2, r0
 80064ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80064d2:	f7ff bb3b 	b.w	8005b4c <_dtoa_r+0x34>
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	3202      	adds	r2, #2
 80064da:	0092      	lsls	r2, r2, #2
 80064dc:	f107 010c 	add.w	r1, r7, #12
 80064e0:	300c      	adds	r0, #12
 80064e2:	f000 f921 	bl	8006728 <memcpy>
 80064e6:	2201      	movs	r2, #1
 80064e8:	4629      	mov	r1, r5
 80064ea:	4620      	mov	r0, r4
 80064ec:	f7ff f816 	bl	800551c <__lshift>
 80064f0:	9b01      	ldr	r3, [sp, #4]
 80064f2:	f103 0901 	add.w	r9, r3, #1
 80064f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80064fa:	4413      	add	r3, r2
 80064fc:	9305      	str	r3, [sp, #20]
 80064fe:	f00a 0301 	and.w	r3, sl, #1
 8006502:	46b8      	mov	r8, r7
 8006504:	9304      	str	r3, [sp, #16]
 8006506:	4607      	mov	r7, r0
 8006508:	4631      	mov	r1, r6
 800650a:	ee18 0a10 	vmov	r0, s16
 800650e:	f7ff fa75 	bl	80059fc <quorem>
 8006512:	4641      	mov	r1, r8
 8006514:	9002      	str	r0, [sp, #8]
 8006516:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800651a:	ee18 0a10 	vmov	r0, s16
 800651e:	f7ff f86d 	bl	80055fc <__mcmp>
 8006522:	463a      	mov	r2, r7
 8006524:	9003      	str	r0, [sp, #12]
 8006526:	4631      	mov	r1, r6
 8006528:	4620      	mov	r0, r4
 800652a:	f7ff f883 	bl	8005634 <__mdiff>
 800652e:	68c2      	ldr	r2, [r0, #12]
 8006530:	f109 3bff 	add.w	fp, r9, #4294967295
 8006534:	4605      	mov	r5, r0
 8006536:	bb02      	cbnz	r2, 800657a <_dtoa_r+0xa62>
 8006538:	4601      	mov	r1, r0
 800653a:	ee18 0a10 	vmov	r0, s16
 800653e:	f7ff f85d 	bl	80055fc <__mcmp>
 8006542:	4602      	mov	r2, r0
 8006544:	4629      	mov	r1, r5
 8006546:	4620      	mov	r0, r4
 8006548:	9207      	str	r2, [sp, #28]
 800654a:	f7fe fe15 	bl	8005178 <_Bfree>
 800654e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006552:	ea43 0102 	orr.w	r1, r3, r2
 8006556:	9b04      	ldr	r3, [sp, #16]
 8006558:	430b      	orrs	r3, r1
 800655a:	464d      	mov	r5, r9
 800655c:	d10f      	bne.n	800657e <_dtoa_r+0xa66>
 800655e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006562:	d02a      	beq.n	80065ba <_dtoa_r+0xaa2>
 8006564:	9b03      	ldr	r3, [sp, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	dd02      	ble.n	8006570 <_dtoa_r+0xa58>
 800656a:	9b02      	ldr	r3, [sp, #8]
 800656c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006570:	f88b a000 	strb.w	sl, [fp]
 8006574:	e775      	b.n	8006462 <_dtoa_r+0x94a>
 8006576:	4638      	mov	r0, r7
 8006578:	e7ba      	b.n	80064f0 <_dtoa_r+0x9d8>
 800657a:	2201      	movs	r2, #1
 800657c:	e7e2      	b.n	8006544 <_dtoa_r+0xa2c>
 800657e:	9b03      	ldr	r3, [sp, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	db04      	blt.n	800658e <_dtoa_r+0xa76>
 8006584:	9906      	ldr	r1, [sp, #24]
 8006586:	430b      	orrs	r3, r1
 8006588:	9904      	ldr	r1, [sp, #16]
 800658a:	430b      	orrs	r3, r1
 800658c:	d122      	bne.n	80065d4 <_dtoa_r+0xabc>
 800658e:	2a00      	cmp	r2, #0
 8006590:	ddee      	ble.n	8006570 <_dtoa_r+0xa58>
 8006592:	ee18 1a10 	vmov	r1, s16
 8006596:	2201      	movs	r2, #1
 8006598:	4620      	mov	r0, r4
 800659a:	f7fe ffbf 	bl	800551c <__lshift>
 800659e:	4631      	mov	r1, r6
 80065a0:	ee08 0a10 	vmov	s16, r0
 80065a4:	f7ff f82a 	bl	80055fc <__mcmp>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	dc03      	bgt.n	80065b4 <_dtoa_r+0xa9c>
 80065ac:	d1e0      	bne.n	8006570 <_dtoa_r+0xa58>
 80065ae:	f01a 0f01 	tst.w	sl, #1
 80065b2:	d0dd      	beq.n	8006570 <_dtoa_r+0xa58>
 80065b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80065b8:	d1d7      	bne.n	800656a <_dtoa_r+0xa52>
 80065ba:	2339      	movs	r3, #57	; 0x39
 80065bc:	f88b 3000 	strb.w	r3, [fp]
 80065c0:	462b      	mov	r3, r5
 80065c2:	461d      	mov	r5, r3
 80065c4:	3b01      	subs	r3, #1
 80065c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80065ca:	2a39      	cmp	r2, #57	; 0x39
 80065cc:	d071      	beq.n	80066b2 <_dtoa_r+0xb9a>
 80065ce:	3201      	adds	r2, #1
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	e746      	b.n	8006462 <_dtoa_r+0x94a>
 80065d4:	2a00      	cmp	r2, #0
 80065d6:	dd07      	ble.n	80065e8 <_dtoa_r+0xad0>
 80065d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80065dc:	d0ed      	beq.n	80065ba <_dtoa_r+0xaa2>
 80065de:	f10a 0301 	add.w	r3, sl, #1
 80065e2:	f88b 3000 	strb.w	r3, [fp]
 80065e6:	e73c      	b.n	8006462 <_dtoa_r+0x94a>
 80065e8:	9b05      	ldr	r3, [sp, #20]
 80065ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80065ee:	4599      	cmp	r9, r3
 80065f0:	d047      	beq.n	8006682 <_dtoa_r+0xb6a>
 80065f2:	ee18 1a10 	vmov	r1, s16
 80065f6:	2300      	movs	r3, #0
 80065f8:	220a      	movs	r2, #10
 80065fa:	4620      	mov	r0, r4
 80065fc:	f7fe fdde 	bl	80051bc <__multadd>
 8006600:	45b8      	cmp	r8, r7
 8006602:	ee08 0a10 	vmov	s16, r0
 8006606:	f04f 0300 	mov.w	r3, #0
 800660a:	f04f 020a 	mov.w	r2, #10
 800660e:	4641      	mov	r1, r8
 8006610:	4620      	mov	r0, r4
 8006612:	d106      	bne.n	8006622 <_dtoa_r+0xb0a>
 8006614:	f7fe fdd2 	bl	80051bc <__multadd>
 8006618:	4680      	mov	r8, r0
 800661a:	4607      	mov	r7, r0
 800661c:	f109 0901 	add.w	r9, r9, #1
 8006620:	e772      	b.n	8006508 <_dtoa_r+0x9f0>
 8006622:	f7fe fdcb 	bl	80051bc <__multadd>
 8006626:	4639      	mov	r1, r7
 8006628:	4680      	mov	r8, r0
 800662a:	2300      	movs	r3, #0
 800662c:	220a      	movs	r2, #10
 800662e:	4620      	mov	r0, r4
 8006630:	f7fe fdc4 	bl	80051bc <__multadd>
 8006634:	4607      	mov	r7, r0
 8006636:	e7f1      	b.n	800661c <_dtoa_r+0xb04>
 8006638:	9b03      	ldr	r3, [sp, #12]
 800663a:	9302      	str	r3, [sp, #8]
 800663c:	9d01      	ldr	r5, [sp, #4]
 800663e:	ee18 0a10 	vmov	r0, s16
 8006642:	4631      	mov	r1, r6
 8006644:	f7ff f9da 	bl	80059fc <quorem>
 8006648:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800664c:	9b01      	ldr	r3, [sp, #4]
 800664e:	f805 ab01 	strb.w	sl, [r5], #1
 8006652:	1aea      	subs	r2, r5, r3
 8006654:	9b02      	ldr	r3, [sp, #8]
 8006656:	4293      	cmp	r3, r2
 8006658:	dd09      	ble.n	800666e <_dtoa_r+0xb56>
 800665a:	ee18 1a10 	vmov	r1, s16
 800665e:	2300      	movs	r3, #0
 8006660:	220a      	movs	r2, #10
 8006662:	4620      	mov	r0, r4
 8006664:	f7fe fdaa 	bl	80051bc <__multadd>
 8006668:	ee08 0a10 	vmov	s16, r0
 800666c:	e7e7      	b.n	800663e <_dtoa_r+0xb26>
 800666e:	9b02      	ldr	r3, [sp, #8]
 8006670:	2b00      	cmp	r3, #0
 8006672:	bfc8      	it	gt
 8006674:	461d      	movgt	r5, r3
 8006676:	9b01      	ldr	r3, [sp, #4]
 8006678:	bfd8      	it	le
 800667a:	2501      	movle	r5, #1
 800667c:	441d      	add	r5, r3
 800667e:	f04f 0800 	mov.w	r8, #0
 8006682:	ee18 1a10 	vmov	r1, s16
 8006686:	2201      	movs	r2, #1
 8006688:	4620      	mov	r0, r4
 800668a:	f7fe ff47 	bl	800551c <__lshift>
 800668e:	4631      	mov	r1, r6
 8006690:	ee08 0a10 	vmov	s16, r0
 8006694:	f7fe ffb2 	bl	80055fc <__mcmp>
 8006698:	2800      	cmp	r0, #0
 800669a:	dc91      	bgt.n	80065c0 <_dtoa_r+0xaa8>
 800669c:	d102      	bne.n	80066a4 <_dtoa_r+0xb8c>
 800669e:	f01a 0f01 	tst.w	sl, #1
 80066a2:	d18d      	bne.n	80065c0 <_dtoa_r+0xaa8>
 80066a4:	462b      	mov	r3, r5
 80066a6:	461d      	mov	r5, r3
 80066a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066ac:	2a30      	cmp	r2, #48	; 0x30
 80066ae:	d0fa      	beq.n	80066a6 <_dtoa_r+0xb8e>
 80066b0:	e6d7      	b.n	8006462 <_dtoa_r+0x94a>
 80066b2:	9a01      	ldr	r2, [sp, #4]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d184      	bne.n	80065c2 <_dtoa_r+0xaaa>
 80066b8:	9b00      	ldr	r3, [sp, #0]
 80066ba:	3301      	adds	r3, #1
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	2331      	movs	r3, #49	; 0x31
 80066c0:	7013      	strb	r3, [r2, #0]
 80066c2:	e6ce      	b.n	8006462 <_dtoa_r+0x94a>
 80066c4:	4b09      	ldr	r3, [pc, #36]	; (80066ec <_dtoa_r+0xbd4>)
 80066c6:	f7ff ba95 	b.w	8005bf4 <_dtoa_r+0xdc>
 80066ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f47f aa6e 	bne.w	8005bae <_dtoa_r+0x96>
 80066d2:	4b07      	ldr	r3, [pc, #28]	; (80066f0 <_dtoa_r+0xbd8>)
 80066d4:	f7ff ba8e 	b.w	8005bf4 <_dtoa_r+0xdc>
 80066d8:	9b02      	ldr	r3, [sp, #8]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	dcae      	bgt.n	800663c <_dtoa_r+0xb24>
 80066de:	9b06      	ldr	r3, [sp, #24]
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	f73f aea8 	bgt.w	8006436 <_dtoa_r+0x91e>
 80066e6:	e7a9      	b.n	800663c <_dtoa_r+0xb24>
 80066e8:	080083a7 	.word	0x080083a7
 80066ec:	080084fd 	.word	0x080084fd
 80066f0:	080084f0 	.word	0x080084f0

080066f4 <fiprintf>:
 80066f4:	b40e      	push	{r1, r2, r3}
 80066f6:	b503      	push	{r0, r1, lr}
 80066f8:	4601      	mov	r1, r0
 80066fa:	ab03      	add	r3, sp, #12
 80066fc:	4805      	ldr	r0, [pc, #20]	; (8006714 <fiprintf+0x20>)
 80066fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006702:	6800      	ldr	r0, [r0, #0]
 8006704:	9301      	str	r3, [sp, #4]
 8006706:	f000 f89f 	bl	8006848 <_vfiprintf_r>
 800670a:	b002      	add	sp, #8
 800670c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006710:	b003      	add	sp, #12
 8006712:	4770      	bx	lr
 8006714:	20000018 	.word	0x20000018

08006718 <malloc>:
 8006718:	4b02      	ldr	r3, [pc, #8]	; (8006724 <malloc+0xc>)
 800671a:	4601      	mov	r1, r0
 800671c:	6818      	ldr	r0, [r3, #0]
 800671e:	f7ff b8c3 	b.w	80058a8 <_malloc_r>
 8006722:	bf00      	nop
 8006724:	20000018 	.word	0x20000018

08006728 <memcpy>:
 8006728:	440a      	add	r2, r1
 800672a:	4291      	cmp	r1, r2
 800672c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006730:	d100      	bne.n	8006734 <memcpy+0xc>
 8006732:	4770      	bx	lr
 8006734:	b510      	push	{r4, lr}
 8006736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800673a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800673e:	4291      	cmp	r1, r2
 8006740:	d1f9      	bne.n	8006736 <memcpy+0xe>
 8006742:	bd10      	pop	{r4, pc}

08006744 <__malloc_lock>:
 8006744:	4801      	ldr	r0, [pc, #4]	; (800674c <__malloc_lock+0x8>)
 8006746:	f000 bdc3 	b.w	80072d0 <__retarget_lock_acquire_recursive>
 800674a:	bf00      	nop
 800674c:	2000055c 	.word	0x2000055c

08006750 <__malloc_unlock>:
 8006750:	4801      	ldr	r0, [pc, #4]	; (8006758 <__malloc_unlock+0x8>)
 8006752:	f000 bdbe 	b.w	80072d2 <__retarget_lock_release_recursive>
 8006756:	bf00      	nop
 8006758:	2000055c 	.word	0x2000055c

0800675c <_free_r>:
 800675c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800675e:	2900      	cmp	r1, #0
 8006760:	d044      	beq.n	80067ec <_free_r+0x90>
 8006762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006766:	9001      	str	r0, [sp, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	f1a1 0404 	sub.w	r4, r1, #4
 800676e:	bfb8      	it	lt
 8006770:	18e4      	addlt	r4, r4, r3
 8006772:	f7ff ffe7 	bl	8006744 <__malloc_lock>
 8006776:	4a1e      	ldr	r2, [pc, #120]	; (80067f0 <_free_r+0x94>)
 8006778:	9801      	ldr	r0, [sp, #4]
 800677a:	6813      	ldr	r3, [r2, #0]
 800677c:	b933      	cbnz	r3, 800678c <_free_r+0x30>
 800677e:	6063      	str	r3, [r4, #4]
 8006780:	6014      	str	r4, [r2, #0]
 8006782:	b003      	add	sp, #12
 8006784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006788:	f7ff bfe2 	b.w	8006750 <__malloc_unlock>
 800678c:	42a3      	cmp	r3, r4
 800678e:	d908      	bls.n	80067a2 <_free_r+0x46>
 8006790:	6825      	ldr	r5, [r4, #0]
 8006792:	1961      	adds	r1, r4, r5
 8006794:	428b      	cmp	r3, r1
 8006796:	bf01      	itttt	eq
 8006798:	6819      	ldreq	r1, [r3, #0]
 800679a:	685b      	ldreq	r3, [r3, #4]
 800679c:	1949      	addeq	r1, r1, r5
 800679e:	6021      	streq	r1, [r4, #0]
 80067a0:	e7ed      	b.n	800677e <_free_r+0x22>
 80067a2:	461a      	mov	r2, r3
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	b10b      	cbz	r3, 80067ac <_free_r+0x50>
 80067a8:	42a3      	cmp	r3, r4
 80067aa:	d9fa      	bls.n	80067a2 <_free_r+0x46>
 80067ac:	6811      	ldr	r1, [r2, #0]
 80067ae:	1855      	adds	r5, r2, r1
 80067b0:	42a5      	cmp	r5, r4
 80067b2:	d10b      	bne.n	80067cc <_free_r+0x70>
 80067b4:	6824      	ldr	r4, [r4, #0]
 80067b6:	4421      	add	r1, r4
 80067b8:	1854      	adds	r4, r2, r1
 80067ba:	42a3      	cmp	r3, r4
 80067bc:	6011      	str	r1, [r2, #0]
 80067be:	d1e0      	bne.n	8006782 <_free_r+0x26>
 80067c0:	681c      	ldr	r4, [r3, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	6053      	str	r3, [r2, #4]
 80067c6:	4421      	add	r1, r4
 80067c8:	6011      	str	r1, [r2, #0]
 80067ca:	e7da      	b.n	8006782 <_free_r+0x26>
 80067cc:	d902      	bls.n	80067d4 <_free_r+0x78>
 80067ce:	230c      	movs	r3, #12
 80067d0:	6003      	str	r3, [r0, #0]
 80067d2:	e7d6      	b.n	8006782 <_free_r+0x26>
 80067d4:	6825      	ldr	r5, [r4, #0]
 80067d6:	1961      	adds	r1, r4, r5
 80067d8:	428b      	cmp	r3, r1
 80067da:	bf04      	itt	eq
 80067dc:	6819      	ldreq	r1, [r3, #0]
 80067de:	685b      	ldreq	r3, [r3, #4]
 80067e0:	6063      	str	r3, [r4, #4]
 80067e2:	bf04      	itt	eq
 80067e4:	1949      	addeq	r1, r1, r5
 80067e6:	6021      	streq	r1, [r4, #0]
 80067e8:	6054      	str	r4, [r2, #4]
 80067ea:	e7ca      	b.n	8006782 <_free_r+0x26>
 80067ec:	b003      	add	sp, #12
 80067ee:	bd30      	pop	{r4, r5, pc}
 80067f0:	20000550 	.word	0x20000550

080067f4 <__sfputc_r>:
 80067f4:	6893      	ldr	r3, [r2, #8]
 80067f6:	3b01      	subs	r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	b410      	push	{r4}
 80067fc:	6093      	str	r3, [r2, #8]
 80067fe:	da08      	bge.n	8006812 <__sfputc_r+0x1e>
 8006800:	6994      	ldr	r4, [r2, #24]
 8006802:	42a3      	cmp	r3, r4
 8006804:	db01      	blt.n	800680a <__sfputc_r+0x16>
 8006806:	290a      	cmp	r1, #10
 8006808:	d103      	bne.n	8006812 <__sfputc_r+0x1e>
 800680a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800680e:	f000 badf 	b.w	8006dd0 <__swbuf_r>
 8006812:	6813      	ldr	r3, [r2, #0]
 8006814:	1c58      	adds	r0, r3, #1
 8006816:	6010      	str	r0, [r2, #0]
 8006818:	7019      	strb	r1, [r3, #0]
 800681a:	4608      	mov	r0, r1
 800681c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006820:	4770      	bx	lr

08006822 <__sfputs_r>:
 8006822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006824:	4606      	mov	r6, r0
 8006826:	460f      	mov	r7, r1
 8006828:	4614      	mov	r4, r2
 800682a:	18d5      	adds	r5, r2, r3
 800682c:	42ac      	cmp	r4, r5
 800682e:	d101      	bne.n	8006834 <__sfputs_r+0x12>
 8006830:	2000      	movs	r0, #0
 8006832:	e007      	b.n	8006844 <__sfputs_r+0x22>
 8006834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006838:	463a      	mov	r2, r7
 800683a:	4630      	mov	r0, r6
 800683c:	f7ff ffda 	bl	80067f4 <__sfputc_r>
 8006840:	1c43      	adds	r3, r0, #1
 8006842:	d1f3      	bne.n	800682c <__sfputs_r+0xa>
 8006844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006848 <_vfiprintf_r>:
 8006848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684c:	460d      	mov	r5, r1
 800684e:	b09d      	sub	sp, #116	; 0x74
 8006850:	4614      	mov	r4, r2
 8006852:	4698      	mov	r8, r3
 8006854:	4606      	mov	r6, r0
 8006856:	b118      	cbz	r0, 8006860 <_vfiprintf_r+0x18>
 8006858:	6983      	ldr	r3, [r0, #24]
 800685a:	b90b      	cbnz	r3, 8006860 <_vfiprintf_r+0x18>
 800685c:	f000 fc9a 	bl	8007194 <__sinit>
 8006860:	4b89      	ldr	r3, [pc, #548]	; (8006a88 <_vfiprintf_r+0x240>)
 8006862:	429d      	cmp	r5, r3
 8006864:	d11b      	bne.n	800689e <_vfiprintf_r+0x56>
 8006866:	6875      	ldr	r5, [r6, #4]
 8006868:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800686a:	07d9      	lsls	r1, r3, #31
 800686c:	d405      	bmi.n	800687a <_vfiprintf_r+0x32>
 800686e:	89ab      	ldrh	r3, [r5, #12]
 8006870:	059a      	lsls	r2, r3, #22
 8006872:	d402      	bmi.n	800687a <_vfiprintf_r+0x32>
 8006874:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006876:	f000 fd2b 	bl	80072d0 <__retarget_lock_acquire_recursive>
 800687a:	89ab      	ldrh	r3, [r5, #12]
 800687c:	071b      	lsls	r3, r3, #28
 800687e:	d501      	bpl.n	8006884 <_vfiprintf_r+0x3c>
 8006880:	692b      	ldr	r3, [r5, #16]
 8006882:	b9eb      	cbnz	r3, 80068c0 <_vfiprintf_r+0x78>
 8006884:	4629      	mov	r1, r5
 8006886:	4630      	mov	r0, r6
 8006888:	f000 faf4 	bl	8006e74 <__swsetup_r>
 800688c:	b1c0      	cbz	r0, 80068c0 <_vfiprintf_r+0x78>
 800688e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006890:	07dc      	lsls	r4, r3, #31
 8006892:	d50e      	bpl.n	80068b2 <_vfiprintf_r+0x6a>
 8006894:	f04f 30ff 	mov.w	r0, #4294967295
 8006898:	b01d      	add	sp, #116	; 0x74
 800689a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800689e:	4b7b      	ldr	r3, [pc, #492]	; (8006a8c <_vfiprintf_r+0x244>)
 80068a0:	429d      	cmp	r5, r3
 80068a2:	d101      	bne.n	80068a8 <_vfiprintf_r+0x60>
 80068a4:	68b5      	ldr	r5, [r6, #8]
 80068a6:	e7df      	b.n	8006868 <_vfiprintf_r+0x20>
 80068a8:	4b79      	ldr	r3, [pc, #484]	; (8006a90 <_vfiprintf_r+0x248>)
 80068aa:	429d      	cmp	r5, r3
 80068ac:	bf08      	it	eq
 80068ae:	68f5      	ldreq	r5, [r6, #12]
 80068b0:	e7da      	b.n	8006868 <_vfiprintf_r+0x20>
 80068b2:	89ab      	ldrh	r3, [r5, #12]
 80068b4:	0598      	lsls	r0, r3, #22
 80068b6:	d4ed      	bmi.n	8006894 <_vfiprintf_r+0x4c>
 80068b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068ba:	f000 fd0a 	bl	80072d2 <__retarget_lock_release_recursive>
 80068be:	e7e9      	b.n	8006894 <_vfiprintf_r+0x4c>
 80068c0:	2300      	movs	r3, #0
 80068c2:	9309      	str	r3, [sp, #36]	; 0x24
 80068c4:	2320      	movs	r3, #32
 80068c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80068ce:	2330      	movs	r3, #48	; 0x30
 80068d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006a94 <_vfiprintf_r+0x24c>
 80068d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068d8:	f04f 0901 	mov.w	r9, #1
 80068dc:	4623      	mov	r3, r4
 80068de:	469a      	mov	sl, r3
 80068e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068e4:	b10a      	cbz	r2, 80068ea <_vfiprintf_r+0xa2>
 80068e6:	2a25      	cmp	r2, #37	; 0x25
 80068e8:	d1f9      	bne.n	80068de <_vfiprintf_r+0x96>
 80068ea:	ebba 0b04 	subs.w	fp, sl, r4
 80068ee:	d00b      	beq.n	8006908 <_vfiprintf_r+0xc0>
 80068f0:	465b      	mov	r3, fp
 80068f2:	4622      	mov	r2, r4
 80068f4:	4629      	mov	r1, r5
 80068f6:	4630      	mov	r0, r6
 80068f8:	f7ff ff93 	bl	8006822 <__sfputs_r>
 80068fc:	3001      	adds	r0, #1
 80068fe:	f000 80aa 	beq.w	8006a56 <_vfiprintf_r+0x20e>
 8006902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006904:	445a      	add	r2, fp
 8006906:	9209      	str	r2, [sp, #36]	; 0x24
 8006908:	f89a 3000 	ldrb.w	r3, [sl]
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 80a2 	beq.w	8006a56 <_vfiprintf_r+0x20e>
 8006912:	2300      	movs	r3, #0
 8006914:	f04f 32ff 	mov.w	r2, #4294967295
 8006918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800691c:	f10a 0a01 	add.w	sl, sl, #1
 8006920:	9304      	str	r3, [sp, #16]
 8006922:	9307      	str	r3, [sp, #28]
 8006924:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006928:	931a      	str	r3, [sp, #104]	; 0x68
 800692a:	4654      	mov	r4, sl
 800692c:	2205      	movs	r2, #5
 800692e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006932:	4858      	ldr	r0, [pc, #352]	; (8006a94 <_vfiprintf_r+0x24c>)
 8006934:	f7f9 fc4c 	bl	80001d0 <memchr>
 8006938:	9a04      	ldr	r2, [sp, #16]
 800693a:	b9d8      	cbnz	r0, 8006974 <_vfiprintf_r+0x12c>
 800693c:	06d1      	lsls	r1, r2, #27
 800693e:	bf44      	itt	mi
 8006940:	2320      	movmi	r3, #32
 8006942:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006946:	0713      	lsls	r3, r2, #28
 8006948:	bf44      	itt	mi
 800694a:	232b      	movmi	r3, #43	; 0x2b
 800694c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006950:	f89a 3000 	ldrb.w	r3, [sl]
 8006954:	2b2a      	cmp	r3, #42	; 0x2a
 8006956:	d015      	beq.n	8006984 <_vfiprintf_r+0x13c>
 8006958:	9a07      	ldr	r2, [sp, #28]
 800695a:	4654      	mov	r4, sl
 800695c:	2000      	movs	r0, #0
 800695e:	f04f 0c0a 	mov.w	ip, #10
 8006962:	4621      	mov	r1, r4
 8006964:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006968:	3b30      	subs	r3, #48	; 0x30
 800696a:	2b09      	cmp	r3, #9
 800696c:	d94e      	bls.n	8006a0c <_vfiprintf_r+0x1c4>
 800696e:	b1b0      	cbz	r0, 800699e <_vfiprintf_r+0x156>
 8006970:	9207      	str	r2, [sp, #28]
 8006972:	e014      	b.n	800699e <_vfiprintf_r+0x156>
 8006974:	eba0 0308 	sub.w	r3, r0, r8
 8006978:	fa09 f303 	lsl.w	r3, r9, r3
 800697c:	4313      	orrs	r3, r2
 800697e:	9304      	str	r3, [sp, #16]
 8006980:	46a2      	mov	sl, r4
 8006982:	e7d2      	b.n	800692a <_vfiprintf_r+0xe2>
 8006984:	9b03      	ldr	r3, [sp, #12]
 8006986:	1d19      	adds	r1, r3, #4
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	9103      	str	r1, [sp, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	bfbb      	ittet	lt
 8006990:	425b      	neglt	r3, r3
 8006992:	f042 0202 	orrlt.w	r2, r2, #2
 8006996:	9307      	strge	r3, [sp, #28]
 8006998:	9307      	strlt	r3, [sp, #28]
 800699a:	bfb8      	it	lt
 800699c:	9204      	strlt	r2, [sp, #16]
 800699e:	7823      	ldrb	r3, [r4, #0]
 80069a0:	2b2e      	cmp	r3, #46	; 0x2e
 80069a2:	d10c      	bne.n	80069be <_vfiprintf_r+0x176>
 80069a4:	7863      	ldrb	r3, [r4, #1]
 80069a6:	2b2a      	cmp	r3, #42	; 0x2a
 80069a8:	d135      	bne.n	8006a16 <_vfiprintf_r+0x1ce>
 80069aa:	9b03      	ldr	r3, [sp, #12]
 80069ac:	1d1a      	adds	r2, r3, #4
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	9203      	str	r2, [sp, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	bfb8      	it	lt
 80069b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80069ba:	3402      	adds	r4, #2
 80069bc:	9305      	str	r3, [sp, #20]
 80069be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006aa4 <_vfiprintf_r+0x25c>
 80069c2:	7821      	ldrb	r1, [r4, #0]
 80069c4:	2203      	movs	r2, #3
 80069c6:	4650      	mov	r0, sl
 80069c8:	f7f9 fc02 	bl	80001d0 <memchr>
 80069cc:	b140      	cbz	r0, 80069e0 <_vfiprintf_r+0x198>
 80069ce:	2340      	movs	r3, #64	; 0x40
 80069d0:	eba0 000a 	sub.w	r0, r0, sl
 80069d4:	fa03 f000 	lsl.w	r0, r3, r0
 80069d8:	9b04      	ldr	r3, [sp, #16]
 80069da:	4303      	orrs	r3, r0
 80069dc:	3401      	adds	r4, #1
 80069de:	9304      	str	r3, [sp, #16]
 80069e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069e4:	482c      	ldr	r0, [pc, #176]	; (8006a98 <_vfiprintf_r+0x250>)
 80069e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069ea:	2206      	movs	r2, #6
 80069ec:	f7f9 fbf0 	bl	80001d0 <memchr>
 80069f0:	2800      	cmp	r0, #0
 80069f2:	d03f      	beq.n	8006a74 <_vfiprintf_r+0x22c>
 80069f4:	4b29      	ldr	r3, [pc, #164]	; (8006a9c <_vfiprintf_r+0x254>)
 80069f6:	bb1b      	cbnz	r3, 8006a40 <_vfiprintf_r+0x1f8>
 80069f8:	9b03      	ldr	r3, [sp, #12]
 80069fa:	3307      	adds	r3, #7
 80069fc:	f023 0307 	bic.w	r3, r3, #7
 8006a00:	3308      	adds	r3, #8
 8006a02:	9303      	str	r3, [sp, #12]
 8006a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a06:	443b      	add	r3, r7
 8006a08:	9309      	str	r3, [sp, #36]	; 0x24
 8006a0a:	e767      	b.n	80068dc <_vfiprintf_r+0x94>
 8006a0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a10:	460c      	mov	r4, r1
 8006a12:	2001      	movs	r0, #1
 8006a14:	e7a5      	b.n	8006962 <_vfiprintf_r+0x11a>
 8006a16:	2300      	movs	r3, #0
 8006a18:	3401      	adds	r4, #1
 8006a1a:	9305      	str	r3, [sp, #20]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	f04f 0c0a 	mov.w	ip, #10
 8006a22:	4620      	mov	r0, r4
 8006a24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a28:	3a30      	subs	r2, #48	; 0x30
 8006a2a:	2a09      	cmp	r2, #9
 8006a2c:	d903      	bls.n	8006a36 <_vfiprintf_r+0x1ee>
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d0c5      	beq.n	80069be <_vfiprintf_r+0x176>
 8006a32:	9105      	str	r1, [sp, #20]
 8006a34:	e7c3      	b.n	80069be <_vfiprintf_r+0x176>
 8006a36:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e7f0      	b.n	8006a22 <_vfiprintf_r+0x1da>
 8006a40:	ab03      	add	r3, sp, #12
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	462a      	mov	r2, r5
 8006a46:	4b16      	ldr	r3, [pc, #88]	; (8006aa0 <_vfiprintf_r+0x258>)
 8006a48:	a904      	add	r1, sp, #16
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	f3af 8000 	nop.w
 8006a50:	4607      	mov	r7, r0
 8006a52:	1c78      	adds	r0, r7, #1
 8006a54:	d1d6      	bne.n	8006a04 <_vfiprintf_r+0x1bc>
 8006a56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a58:	07d9      	lsls	r1, r3, #31
 8006a5a:	d405      	bmi.n	8006a68 <_vfiprintf_r+0x220>
 8006a5c:	89ab      	ldrh	r3, [r5, #12]
 8006a5e:	059a      	lsls	r2, r3, #22
 8006a60:	d402      	bmi.n	8006a68 <_vfiprintf_r+0x220>
 8006a62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a64:	f000 fc35 	bl	80072d2 <__retarget_lock_release_recursive>
 8006a68:	89ab      	ldrh	r3, [r5, #12]
 8006a6a:	065b      	lsls	r3, r3, #25
 8006a6c:	f53f af12 	bmi.w	8006894 <_vfiprintf_r+0x4c>
 8006a70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a72:	e711      	b.n	8006898 <_vfiprintf_r+0x50>
 8006a74:	ab03      	add	r3, sp, #12
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	462a      	mov	r2, r5
 8006a7a:	4b09      	ldr	r3, [pc, #36]	; (8006aa0 <_vfiprintf_r+0x258>)
 8006a7c:	a904      	add	r1, sp, #16
 8006a7e:	4630      	mov	r0, r6
 8006a80:	f000 f880 	bl	8006b84 <_printf_i>
 8006a84:	e7e4      	b.n	8006a50 <_vfiprintf_r+0x208>
 8006a86:	bf00      	nop
 8006a88:	080085b0 	.word	0x080085b0
 8006a8c:	080085d0 	.word	0x080085d0
 8006a90:	08008590 	.word	0x08008590
 8006a94:	0800855a 	.word	0x0800855a
 8006a98:	08008564 	.word	0x08008564
 8006a9c:	00000000 	.word	0x00000000
 8006aa0:	08006823 	.word	0x08006823
 8006aa4:	08008560 	.word	0x08008560

08006aa8 <_printf_common>:
 8006aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aac:	4616      	mov	r6, r2
 8006aae:	4699      	mov	r9, r3
 8006ab0:	688a      	ldr	r2, [r1, #8]
 8006ab2:	690b      	ldr	r3, [r1, #16]
 8006ab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	bfb8      	it	lt
 8006abc:	4613      	movlt	r3, r2
 8006abe:	6033      	str	r3, [r6, #0]
 8006ac0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ac4:	4607      	mov	r7, r0
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	b10a      	cbz	r2, 8006ace <_printf_common+0x26>
 8006aca:	3301      	adds	r3, #1
 8006acc:	6033      	str	r3, [r6, #0]
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	0699      	lsls	r1, r3, #26
 8006ad2:	bf42      	ittt	mi
 8006ad4:	6833      	ldrmi	r3, [r6, #0]
 8006ad6:	3302      	addmi	r3, #2
 8006ad8:	6033      	strmi	r3, [r6, #0]
 8006ada:	6825      	ldr	r5, [r4, #0]
 8006adc:	f015 0506 	ands.w	r5, r5, #6
 8006ae0:	d106      	bne.n	8006af0 <_printf_common+0x48>
 8006ae2:	f104 0a19 	add.w	sl, r4, #25
 8006ae6:	68e3      	ldr	r3, [r4, #12]
 8006ae8:	6832      	ldr	r2, [r6, #0]
 8006aea:	1a9b      	subs	r3, r3, r2
 8006aec:	42ab      	cmp	r3, r5
 8006aee:	dc26      	bgt.n	8006b3e <_printf_common+0x96>
 8006af0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006af4:	1e13      	subs	r3, r2, #0
 8006af6:	6822      	ldr	r2, [r4, #0]
 8006af8:	bf18      	it	ne
 8006afa:	2301      	movne	r3, #1
 8006afc:	0692      	lsls	r2, r2, #26
 8006afe:	d42b      	bmi.n	8006b58 <_printf_common+0xb0>
 8006b00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b04:	4649      	mov	r1, r9
 8006b06:	4638      	mov	r0, r7
 8006b08:	47c0      	blx	r8
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	d01e      	beq.n	8006b4c <_printf_common+0xa4>
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	68e5      	ldr	r5, [r4, #12]
 8006b12:	6832      	ldr	r2, [r6, #0]
 8006b14:	f003 0306 	and.w	r3, r3, #6
 8006b18:	2b04      	cmp	r3, #4
 8006b1a:	bf08      	it	eq
 8006b1c:	1aad      	subeq	r5, r5, r2
 8006b1e:	68a3      	ldr	r3, [r4, #8]
 8006b20:	6922      	ldr	r2, [r4, #16]
 8006b22:	bf0c      	ite	eq
 8006b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b28:	2500      	movne	r5, #0
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	bfc4      	itt	gt
 8006b2e:	1a9b      	subgt	r3, r3, r2
 8006b30:	18ed      	addgt	r5, r5, r3
 8006b32:	2600      	movs	r6, #0
 8006b34:	341a      	adds	r4, #26
 8006b36:	42b5      	cmp	r5, r6
 8006b38:	d11a      	bne.n	8006b70 <_printf_common+0xc8>
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	e008      	b.n	8006b50 <_printf_common+0xa8>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	4652      	mov	r2, sl
 8006b42:	4649      	mov	r1, r9
 8006b44:	4638      	mov	r0, r7
 8006b46:	47c0      	blx	r8
 8006b48:	3001      	adds	r0, #1
 8006b4a:	d103      	bne.n	8006b54 <_printf_common+0xac>
 8006b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b54:	3501      	adds	r5, #1
 8006b56:	e7c6      	b.n	8006ae6 <_printf_common+0x3e>
 8006b58:	18e1      	adds	r1, r4, r3
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	2030      	movs	r0, #48	; 0x30
 8006b5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b62:	4422      	add	r2, r4
 8006b64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b6c:	3302      	adds	r3, #2
 8006b6e:	e7c7      	b.n	8006b00 <_printf_common+0x58>
 8006b70:	2301      	movs	r3, #1
 8006b72:	4622      	mov	r2, r4
 8006b74:	4649      	mov	r1, r9
 8006b76:	4638      	mov	r0, r7
 8006b78:	47c0      	blx	r8
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	d0e6      	beq.n	8006b4c <_printf_common+0xa4>
 8006b7e:	3601      	adds	r6, #1
 8006b80:	e7d9      	b.n	8006b36 <_printf_common+0x8e>
	...

08006b84 <_printf_i>:
 8006b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b88:	7e0f      	ldrb	r7, [r1, #24]
 8006b8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b8c:	2f78      	cmp	r7, #120	; 0x78
 8006b8e:	4691      	mov	r9, r2
 8006b90:	4680      	mov	r8, r0
 8006b92:	460c      	mov	r4, r1
 8006b94:	469a      	mov	sl, r3
 8006b96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b9a:	d807      	bhi.n	8006bac <_printf_i+0x28>
 8006b9c:	2f62      	cmp	r7, #98	; 0x62
 8006b9e:	d80a      	bhi.n	8006bb6 <_printf_i+0x32>
 8006ba0:	2f00      	cmp	r7, #0
 8006ba2:	f000 80d8 	beq.w	8006d56 <_printf_i+0x1d2>
 8006ba6:	2f58      	cmp	r7, #88	; 0x58
 8006ba8:	f000 80a3 	beq.w	8006cf2 <_printf_i+0x16e>
 8006bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bb4:	e03a      	b.n	8006c2c <_printf_i+0xa8>
 8006bb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bba:	2b15      	cmp	r3, #21
 8006bbc:	d8f6      	bhi.n	8006bac <_printf_i+0x28>
 8006bbe:	a101      	add	r1, pc, #4	; (adr r1, 8006bc4 <_printf_i+0x40>)
 8006bc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bc4:	08006c1d 	.word	0x08006c1d
 8006bc8:	08006c31 	.word	0x08006c31
 8006bcc:	08006bad 	.word	0x08006bad
 8006bd0:	08006bad 	.word	0x08006bad
 8006bd4:	08006bad 	.word	0x08006bad
 8006bd8:	08006bad 	.word	0x08006bad
 8006bdc:	08006c31 	.word	0x08006c31
 8006be0:	08006bad 	.word	0x08006bad
 8006be4:	08006bad 	.word	0x08006bad
 8006be8:	08006bad 	.word	0x08006bad
 8006bec:	08006bad 	.word	0x08006bad
 8006bf0:	08006d3d 	.word	0x08006d3d
 8006bf4:	08006c61 	.word	0x08006c61
 8006bf8:	08006d1f 	.word	0x08006d1f
 8006bfc:	08006bad 	.word	0x08006bad
 8006c00:	08006bad 	.word	0x08006bad
 8006c04:	08006d5f 	.word	0x08006d5f
 8006c08:	08006bad 	.word	0x08006bad
 8006c0c:	08006c61 	.word	0x08006c61
 8006c10:	08006bad 	.word	0x08006bad
 8006c14:	08006bad 	.word	0x08006bad
 8006c18:	08006d27 	.word	0x08006d27
 8006c1c:	682b      	ldr	r3, [r5, #0]
 8006c1e:	1d1a      	adds	r2, r3, #4
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	602a      	str	r2, [r5, #0]
 8006c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e0a3      	b.n	8006d78 <_printf_i+0x1f4>
 8006c30:	6820      	ldr	r0, [r4, #0]
 8006c32:	6829      	ldr	r1, [r5, #0]
 8006c34:	0606      	lsls	r6, r0, #24
 8006c36:	f101 0304 	add.w	r3, r1, #4
 8006c3a:	d50a      	bpl.n	8006c52 <_printf_i+0xce>
 8006c3c:	680e      	ldr	r6, [r1, #0]
 8006c3e:	602b      	str	r3, [r5, #0]
 8006c40:	2e00      	cmp	r6, #0
 8006c42:	da03      	bge.n	8006c4c <_printf_i+0xc8>
 8006c44:	232d      	movs	r3, #45	; 0x2d
 8006c46:	4276      	negs	r6, r6
 8006c48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c4c:	485e      	ldr	r0, [pc, #376]	; (8006dc8 <_printf_i+0x244>)
 8006c4e:	230a      	movs	r3, #10
 8006c50:	e019      	b.n	8006c86 <_printf_i+0x102>
 8006c52:	680e      	ldr	r6, [r1, #0]
 8006c54:	602b      	str	r3, [r5, #0]
 8006c56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c5a:	bf18      	it	ne
 8006c5c:	b236      	sxthne	r6, r6
 8006c5e:	e7ef      	b.n	8006c40 <_printf_i+0xbc>
 8006c60:	682b      	ldr	r3, [r5, #0]
 8006c62:	6820      	ldr	r0, [r4, #0]
 8006c64:	1d19      	adds	r1, r3, #4
 8006c66:	6029      	str	r1, [r5, #0]
 8006c68:	0601      	lsls	r1, r0, #24
 8006c6a:	d501      	bpl.n	8006c70 <_printf_i+0xec>
 8006c6c:	681e      	ldr	r6, [r3, #0]
 8006c6e:	e002      	b.n	8006c76 <_printf_i+0xf2>
 8006c70:	0646      	lsls	r6, r0, #25
 8006c72:	d5fb      	bpl.n	8006c6c <_printf_i+0xe8>
 8006c74:	881e      	ldrh	r6, [r3, #0]
 8006c76:	4854      	ldr	r0, [pc, #336]	; (8006dc8 <_printf_i+0x244>)
 8006c78:	2f6f      	cmp	r7, #111	; 0x6f
 8006c7a:	bf0c      	ite	eq
 8006c7c:	2308      	moveq	r3, #8
 8006c7e:	230a      	movne	r3, #10
 8006c80:	2100      	movs	r1, #0
 8006c82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c86:	6865      	ldr	r5, [r4, #4]
 8006c88:	60a5      	str	r5, [r4, #8]
 8006c8a:	2d00      	cmp	r5, #0
 8006c8c:	bfa2      	ittt	ge
 8006c8e:	6821      	ldrge	r1, [r4, #0]
 8006c90:	f021 0104 	bicge.w	r1, r1, #4
 8006c94:	6021      	strge	r1, [r4, #0]
 8006c96:	b90e      	cbnz	r6, 8006c9c <_printf_i+0x118>
 8006c98:	2d00      	cmp	r5, #0
 8006c9a:	d04d      	beq.n	8006d38 <_printf_i+0x1b4>
 8006c9c:	4615      	mov	r5, r2
 8006c9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ca2:	fb03 6711 	mls	r7, r3, r1, r6
 8006ca6:	5dc7      	ldrb	r7, [r0, r7]
 8006ca8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cac:	4637      	mov	r7, r6
 8006cae:	42bb      	cmp	r3, r7
 8006cb0:	460e      	mov	r6, r1
 8006cb2:	d9f4      	bls.n	8006c9e <_printf_i+0x11a>
 8006cb4:	2b08      	cmp	r3, #8
 8006cb6:	d10b      	bne.n	8006cd0 <_printf_i+0x14c>
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	07de      	lsls	r6, r3, #31
 8006cbc:	d508      	bpl.n	8006cd0 <_printf_i+0x14c>
 8006cbe:	6923      	ldr	r3, [r4, #16]
 8006cc0:	6861      	ldr	r1, [r4, #4]
 8006cc2:	4299      	cmp	r1, r3
 8006cc4:	bfde      	ittt	le
 8006cc6:	2330      	movle	r3, #48	; 0x30
 8006cc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ccc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cd0:	1b52      	subs	r2, r2, r5
 8006cd2:	6122      	str	r2, [r4, #16]
 8006cd4:	f8cd a000 	str.w	sl, [sp]
 8006cd8:	464b      	mov	r3, r9
 8006cda:	aa03      	add	r2, sp, #12
 8006cdc:	4621      	mov	r1, r4
 8006cde:	4640      	mov	r0, r8
 8006ce0:	f7ff fee2 	bl	8006aa8 <_printf_common>
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	d14c      	bne.n	8006d82 <_printf_i+0x1fe>
 8006ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cec:	b004      	add	sp, #16
 8006cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cf2:	4835      	ldr	r0, [pc, #212]	; (8006dc8 <_printf_i+0x244>)
 8006cf4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006cf8:	6829      	ldr	r1, [r5, #0]
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d00:	6029      	str	r1, [r5, #0]
 8006d02:	061d      	lsls	r5, r3, #24
 8006d04:	d514      	bpl.n	8006d30 <_printf_i+0x1ac>
 8006d06:	07df      	lsls	r7, r3, #31
 8006d08:	bf44      	itt	mi
 8006d0a:	f043 0320 	orrmi.w	r3, r3, #32
 8006d0e:	6023      	strmi	r3, [r4, #0]
 8006d10:	b91e      	cbnz	r6, 8006d1a <_printf_i+0x196>
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	f023 0320 	bic.w	r3, r3, #32
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	2310      	movs	r3, #16
 8006d1c:	e7b0      	b.n	8006c80 <_printf_i+0xfc>
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	f043 0320 	orr.w	r3, r3, #32
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	2378      	movs	r3, #120	; 0x78
 8006d28:	4828      	ldr	r0, [pc, #160]	; (8006dcc <_printf_i+0x248>)
 8006d2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d2e:	e7e3      	b.n	8006cf8 <_printf_i+0x174>
 8006d30:	0659      	lsls	r1, r3, #25
 8006d32:	bf48      	it	mi
 8006d34:	b2b6      	uxthmi	r6, r6
 8006d36:	e7e6      	b.n	8006d06 <_printf_i+0x182>
 8006d38:	4615      	mov	r5, r2
 8006d3a:	e7bb      	b.n	8006cb4 <_printf_i+0x130>
 8006d3c:	682b      	ldr	r3, [r5, #0]
 8006d3e:	6826      	ldr	r6, [r4, #0]
 8006d40:	6961      	ldr	r1, [r4, #20]
 8006d42:	1d18      	adds	r0, r3, #4
 8006d44:	6028      	str	r0, [r5, #0]
 8006d46:	0635      	lsls	r5, r6, #24
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	d501      	bpl.n	8006d50 <_printf_i+0x1cc>
 8006d4c:	6019      	str	r1, [r3, #0]
 8006d4e:	e002      	b.n	8006d56 <_printf_i+0x1d2>
 8006d50:	0670      	lsls	r0, r6, #25
 8006d52:	d5fb      	bpl.n	8006d4c <_printf_i+0x1c8>
 8006d54:	8019      	strh	r1, [r3, #0]
 8006d56:	2300      	movs	r3, #0
 8006d58:	6123      	str	r3, [r4, #16]
 8006d5a:	4615      	mov	r5, r2
 8006d5c:	e7ba      	b.n	8006cd4 <_printf_i+0x150>
 8006d5e:	682b      	ldr	r3, [r5, #0]
 8006d60:	1d1a      	adds	r2, r3, #4
 8006d62:	602a      	str	r2, [r5, #0]
 8006d64:	681d      	ldr	r5, [r3, #0]
 8006d66:	6862      	ldr	r2, [r4, #4]
 8006d68:	2100      	movs	r1, #0
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	f7f9 fa30 	bl	80001d0 <memchr>
 8006d70:	b108      	cbz	r0, 8006d76 <_printf_i+0x1f2>
 8006d72:	1b40      	subs	r0, r0, r5
 8006d74:	6060      	str	r0, [r4, #4]
 8006d76:	6863      	ldr	r3, [r4, #4]
 8006d78:	6123      	str	r3, [r4, #16]
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d80:	e7a8      	b.n	8006cd4 <_printf_i+0x150>
 8006d82:	6923      	ldr	r3, [r4, #16]
 8006d84:	462a      	mov	r2, r5
 8006d86:	4649      	mov	r1, r9
 8006d88:	4640      	mov	r0, r8
 8006d8a:	47d0      	blx	sl
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	d0ab      	beq.n	8006ce8 <_printf_i+0x164>
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	079b      	lsls	r3, r3, #30
 8006d94:	d413      	bmi.n	8006dbe <_printf_i+0x23a>
 8006d96:	68e0      	ldr	r0, [r4, #12]
 8006d98:	9b03      	ldr	r3, [sp, #12]
 8006d9a:	4298      	cmp	r0, r3
 8006d9c:	bfb8      	it	lt
 8006d9e:	4618      	movlt	r0, r3
 8006da0:	e7a4      	b.n	8006cec <_printf_i+0x168>
 8006da2:	2301      	movs	r3, #1
 8006da4:	4632      	mov	r2, r6
 8006da6:	4649      	mov	r1, r9
 8006da8:	4640      	mov	r0, r8
 8006daa:	47d0      	blx	sl
 8006dac:	3001      	adds	r0, #1
 8006dae:	d09b      	beq.n	8006ce8 <_printf_i+0x164>
 8006db0:	3501      	adds	r5, #1
 8006db2:	68e3      	ldr	r3, [r4, #12]
 8006db4:	9903      	ldr	r1, [sp, #12]
 8006db6:	1a5b      	subs	r3, r3, r1
 8006db8:	42ab      	cmp	r3, r5
 8006dba:	dcf2      	bgt.n	8006da2 <_printf_i+0x21e>
 8006dbc:	e7eb      	b.n	8006d96 <_printf_i+0x212>
 8006dbe:	2500      	movs	r5, #0
 8006dc0:	f104 0619 	add.w	r6, r4, #25
 8006dc4:	e7f5      	b.n	8006db2 <_printf_i+0x22e>
 8006dc6:	bf00      	nop
 8006dc8:	0800856b 	.word	0x0800856b
 8006dcc:	0800857c 	.word	0x0800857c

08006dd0 <__swbuf_r>:
 8006dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd2:	460e      	mov	r6, r1
 8006dd4:	4614      	mov	r4, r2
 8006dd6:	4605      	mov	r5, r0
 8006dd8:	b118      	cbz	r0, 8006de2 <__swbuf_r+0x12>
 8006dda:	6983      	ldr	r3, [r0, #24]
 8006ddc:	b90b      	cbnz	r3, 8006de2 <__swbuf_r+0x12>
 8006dde:	f000 f9d9 	bl	8007194 <__sinit>
 8006de2:	4b21      	ldr	r3, [pc, #132]	; (8006e68 <__swbuf_r+0x98>)
 8006de4:	429c      	cmp	r4, r3
 8006de6:	d12b      	bne.n	8006e40 <__swbuf_r+0x70>
 8006de8:	686c      	ldr	r4, [r5, #4]
 8006dea:	69a3      	ldr	r3, [r4, #24]
 8006dec:	60a3      	str	r3, [r4, #8]
 8006dee:	89a3      	ldrh	r3, [r4, #12]
 8006df0:	071a      	lsls	r2, r3, #28
 8006df2:	d52f      	bpl.n	8006e54 <__swbuf_r+0x84>
 8006df4:	6923      	ldr	r3, [r4, #16]
 8006df6:	b36b      	cbz	r3, 8006e54 <__swbuf_r+0x84>
 8006df8:	6923      	ldr	r3, [r4, #16]
 8006dfa:	6820      	ldr	r0, [r4, #0]
 8006dfc:	1ac0      	subs	r0, r0, r3
 8006dfe:	6963      	ldr	r3, [r4, #20]
 8006e00:	b2f6      	uxtb	r6, r6
 8006e02:	4283      	cmp	r3, r0
 8006e04:	4637      	mov	r7, r6
 8006e06:	dc04      	bgt.n	8006e12 <__swbuf_r+0x42>
 8006e08:	4621      	mov	r1, r4
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	f000 f92e 	bl	800706c <_fflush_r>
 8006e10:	bb30      	cbnz	r0, 8006e60 <__swbuf_r+0x90>
 8006e12:	68a3      	ldr	r3, [r4, #8]
 8006e14:	3b01      	subs	r3, #1
 8006e16:	60a3      	str	r3, [r4, #8]
 8006e18:	6823      	ldr	r3, [r4, #0]
 8006e1a:	1c5a      	adds	r2, r3, #1
 8006e1c:	6022      	str	r2, [r4, #0]
 8006e1e:	701e      	strb	r6, [r3, #0]
 8006e20:	6963      	ldr	r3, [r4, #20]
 8006e22:	3001      	adds	r0, #1
 8006e24:	4283      	cmp	r3, r0
 8006e26:	d004      	beq.n	8006e32 <__swbuf_r+0x62>
 8006e28:	89a3      	ldrh	r3, [r4, #12]
 8006e2a:	07db      	lsls	r3, r3, #31
 8006e2c:	d506      	bpl.n	8006e3c <__swbuf_r+0x6c>
 8006e2e:	2e0a      	cmp	r6, #10
 8006e30:	d104      	bne.n	8006e3c <__swbuf_r+0x6c>
 8006e32:	4621      	mov	r1, r4
 8006e34:	4628      	mov	r0, r5
 8006e36:	f000 f919 	bl	800706c <_fflush_r>
 8006e3a:	b988      	cbnz	r0, 8006e60 <__swbuf_r+0x90>
 8006e3c:	4638      	mov	r0, r7
 8006e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e40:	4b0a      	ldr	r3, [pc, #40]	; (8006e6c <__swbuf_r+0x9c>)
 8006e42:	429c      	cmp	r4, r3
 8006e44:	d101      	bne.n	8006e4a <__swbuf_r+0x7a>
 8006e46:	68ac      	ldr	r4, [r5, #8]
 8006e48:	e7cf      	b.n	8006dea <__swbuf_r+0x1a>
 8006e4a:	4b09      	ldr	r3, [pc, #36]	; (8006e70 <__swbuf_r+0xa0>)
 8006e4c:	429c      	cmp	r4, r3
 8006e4e:	bf08      	it	eq
 8006e50:	68ec      	ldreq	r4, [r5, #12]
 8006e52:	e7ca      	b.n	8006dea <__swbuf_r+0x1a>
 8006e54:	4621      	mov	r1, r4
 8006e56:	4628      	mov	r0, r5
 8006e58:	f000 f80c 	bl	8006e74 <__swsetup_r>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	d0cb      	beq.n	8006df8 <__swbuf_r+0x28>
 8006e60:	f04f 37ff 	mov.w	r7, #4294967295
 8006e64:	e7ea      	b.n	8006e3c <__swbuf_r+0x6c>
 8006e66:	bf00      	nop
 8006e68:	080085b0 	.word	0x080085b0
 8006e6c:	080085d0 	.word	0x080085d0
 8006e70:	08008590 	.word	0x08008590

08006e74 <__swsetup_r>:
 8006e74:	4b32      	ldr	r3, [pc, #200]	; (8006f40 <__swsetup_r+0xcc>)
 8006e76:	b570      	push	{r4, r5, r6, lr}
 8006e78:	681d      	ldr	r5, [r3, #0]
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	460c      	mov	r4, r1
 8006e7e:	b125      	cbz	r5, 8006e8a <__swsetup_r+0x16>
 8006e80:	69ab      	ldr	r3, [r5, #24]
 8006e82:	b913      	cbnz	r3, 8006e8a <__swsetup_r+0x16>
 8006e84:	4628      	mov	r0, r5
 8006e86:	f000 f985 	bl	8007194 <__sinit>
 8006e8a:	4b2e      	ldr	r3, [pc, #184]	; (8006f44 <__swsetup_r+0xd0>)
 8006e8c:	429c      	cmp	r4, r3
 8006e8e:	d10f      	bne.n	8006eb0 <__swsetup_r+0x3c>
 8006e90:	686c      	ldr	r4, [r5, #4]
 8006e92:	89a3      	ldrh	r3, [r4, #12]
 8006e94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e98:	0719      	lsls	r1, r3, #28
 8006e9a:	d42c      	bmi.n	8006ef6 <__swsetup_r+0x82>
 8006e9c:	06dd      	lsls	r5, r3, #27
 8006e9e:	d411      	bmi.n	8006ec4 <__swsetup_r+0x50>
 8006ea0:	2309      	movs	r3, #9
 8006ea2:	6033      	str	r3, [r6, #0]
 8006ea4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ea8:	81a3      	strh	r3, [r4, #12]
 8006eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8006eae:	e03e      	b.n	8006f2e <__swsetup_r+0xba>
 8006eb0:	4b25      	ldr	r3, [pc, #148]	; (8006f48 <__swsetup_r+0xd4>)
 8006eb2:	429c      	cmp	r4, r3
 8006eb4:	d101      	bne.n	8006eba <__swsetup_r+0x46>
 8006eb6:	68ac      	ldr	r4, [r5, #8]
 8006eb8:	e7eb      	b.n	8006e92 <__swsetup_r+0x1e>
 8006eba:	4b24      	ldr	r3, [pc, #144]	; (8006f4c <__swsetup_r+0xd8>)
 8006ebc:	429c      	cmp	r4, r3
 8006ebe:	bf08      	it	eq
 8006ec0:	68ec      	ldreq	r4, [r5, #12]
 8006ec2:	e7e6      	b.n	8006e92 <__swsetup_r+0x1e>
 8006ec4:	0758      	lsls	r0, r3, #29
 8006ec6:	d512      	bpl.n	8006eee <__swsetup_r+0x7a>
 8006ec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006eca:	b141      	cbz	r1, 8006ede <__swsetup_r+0x6a>
 8006ecc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ed0:	4299      	cmp	r1, r3
 8006ed2:	d002      	beq.n	8006eda <__swsetup_r+0x66>
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	f7ff fc41 	bl	800675c <_free_r>
 8006eda:	2300      	movs	r3, #0
 8006edc:	6363      	str	r3, [r4, #52]	; 0x34
 8006ede:	89a3      	ldrh	r3, [r4, #12]
 8006ee0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ee4:	81a3      	strh	r3, [r4, #12]
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	6063      	str	r3, [r4, #4]
 8006eea:	6923      	ldr	r3, [r4, #16]
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	89a3      	ldrh	r3, [r4, #12]
 8006ef0:	f043 0308 	orr.w	r3, r3, #8
 8006ef4:	81a3      	strh	r3, [r4, #12]
 8006ef6:	6923      	ldr	r3, [r4, #16]
 8006ef8:	b94b      	cbnz	r3, 8006f0e <__swsetup_r+0x9a>
 8006efa:	89a3      	ldrh	r3, [r4, #12]
 8006efc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f04:	d003      	beq.n	8006f0e <__swsetup_r+0x9a>
 8006f06:	4621      	mov	r1, r4
 8006f08:	4630      	mov	r0, r6
 8006f0a:	f000 fa09 	bl	8007320 <__smakebuf_r>
 8006f0e:	89a0      	ldrh	r0, [r4, #12]
 8006f10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f14:	f010 0301 	ands.w	r3, r0, #1
 8006f18:	d00a      	beq.n	8006f30 <__swsetup_r+0xbc>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60a3      	str	r3, [r4, #8]
 8006f1e:	6963      	ldr	r3, [r4, #20]
 8006f20:	425b      	negs	r3, r3
 8006f22:	61a3      	str	r3, [r4, #24]
 8006f24:	6923      	ldr	r3, [r4, #16]
 8006f26:	b943      	cbnz	r3, 8006f3a <__swsetup_r+0xc6>
 8006f28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f2c:	d1ba      	bne.n	8006ea4 <__swsetup_r+0x30>
 8006f2e:	bd70      	pop	{r4, r5, r6, pc}
 8006f30:	0781      	lsls	r1, r0, #30
 8006f32:	bf58      	it	pl
 8006f34:	6963      	ldrpl	r3, [r4, #20]
 8006f36:	60a3      	str	r3, [r4, #8]
 8006f38:	e7f4      	b.n	8006f24 <__swsetup_r+0xb0>
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	e7f7      	b.n	8006f2e <__swsetup_r+0xba>
 8006f3e:	bf00      	nop
 8006f40:	20000018 	.word	0x20000018
 8006f44:	080085b0 	.word	0x080085b0
 8006f48:	080085d0 	.word	0x080085d0
 8006f4c:	08008590 	.word	0x08008590

08006f50 <abort>:
 8006f50:	b508      	push	{r3, lr}
 8006f52:	2006      	movs	r0, #6
 8006f54:	f000 fa4c 	bl	80073f0 <raise>
 8006f58:	2001      	movs	r0, #1
 8006f5a:	f7fa fc0b 	bl	8001774 <_exit>
	...

08006f60 <__sflush_r>:
 8006f60:	898a      	ldrh	r2, [r1, #12]
 8006f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f66:	4605      	mov	r5, r0
 8006f68:	0710      	lsls	r0, r2, #28
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	d458      	bmi.n	8007020 <__sflush_r+0xc0>
 8006f6e:	684b      	ldr	r3, [r1, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	dc05      	bgt.n	8006f80 <__sflush_r+0x20>
 8006f74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	dc02      	bgt.n	8006f80 <__sflush_r+0x20>
 8006f7a:	2000      	movs	r0, #0
 8006f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f82:	2e00      	cmp	r6, #0
 8006f84:	d0f9      	beq.n	8006f7a <__sflush_r+0x1a>
 8006f86:	2300      	movs	r3, #0
 8006f88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f8c:	682f      	ldr	r7, [r5, #0]
 8006f8e:	602b      	str	r3, [r5, #0]
 8006f90:	d032      	beq.n	8006ff8 <__sflush_r+0x98>
 8006f92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f94:	89a3      	ldrh	r3, [r4, #12]
 8006f96:	075a      	lsls	r2, r3, #29
 8006f98:	d505      	bpl.n	8006fa6 <__sflush_r+0x46>
 8006f9a:	6863      	ldr	r3, [r4, #4]
 8006f9c:	1ac0      	subs	r0, r0, r3
 8006f9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006fa0:	b10b      	cbz	r3, 8006fa6 <__sflush_r+0x46>
 8006fa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006fa4:	1ac0      	subs	r0, r0, r3
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	4602      	mov	r2, r0
 8006faa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fac:	6a21      	ldr	r1, [r4, #32]
 8006fae:	4628      	mov	r0, r5
 8006fb0:	47b0      	blx	r6
 8006fb2:	1c43      	adds	r3, r0, #1
 8006fb4:	89a3      	ldrh	r3, [r4, #12]
 8006fb6:	d106      	bne.n	8006fc6 <__sflush_r+0x66>
 8006fb8:	6829      	ldr	r1, [r5, #0]
 8006fba:	291d      	cmp	r1, #29
 8006fbc:	d82c      	bhi.n	8007018 <__sflush_r+0xb8>
 8006fbe:	4a2a      	ldr	r2, [pc, #168]	; (8007068 <__sflush_r+0x108>)
 8006fc0:	40ca      	lsrs	r2, r1
 8006fc2:	07d6      	lsls	r6, r2, #31
 8006fc4:	d528      	bpl.n	8007018 <__sflush_r+0xb8>
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	6062      	str	r2, [r4, #4]
 8006fca:	04d9      	lsls	r1, r3, #19
 8006fcc:	6922      	ldr	r2, [r4, #16]
 8006fce:	6022      	str	r2, [r4, #0]
 8006fd0:	d504      	bpl.n	8006fdc <__sflush_r+0x7c>
 8006fd2:	1c42      	adds	r2, r0, #1
 8006fd4:	d101      	bne.n	8006fda <__sflush_r+0x7a>
 8006fd6:	682b      	ldr	r3, [r5, #0]
 8006fd8:	b903      	cbnz	r3, 8006fdc <__sflush_r+0x7c>
 8006fda:	6560      	str	r0, [r4, #84]	; 0x54
 8006fdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fde:	602f      	str	r7, [r5, #0]
 8006fe0:	2900      	cmp	r1, #0
 8006fe2:	d0ca      	beq.n	8006f7a <__sflush_r+0x1a>
 8006fe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fe8:	4299      	cmp	r1, r3
 8006fea:	d002      	beq.n	8006ff2 <__sflush_r+0x92>
 8006fec:	4628      	mov	r0, r5
 8006fee:	f7ff fbb5 	bl	800675c <_free_r>
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	6360      	str	r0, [r4, #52]	; 0x34
 8006ff6:	e7c1      	b.n	8006f7c <__sflush_r+0x1c>
 8006ff8:	6a21      	ldr	r1, [r4, #32]
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	47b0      	blx	r6
 8007000:	1c41      	adds	r1, r0, #1
 8007002:	d1c7      	bne.n	8006f94 <__sflush_r+0x34>
 8007004:	682b      	ldr	r3, [r5, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0c4      	beq.n	8006f94 <__sflush_r+0x34>
 800700a:	2b1d      	cmp	r3, #29
 800700c:	d001      	beq.n	8007012 <__sflush_r+0xb2>
 800700e:	2b16      	cmp	r3, #22
 8007010:	d101      	bne.n	8007016 <__sflush_r+0xb6>
 8007012:	602f      	str	r7, [r5, #0]
 8007014:	e7b1      	b.n	8006f7a <__sflush_r+0x1a>
 8007016:	89a3      	ldrh	r3, [r4, #12]
 8007018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800701c:	81a3      	strh	r3, [r4, #12]
 800701e:	e7ad      	b.n	8006f7c <__sflush_r+0x1c>
 8007020:	690f      	ldr	r7, [r1, #16]
 8007022:	2f00      	cmp	r7, #0
 8007024:	d0a9      	beq.n	8006f7a <__sflush_r+0x1a>
 8007026:	0793      	lsls	r3, r2, #30
 8007028:	680e      	ldr	r6, [r1, #0]
 800702a:	bf08      	it	eq
 800702c:	694b      	ldreq	r3, [r1, #20]
 800702e:	600f      	str	r7, [r1, #0]
 8007030:	bf18      	it	ne
 8007032:	2300      	movne	r3, #0
 8007034:	eba6 0807 	sub.w	r8, r6, r7
 8007038:	608b      	str	r3, [r1, #8]
 800703a:	f1b8 0f00 	cmp.w	r8, #0
 800703e:	dd9c      	ble.n	8006f7a <__sflush_r+0x1a>
 8007040:	6a21      	ldr	r1, [r4, #32]
 8007042:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007044:	4643      	mov	r3, r8
 8007046:	463a      	mov	r2, r7
 8007048:	4628      	mov	r0, r5
 800704a:	47b0      	blx	r6
 800704c:	2800      	cmp	r0, #0
 800704e:	dc06      	bgt.n	800705e <__sflush_r+0xfe>
 8007050:	89a3      	ldrh	r3, [r4, #12]
 8007052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007056:	81a3      	strh	r3, [r4, #12]
 8007058:	f04f 30ff 	mov.w	r0, #4294967295
 800705c:	e78e      	b.n	8006f7c <__sflush_r+0x1c>
 800705e:	4407      	add	r7, r0
 8007060:	eba8 0800 	sub.w	r8, r8, r0
 8007064:	e7e9      	b.n	800703a <__sflush_r+0xda>
 8007066:	bf00      	nop
 8007068:	20400001 	.word	0x20400001

0800706c <_fflush_r>:
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	690b      	ldr	r3, [r1, #16]
 8007070:	4605      	mov	r5, r0
 8007072:	460c      	mov	r4, r1
 8007074:	b913      	cbnz	r3, 800707c <_fflush_r+0x10>
 8007076:	2500      	movs	r5, #0
 8007078:	4628      	mov	r0, r5
 800707a:	bd38      	pop	{r3, r4, r5, pc}
 800707c:	b118      	cbz	r0, 8007086 <_fflush_r+0x1a>
 800707e:	6983      	ldr	r3, [r0, #24]
 8007080:	b90b      	cbnz	r3, 8007086 <_fflush_r+0x1a>
 8007082:	f000 f887 	bl	8007194 <__sinit>
 8007086:	4b14      	ldr	r3, [pc, #80]	; (80070d8 <_fflush_r+0x6c>)
 8007088:	429c      	cmp	r4, r3
 800708a:	d11b      	bne.n	80070c4 <_fflush_r+0x58>
 800708c:	686c      	ldr	r4, [r5, #4]
 800708e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0ef      	beq.n	8007076 <_fflush_r+0xa>
 8007096:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007098:	07d0      	lsls	r0, r2, #31
 800709a:	d404      	bmi.n	80070a6 <_fflush_r+0x3a>
 800709c:	0599      	lsls	r1, r3, #22
 800709e:	d402      	bmi.n	80070a6 <_fflush_r+0x3a>
 80070a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070a2:	f000 f915 	bl	80072d0 <__retarget_lock_acquire_recursive>
 80070a6:	4628      	mov	r0, r5
 80070a8:	4621      	mov	r1, r4
 80070aa:	f7ff ff59 	bl	8006f60 <__sflush_r>
 80070ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070b0:	07da      	lsls	r2, r3, #31
 80070b2:	4605      	mov	r5, r0
 80070b4:	d4e0      	bmi.n	8007078 <_fflush_r+0xc>
 80070b6:	89a3      	ldrh	r3, [r4, #12]
 80070b8:	059b      	lsls	r3, r3, #22
 80070ba:	d4dd      	bmi.n	8007078 <_fflush_r+0xc>
 80070bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070be:	f000 f908 	bl	80072d2 <__retarget_lock_release_recursive>
 80070c2:	e7d9      	b.n	8007078 <_fflush_r+0xc>
 80070c4:	4b05      	ldr	r3, [pc, #20]	; (80070dc <_fflush_r+0x70>)
 80070c6:	429c      	cmp	r4, r3
 80070c8:	d101      	bne.n	80070ce <_fflush_r+0x62>
 80070ca:	68ac      	ldr	r4, [r5, #8]
 80070cc:	e7df      	b.n	800708e <_fflush_r+0x22>
 80070ce:	4b04      	ldr	r3, [pc, #16]	; (80070e0 <_fflush_r+0x74>)
 80070d0:	429c      	cmp	r4, r3
 80070d2:	bf08      	it	eq
 80070d4:	68ec      	ldreq	r4, [r5, #12]
 80070d6:	e7da      	b.n	800708e <_fflush_r+0x22>
 80070d8:	080085b0 	.word	0x080085b0
 80070dc:	080085d0 	.word	0x080085d0
 80070e0:	08008590 	.word	0x08008590

080070e4 <std>:
 80070e4:	2300      	movs	r3, #0
 80070e6:	b510      	push	{r4, lr}
 80070e8:	4604      	mov	r4, r0
 80070ea:	e9c0 3300 	strd	r3, r3, [r0]
 80070ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070f2:	6083      	str	r3, [r0, #8]
 80070f4:	8181      	strh	r1, [r0, #12]
 80070f6:	6643      	str	r3, [r0, #100]	; 0x64
 80070f8:	81c2      	strh	r2, [r0, #14]
 80070fa:	6183      	str	r3, [r0, #24]
 80070fc:	4619      	mov	r1, r3
 80070fe:	2208      	movs	r2, #8
 8007100:	305c      	adds	r0, #92	; 0x5c
 8007102:	f7fd feb7 	bl	8004e74 <memset>
 8007106:	4b05      	ldr	r3, [pc, #20]	; (800711c <std+0x38>)
 8007108:	6263      	str	r3, [r4, #36]	; 0x24
 800710a:	4b05      	ldr	r3, [pc, #20]	; (8007120 <std+0x3c>)
 800710c:	62a3      	str	r3, [r4, #40]	; 0x28
 800710e:	4b05      	ldr	r3, [pc, #20]	; (8007124 <std+0x40>)
 8007110:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007112:	4b05      	ldr	r3, [pc, #20]	; (8007128 <std+0x44>)
 8007114:	6224      	str	r4, [r4, #32]
 8007116:	6323      	str	r3, [r4, #48]	; 0x30
 8007118:	bd10      	pop	{r4, pc}
 800711a:	bf00      	nop
 800711c:	08007429 	.word	0x08007429
 8007120:	0800744b 	.word	0x0800744b
 8007124:	08007483 	.word	0x08007483
 8007128:	080074a7 	.word	0x080074a7

0800712c <_cleanup_r>:
 800712c:	4901      	ldr	r1, [pc, #4]	; (8007134 <_cleanup_r+0x8>)
 800712e:	f000 b8af 	b.w	8007290 <_fwalk_reent>
 8007132:	bf00      	nop
 8007134:	0800706d 	.word	0x0800706d

08007138 <__sfmoreglue>:
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	2268      	movs	r2, #104	; 0x68
 800713c:	1e4d      	subs	r5, r1, #1
 800713e:	4355      	muls	r5, r2
 8007140:	460e      	mov	r6, r1
 8007142:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007146:	f7fe fbaf 	bl	80058a8 <_malloc_r>
 800714a:	4604      	mov	r4, r0
 800714c:	b140      	cbz	r0, 8007160 <__sfmoreglue+0x28>
 800714e:	2100      	movs	r1, #0
 8007150:	e9c0 1600 	strd	r1, r6, [r0]
 8007154:	300c      	adds	r0, #12
 8007156:	60a0      	str	r0, [r4, #8]
 8007158:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800715c:	f7fd fe8a 	bl	8004e74 <memset>
 8007160:	4620      	mov	r0, r4
 8007162:	bd70      	pop	{r4, r5, r6, pc}

08007164 <__sfp_lock_acquire>:
 8007164:	4801      	ldr	r0, [pc, #4]	; (800716c <__sfp_lock_acquire+0x8>)
 8007166:	f000 b8b3 	b.w	80072d0 <__retarget_lock_acquire_recursive>
 800716a:	bf00      	nop
 800716c:	2000055d 	.word	0x2000055d

08007170 <__sfp_lock_release>:
 8007170:	4801      	ldr	r0, [pc, #4]	; (8007178 <__sfp_lock_release+0x8>)
 8007172:	f000 b8ae 	b.w	80072d2 <__retarget_lock_release_recursive>
 8007176:	bf00      	nop
 8007178:	2000055d 	.word	0x2000055d

0800717c <__sinit_lock_acquire>:
 800717c:	4801      	ldr	r0, [pc, #4]	; (8007184 <__sinit_lock_acquire+0x8>)
 800717e:	f000 b8a7 	b.w	80072d0 <__retarget_lock_acquire_recursive>
 8007182:	bf00      	nop
 8007184:	2000055e 	.word	0x2000055e

08007188 <__sinit_lock_release>:
 8007188:	4801      	ldr	r0, [pc, #4]	; (8007190 <__sinit_lock_release+0x8>)
 800718a:	f000 b8a2 	b.w	80072d2 <__retarget_lock_release_recursive>
 800718e:	bf00      	nop
 8007190:	2000055e 	.word	0x2000055e

08007194 <__sinit>:
 8007194:	b510      	push	{r4, lr}
 8007196:	4604      	mov	r4, r0
 8007198:	f7ff fff0 	bl	800717c <__sinit_lock_acquire>
 800719c:	69a3      	ldr	r3, [r4, #24]
 800719e:	b11b      	cbz	r3, 80071a8 <__sinit+0x14>
 80071a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071a4:	f7ff bff0 	b.w	8007188 <__sinit_lock_release>
 80071a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80071ac:	6523      	str	r3, [r4, #80]	; 0x50
 80071ae:	4b13      	ldr	r3, [pc, #76]	; (80071fc <__sinit+0x68>)
 80071b0:	4a13      	ldr	r2, [pc, #76]	; (8007200 <__sinit+0x6c>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80071b6:	42a3      	cmp	r3, r4
 80071b8:	bf04      	itt	eq
 80071ba:	2301      	moveq	r3, #1
 80071bc:	61a3      	streq	r3, [r4, #24]
 80071be:	4620      	mov	r0, r4
 80071c0:	f000 f820 	bl	8007204 <__sfp>
 80071c4:	6060      	str	r0, [r4, #4]
 80071c6:	4620      	mov	r0, r4
 80071c8:	f000 f81c 	bl	8007204 <__sfp>
 80071cc:	60a0      	str	r0, [r4, #8]
 80071ce:	4620      	mov	r0, r4
 80071d0:	f000 f818 	bl	8007204 <__sfp>
 80071d4:	2200      	movs	r2, #0
 80071d6:	60e0      	str	r0, [r4, #12]
 80071d8:	2104      	movs	r1, #4
 80071da:	6860      	ldr	r0, [r4, #4]
 80071dc:	f7ff ff82 	bl	80070e4 <std>
 80071e0:	68a0      	ldr	r0, [r4, #8]
 80071e2:	2201      	movs	r2, #1
 80071e4:	2109      	movs	r1, #9
 80071e6:	f7ff ff7d 	bl	80070e4 <std>
 80071ea:	68e0      	ldr	r0, [r4, #12]
 80071ec:	2202      	movs	r2, #2
 80071ee:	2112      	movs	r1, #18
 80071f0:	f7ff ff78 	bl	80070e4 <std>
 80071f4:	2301      	movs	r3, #1
 80071f6:	61a3      	str	r3, [r4, #24]
 80071f8:	e7d2      	b.n	80071a0 <__sinit+0xc>
 80071fa:	bf00      	nop
 80071fc:	08008330 	.word	0x08008330
 8007200:	0800712d 	.word	0x0800712d

08007204 <__sfp>:
 8007204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007206:	4607      	mov	r7, r0
 8007208:	f7ff ffac 	bl	8007164 <__sfp_lock_acquire>
 800720c:	4b1e      	ldr	r3, [pc, #120]	; (8007288 <__sfp+0x84>)
 800720e:	681e      	ldr	r6, [r3, #0]
 8007210:	69b3      	ldr	r3, [r6, #24]
 8007212:	b913      	cbnz	r3, 800721a <__sfp+0x16>
 8007214:	4630      	mov	r0, r6
 8007216:	f7ff ffbd 	bl	8007194 <__sinit>
 800721a:	3648      	adds	r6, #72	; 0x48
 800721c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007220:	3b01      	subs	r3, #1
 8007222:	d503      	bpl.n	800722c <__sfp+0x28>
 8007224:	6833      	ldr	r3, [r6, #0]
 8007226:	b30b      	cbz	r3, 800726c <__sfp+0x68>
 8007228:	6836      	ldr	r6, [r6, #0]
 800722a:	e7f7      	b.n	800721c <__sfp+0x18>
 800722c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007230:	b9d5      	cbnz	r5, 8007268 <__sfp+0x64>
 8007232:	4b16      	ldr	r3, [pc, #88]	; (800728c <__sfp+0x88>)
 8007234:	60e3      	str	r3, [r4, #12]
 8007236:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800723a:	6665      	str	r5, [r4, #100]	; 0x64
 800723c:	f000 f847 	bl	80072ce <__retarget_lock_init_recursive>
 8007240:	f7ff ff96 	bl	8007170 <__sfp_lock_release>
 8007244:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007248:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800724c:	6025      	str	r5, [r4, #0]
 800724e:	61a5      	str	r5, [r4, #24]
 8007250:	2208      	movs	r2, #8
 8007252:	4629      	mov	r1, r5
 8007254:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007258:	f7fd fe0c 	bl	8004e74 <memset>
 800725c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007260:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007264:	4620      	mov	r0, r4
 8007266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007268:	3468      	adds	r4, #104	; 0x68
 800726a:	e7d9      	b.n	8007220 <__sfp+0x1c>
 800726c:	2104      	movs	r1, #4
 800726e:	4638      	mov	r0, r7
 8007270:	f7ff ff62 	bl	8007138 <__sfmoreglue>
 8007274:	4604      	mov	r4, r0
 8007276:	6030      	str	r0, [r6, #0]
 8007278:	2800      	cmp	r0, #0
 800727a:	d1d5      	bne.n	8007228 <__sfp+0x24>
 800727c:	f7ff ff78 	bl	8007170 <__sfp_lock_release>
 8007280:	230c      	movs	r3, #12
 8007282:	603b      	str	r3, [r7, #0]
 8007284:	e7ee      	b.n	8007264 <__sfp+0x60>
 8007286:	bf00      	nop
 8007288:	08008330 	.word	0x08008330
 800728c:	ffff0001 	.word	0xffff0001

08007290 <_fwalk_reent>:
 8007290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007294:	4606      	mov	r6, r0
 8007296:	4688      	mov	r8, r1
 8007298:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800729c:	2700      	movs	r7, #0
 800729e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072a2:	f1b9 0901 	subs.w	r9, r9, #1
 80072a6:	d505      	bpl.n	80072b4 <_fwalk_reent+0x24>
 80072a8:	6824      	ldr	r4, [r4, #0]
 80072aa:	2c00      	cmp	r4, #0
 80072ac:	d1f7      	bne.n	800729e <_fwalk_reent+0xe>
 80072ae:	4638      	mov	r0, r7
 80072b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072b4:	89ab      	ldrh	r3, [r5, #12]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d907      	bls.n	80072ca <_fwalk_reent+0x3a>
 80072ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072be:	3301      	adds	r3, #1
 80072c0:	d003      	beq.n	80072ca <_fwalk_reent+0x3a>
 80072c2:	4629      	mov	r1, r5
 80072c4:	4630      	mov	r0, r6
 80072c6:	47c0      	blx	r8
 80072c8:	4307      	orrs	r7, r0
 80072ca:	3568      	adds	r5, #104	; 0x68
 80072cc:	e7e9      	b.n	80072a2 <_fwalk_reent+0x12>

080072ce <__retarget_lock_init_recursive>:
 80072ce:	4770      	bx	lr

080072d0 <__retarget_lock_acquire_recursive>:
 80072d0:	4770      	bx	lr

080072d2 <__retarget_lock_release_recursive>:
 80072d2:	4770      	bx	lr

080072d4 <__swhatbuf_r>:
 80072d4:	b570      	push	{r4, r5, r6, lr}
 80072d6:	460e      	mov	r6, r1
 80072d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072dc:	2900      	cmp	r1, #0
 80072de:	b096      	sub	sp, #88	; 0x58
 80072e0:	4614      	mov	r4, r2
 80072e2:	461d      	mov	r5, r3
 80072e4:	da08      	bge.n	80072f8 <__swhatbuf_r+0x24>
 80072e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	602a      	str	r2, [r5, #0]
 80072ee:	061a      	lsls	r2, r3, #24
 80072f0:	d410      	bmi.n	8007314 <__swhatbuf_r+0x40>
 80072f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072f6:	e00e      	b.n	8007316 <__swhatbuf_r+0x42>
 80072f8:	466a      	mov	r2, sp
 80072fa:	f000 f8fb 	bl	80074f4 <_fstat_r>
 80072fe:	2800      	cmp	r0, #0
 8007300:	dbf1      	blt.n	80072e6 <__swhatbuf_r+0x12>
 8007302:	9a01      	ldr	r2, [sp, #4]
 8007304:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007308:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800730c:	425a      	negs	r2, r3
 800730e:	415a      	adcs	r2, r3
 8007310:	602a      	str	r2, [r5, #0]
 8007312:	e7ee      	b.n	80072f2 <__swhatbuf_r+0x1e>
 8007314:	2340      	movs	r3, #64	; 0x40
 8007316:	2000      	movs	r0, #0
 8007318:	6023      	str	r3, [r4, #0]
 800731a:	b016      	add	sp, #88	; 0x58
 800731c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007320 <__smakebuf_r>:
 8007320:	898b      	ldrh	r3, [r1, #12]
 8007322:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007324:	079d      	lsls	r5, r3, #30
 8007326:	4606      	mov	r6, r0
 8007328:	460c      	mov	r4, r1
 800732a:	d507      	bpl.n	800733c <__smakebuf_r+0x1c>
 800732c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007330:	6023      	str	r3, [r4, #0]
 8007332:	6123      	str	r3, [r4, #16]
 8007334:	2301      	movs	r3, #1
 8007336:	6163      	str	r3, [r4, #20]
 8007338:	b002      	add	sp, #8
 800733a:	bd70      	pop	{r4, r5, r6, pc}
 800733c:	ab01      	add	r3, sp, #4
 800733e:	466a      	mov	r2, sp
 8007340:	f7ff ffc8 	bl	80072d4 <__swhatbuf_r>
 8007344:	9900      	ldr	r1, [sp, #0]
 8007346:	4605      	mov	r5, r0
 8007348:	4630      	mov	r0, r6
 800734a:	f7fe faad 	bl	80058a8 <_malloc_r>
 800734e:	b948      	cbnz	r0, 8007364 <__smakebuf_r+0x44>
 8007350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007354:	059a      	lsls	r2, r3, #22
 8007356:	d4ef      	bmi.n	8007338 <__smakebuf_r+0x18>
 8007358:	f023 0303 	bic.w	r3, r3, #3
 800735c:	f043 0302 	orr.w	r3, r3, #2
 8007360:	81a3      	strh	r3, [r4, #12]
 8007362:	e7e3      	b.n	800732c <__smakebuf_r+0xc>
 8007364:	4b0d      	ldr	r3, [pc, #52]	; (800739c <__smakebuf_r+0x7c>)
 8007366:	62b3      	str	r3, [r6, #40]	; 0x28
 8007368:	89a3      	ldrh	r3, [r4, #12]
 800736a:	6020      	str	r0, [r4, #0]
 800736c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007370:	81a3      	strh	r3, [r4, #12]
 8007372:	9b00      	ldr	r3, [sp, #0]
 8007374:	6163      	str	r3, [r4, #20]
 8007376:	9b01      	ldr	r3, [sp, #4]
 8007378:	6120      	str	r0, [r4, #16]
 800737a:	b15b      	cbz	r3, 8007394 <__smakebuf_r+0x74>
 800737c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007380:	4630      	mov	r0, r6
 8007382:	f000 f8c9 	bl	8007518 <_isatty_r>
 8007386:	b128      	cbz	r0, 8007394 <__smakebuf_r+0x74>
 8007388:	89a3      	ldrh	r3, [r4, #12]
 800738a:	f023 0303 	bic.w	r3, r3, #3
 800738e:	f043 0301 	orr.w	r3, r3, #1
 8007392:	81a3      	strh	r3, [r4, #12]
 8007394:	89a0      	ldrh	r0, [r4, #12]
 8007396:	4305      	orrs	r5, r0
 8007398:	81a5      	strh	r5, [r4, #12]
 800739a:	e7cd      	b.n	8007338 <__smakebuf_r+0x18>
 800739c:	0800712d 	.word	0x0800712d

080073a0 <_raise_r>:
 80073a0:	291f      	cmp	r1, #31
 80073a2:	b538      	push	{r3, r4, r5, lr}
 80073a4:	4604      	mov	r4, r0
 80073a6:	460d      	mov	r5, r1
 80073a8:	d904      	bls.n	80073b4 <_raise_r+0x14>
 80073aa:	2316      	movs	r3, #22
 80073ac:	6003      	str	r3, [r0, #0]
 80073ae:	f04f 30ff 	mov.w	r0, #4294967295
 80073b2:	bd38      	pop	{r3, r4, r5, pc}
 80073b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80073b6:	b112      	cbz	r2, 80073be <_raise_r+0x1e>
 80073b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80073bc:	b94b      	cbnz	r3, 80073d2 <_raise_r+0x32>
 80073be:	4620      	mov	r0, r4
 80073c0:	f000 f830 	bl	8007424 <_getpid_r>
 80073c4:	462a      	mov	r2, r5
 80073c6:	4601      	mov	r1, r0
 80073c8:	4620      	mov	r0, r4
 80073ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073ce:	f000 b817 	b.w	8007400 <_kill_r>
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d00a      	beq.n	80073ec <_raise_r+0x4c>
 80073d6:	1c59      	adds	r1, r3, #1
 80073d8:	d103      	bne.n	80073e2 <_raise_r+0x42>
 80073da:	2316      	movs	r3, #22
 80073dc:	6003      	str	r3, [r0, #0]
 80073de:	2001      	movs	r0, #1
 80073e0:	e7e7      	b.n	80073b2 <_raise_r+0x12>
 80073e2:	2400      	movs	r4, #0
 80073e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80073e8:	4628      	mov	r0, r5
 80073ea:	4798      	blx	r3
 80073ec:	2000      	movs	r0, #0
 80073ee:	e7e0      	b.n	80073b2 <_raise_r+0x12>

080073f0 <raise>:
 80073f0:	4b02      	ldr	r3, [pc, #8]	; (80073fc <raise+0xc>)
 80073f2:	4601      	mov	r1, r0
 80073f4:	6818      	ldr	r0, [r3, #0]
 80073f6:	f7ff bfd3 	b.w	80073a0 <_raise_r>
 80073fa:	bf00      	nop
 80073fc:	20000018 	.word	0x20000018

08007400 <_kill_r>:
 8007400:	b538      	push	{r3, r4, r5, lr}
 8007402:	4d07      	ldr	r5, [pc, #28]	; (8007420 <_kill_r+0x20>)
 8007404:	2300      	movs	r3, #0
 8007406:	4604      	mov	r4, r0
 8007408:	4608      	mov	r0, r1
 800740a:	4611      	mov	r1, r2
 800740c:	602b      	str	r3, [r5, #0]
 800740e:	f7fa f9a1 	bl	8001754 <_kill>
 8007412:	1c43      	adds	r3, r0, #1
 8007414:	d102      	bne.n	800741c <_kill_r+0x1c>
 8007416:	682b      	ldr	r3, [r5, #0]
 8007418:	b103      	cbz	r3, 800741c <_kill_r+0x1c>
 800741a:	6023      	str	r3, [r4, #0]
 800741c:	bd38      	pop	{r3, r4, r5, pc}
 800741e:	bf00      	nop
 8007420:	20000558 	.word	0x20000558

08007424 <_getpid_r>:
 8007424:	f7fa b98e 	b.w	8001744 <_getpid>

08007428 <__sread>:
 8007428:	b510      	push	{r4, lr}
 800742a:	460c      	mov	r4, r1
 800742c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007430:	f000 f894 	bl	800755c <_read_r>
 8007434:	2800      	cmp	r0, #0
 8007436:	bfab      	itete	ge
 8007438:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800743a:	89a3      	ldrhlt	r3, [r4, #12]
 800743c:	181b      	addge	r3, r3, r0
 800743e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007442:	bfac      	ite	ge
 8007444:	6563      	strge	r3, [r4, #84]	; 0x54
 8007446:	81a3      	strhlt	r3, [r4, #12]
 8007448:	bd10      	pop	{r4, pc}

0800744a <__swrite>:
 800744a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800744e:	461f      	mov	r7, r3
 8007450:	898b      	ldrh	r3, [r1, #12]
 8007452:	05db      	lsls	r3, r3, #23
 8007454:	4605      	mov	r5, r0
 8007456:	460c      	mov	r4, r1
 8007458:	4616      	mov	r6, r2
 800745a:	d505      	bpl.n	8007468 <__swrite+0x1e>
 800745c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007460:	2302      	movs	r3, #2
 8007462:	2200      	movs	r2, #0
 8007464:	f000 f868 	bl	8007538 <_lseek_r>
 8007468:	89a3      	ldrh	r3, [r4, #12]
 800746a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800746e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007472:	81a3      	strh	r3, [r4, #12]
 8007474:	4632      	mov	r2, r6
 8007476:	463b      	mov	r3, r7
 8007478:	4628      	mov	r0, r5
 800747a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800747e:	f000 b817 	b.w	80074b0 <_write_r>

08007482 <__sseek>:
 8007482:	b510      	push	{r4, lr}
 8007484:	460c      	mov	r4, r1
 8007486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800748a:	f000 f855 	bl	8007538 <_lseek_r>
 800748e:	1c43      	adds	r3, r0, #1
 8007490:	89a3      	ldrh	r3, [r4, #12]
 8007492:	bf15      	itete	ne
 8007494:	6560      	strne	r0, [r4, #84]	; 0x54
 8007496:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800749a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800749e:	81a3      	strheq	r3, [r4, #12]
 80074a0:	bf18      	it	ne
 80074a2:	81a3      	strhne	r3, [r4, #12]
 80074a4:	bd10      	pop	{r4, pc}

080074a6 <__sclose>:
 80074a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074aa:	f000 b813 	b.w	80074d4 <_close_r>
	...

080074b0 <_write_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4d07      	ldr	r5, [pc, #28]	; (80074d0 <_write_r+0x20>)
 80074b4:	4604      	mov	r4, r0
 80074b6:	4608      	mov	r0, r1
 80074b8:	4611      	mov	r1, r2
 80074ba:	2200      	movs	r2, #0
 80074bc:	602a      	str	r2, [r5, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	f7fa f97f 	bl	80017c2 <_write>
 80074c4:	1c43      	adds	r3, r0, #1
 80074c6:	d102      	bne.n	80074ce <_write_r+0x1e>
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	b103      	cbz	r3, 80074ce <_write_r+0x1e>
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	bd38      	pop	{r3, r4, r5, pc}
 80074d0:	20000558 	.word	0x20000558

080074d4 <_close_r>:
 80074d4:	b538      	push	{r3, r4, r5, lr}
 80074d6:	4d06      	ldr	r5, [pc, #24]	; (80074f0 <_close_r+0x1c>)
 80074d8:	2300      	movs	r3, #0
 80074da:	4604      	mov	r4, r0
 80074dc:	4608      	mov	r0, r1
 80074de:	602b      	str	r3, [r5, #0]
 80074e0:	f7fa f98b 	bl	80017fa <_close>
 80074e4:	1c43      	adds	r3, r0, #1
 80074e6:	d102      	bne.n	80074ee <_close_r+0x1a>
 80074e8:	682b      	ldr	r3, [r5, #0]
 80074ea:	b103      	cbz	r3, 80074ee <_close_r+0x1a>
 80074ec:	6023      	str	r3, [r4, #0]
 80074ee:	bd38      	pop	{r3, r4, r5, pc}
 80074f0:	20000558 	.word	0x20000558

080074f4 <_fstat_r>:
 80074f4:	b538      	push	{r3, r4, r5, lr}
 80074f6:	4d07      	ldr	r5, [pc, #28]	; (8007514 <_fstat_r+0x20>)
 80074f8:	2300      	movs	r3, #0
 80074fa:	4604      	mov	r4, r0
 80074fc:	4608      	mov	r0, r1
 80074fe:	4611      	mov	r1, r2
 8007500:	602b      	str	r3, [r5, #0]
 8007502:	f7fa f986 	bl	8001812 <_fstat>
 8007506:	1c43      	adds	r3, r0, #1
 8007508:	d102      	bne.n	8007510 <_fstat_r+0x1c>
 800750a:	682b      	ldr	r3, [r5, #0]
 800750c:	b103      	cbz	r3, 8007510 <_fstat_r+0x1c>
 800750e:	6023      	str	r3, [r4, #0]
 8007510:	bd38      	pop	{r3, r4, r5, pc}
 8007512:	bf00      	nop
 8007514:	20000558 	.word	0x20000558

08007518 <_isatty_r>:
 8007518:	b538      	push	{r3, r4, r5, lr}
 800751a:	4d06      	ldr	r5, [pc, #24]	; (8007534 <_isatty_r+0x1c>)
 800751c:	2300      	movs	r3, #0
 800751e:	4604      	mov	r4, r0
 8007520:	4608      	mov	r0, r1
 8007522:	602b      	str	r3, [r5, #0]
 8007524:	f7fa f985 	bl	8001832 <_isatty>
 8007528:	1c43      	adds	r3, r0, #1
 800752a:	d102      	bne.n	8007532 <_isatty_r+0x1a>
 800752c:	682b      	ldr	r3, [r5, #0]
 800752e:	b103      	cbz	r3, 8007532 <_isatty_r+0x1a>
 8007530:	6023      	str	r3, [r4, #0]
 8007532:	bd38      	pop	{r3, r4, r5, pc}
 8007534:	20000558 	.word	0x20000558

08007538 <_lseek_r>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	4d07      	ldr	r5, [pc, #28]	; (8007558 <_lseek_r+0x20>)
 800753c:	4604      	mov	r4, r0
 800753e:	4608      	mov	r0, r1
 8007540:	4611      	mov	r1, r2
 8007542:	2200      	movs	r2, #0
 8007544:	602a      	str	r2, [r5, #0]
 8007546:	461a      	mov	r2, r3
 8007548:	f7fa f97e 	bl	8001848 <_lseek>
 800754c:	1c43      	adds	r3, r0, #1
 800754e:	d102      	bne.n	8007556 <_lseek_r+0x1e>
 8007550:	682b      	ldr	r3, [r5, #0]
 8007552:	b103      	cbz	r3, 8007556 <_lseek_r+0x1e>
 8007554:	6023      	str	r3, [r4, #0]
 8007556:	bd38      	pop	{r3, r4, r5, pc}
 8007558:	20000558 	.word	0x20000558

0800755c <_read_r>:
 800755c:	b538      	push	{r3, r4, r5, lr}
 800755e:	4d07      	ldr	r5, [pc, #28]	; (800757c <_read_r+0x20>)
 8007560:	4604      	mov	r4, r0
 8007562:	4608      	mov	r0, r1
 8007564:	4611      	mov	r1, r2
 8007566:	2200      	movs	r2, #0
 8007568:	602a      	str	r2, [r5, #0]
 800756a:	461a      	mov	r2, r3
 800756c:	f7fa f90c 	bl	8001788 <_read>
 8007570:	1c43      	adds	r3, r0, #1
 8007572:	d102      	bne.n	800757a <_read_r+0x1e>
 8007574:	682b      	ldr	r3, [r5, #0]
 8007576:	b103      	cbz	r3, 800757a <_read_r+0x1e>
 8007578:	6023      	str	r3, [r4, #0]
 800757a:	bd38      	pop	{r3, r4, r5, pc}
 800757c:	20000558 	.word	0x20000558

08007580 <_init>:
 8007580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007582:	bf00      	nop
 8007584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007586:	bc08      	pop	{r3}
 8007588:	469e      	mov	lr, r3
 800758a:	4770      	bx	lr

0800758c <_fini>:
 800758c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758e:	bf00      	nop
 8007590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007592:	bc08      	pop	{r3}
 8007594:	469e      	mov	lr, r3
 8007596:	4770      	bx	lr
